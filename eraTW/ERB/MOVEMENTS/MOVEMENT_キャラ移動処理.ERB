;-----------------------------------------------------------
;拠点内で角色の挙動を処理する関数
;             ARG   判定する角色
;        留まり率   現在位置に対する移動率,高いほど留まる,减少になると移動しやすくなる
;          移動先   移動判定を行う地点ID
;        移動決定   実際に移動する地点ID
;      無差別移動   移動先が侵入可能ならとりあえず移動する
;        強制移動   移動先に何がなんでも移動する（無差別移動でどこにも移動できないと発動）
;             END   終了フラグ
;            N_ID   ARGの現在位置
;         G_POINT   一時的な引力点
;          引力点   徐々に移動していく目的地
;なるべく動かない   1ターンだけ持続する無差別移動にならないかぎり移動しない状態,移動直後や特定の行動を取った際になる
;-----------------------------------------------------------
@角色移動処理(ARG)
#DIM 留まり率
#DIM 移動先
#DIM 移動決定
#DIM 無差別移動
#DIM 強制移動
#DIM END
#DIM N_ID
#DIM G_POINT
VARSET LOCAL
END = 0
;你の拠点物件にいる角色のみが対象
SIF !AT_HOME(ARG)
	END = 1
;行動不能
SIF FLAG:時間停止 || CFLAG:ARG:衰弱 || CFLAG:ARG:招待 || CFLAG:ARG:睡眠
	END = 1
;仕事、延迟、添い寝、诶嘿嘿、同行中は移動処理リセット
SIF CFLAG:ARG:行動 == 5 || CFLAG:ARG:延迟 || CFLAG:ARG:陪睡中 || CFLAG:ARG:诶嘿嘿 || CFLAG:ARG:同行
	END = 1

;終了処置
IF END
	TCVAR:ARG:なるべく動かない = 0
	RETURN
ENDIF

N_ID = CFLAG:ARG:現在位置

;まずその場に留まり率を設定
;addition custom code, for custom charadata movement
CALL KOJO_CHECK(ARG, "CHARADATA", "MOVE", 4, N_ID)
IF RESULT == -1 ;等于-1时,表明口上侧需要是结果为0
	RESULT = 0
	CALLFORM CHARAMOVE_DATA_{NO:ARG}(4, N_ID)
ELSEIF RESULT ;等于其他正值时，表明口上侧有自己的值
ELSE 
	;addition custom code, duplicated characters
	CALLFORM CHARAMOVE_DATA_{NO:ARG}(4, N_ID)
ENDIF 
留まり率 = RESULT
;待機場所は固定
IF N_ID == MAXROOM
	留まり率 = -10
;引力点も固定
ELSEIF N_ID == TCVAR:ARG:引力点
	留まり率 = 5
ELSE
	;留まりにくい場所
	SIF N_ID == GET_ENTRANCE(MAIN_MAP) || ROOMDATA:(N_ID % 100) & 場所_留まらない
		留まり率 += -5
	;你と同室だったら態度で留まる
	SIF N_ID == CFLAG:MASTER:現在位置
		留まり率 += CFLAG:ARG:態度 * 2
ENDIF

無差別移動 = 0
強制移動 = 0
;お風呂にいる
IF BATHROOM(N_ID)
	;お風呂なう
	IF CFLAG:ARG:風呂
		TCVAR:ARG:なるべく動かない = 0
		RETURN
	;あがる
	ELSE
		無差別移動 = 1
	ENDIF
ENDIF
;廁所は10分経過したら出てくる,利尿剤が効いてると出てこない
IF IN_TOILET(N_ID) && TIME_PROGRESS(TIME:1) >= 10
	IF TCVAR:ARG:利尿剤
		TCVAR:ARG:なるべく動かない = 1
	ELSEIF TIME_PROGRESS(TIME:1) >= 10 && !TCVAR:ARG:利尿剤
		無差別移動 = 1
	ENDIF
ENDIF
;天候ダメージが痛い
SIF 天候造成的影響(ARG, N_ID) <= -3
	無差別移動 = 1
;現在位置の移動率を判定して、本来入らない場所（なおかつ你が居ない）ならG_POINTを付けて無差別移動
CALL 角色移動率(ARG, N_ID)
IF RESULT <= 0 && N_ID != CFLAG:MASTER:現在位置
	無差別移動 = 1
	;引力点が未設定ならとりあえず外に出ようとする
	SIF !TCVAR:ARG:引力点
		G_POINT = ENTRANCE
ELSE
	G_POINT = 0
ENDIF
;なるべく動かないなら終了
IF TCVAR:ARG:なるべく動かない && !無差別移動
	TCVAR:ARG:なるべく動かない = 0
	RETURN
ENDIF

CALL FISHER_YATES_SHAFFLE(MAXROOM - MINROOM())
移動決定 = 0
WHILE 1
	;引力点の設定を行う
	TCVAR:ARG:引力点 = 0
	;addition custom code, for custom charadata movement
	CALL KOJO_CHECK(ARG, "CHARADATA", "MOVE", 8)
	IF RESULT == -1 ;等于-1时,表明口上侧需要是结果为0
		RESULT = 0
		CALLFORM CHARAMOVE_DATA_{NO:ARG}(8)
	ELSEIF RESULT ;等于其他正值时，表明口上侧有自己的值
	ELSE 
	;addition custom code, duplicated characters
	CALLFORM CHARAMOVE_DATA_{NO:ARG}(8)
	ENDIF
	CALL KOJO_MESSAGE_SEND("GRAVITY", 1, ARG)
	;引力点または脱出用のG_POINTがある場合は引力点に向かって移動する,G_POINTは条件無し
	IF 引力点発動可(ARG) || G_POINT
		;引力点かG_POINTを目指す
		移動先 = TCVAR:ARG:引力点 ? TCVAR:ARG:引力点 # G_POINT
		;スキップムーブでルート検索
		WHILE !(CAN_MOVE(N_ID, 移動先) & 1)
			TRYCALLFORM SKIP_MOVE_{MAIN_MAP}(移動先, N_ID)
			移動先 = RESULT
		WEND
		;移動先が主人公私室であり、その角色の私室でなく、そこで你がウフフ中の場合は入ってこれない
		IF 移動先 == CFLAG:MASTER:初期位置 && 移動先 != CFLAG:ARG:初期位置 && 移動先 == CFLAG:MASTER:現在位置 && CFLAG:MASTER:诶嘿嘿
		;結界発動中
		ELSEIF TEQUIP:MASTER:結界発動 && 移動先 == CFLAG:MASTER:現在位置
		ELSE
			;留まり率に補正をかけて動きやすくする（要調整,-100だとほぼ運動の）
			CALL 角色移動率(ARG, 移動先, 留まり率 - 100)
			;移動判定
			IF RESULT * TIME_PROGRESS(TIME:1) > RAND:1000
				移動決定 = 移動先
			;無差別移動時はなるべく移動,強制移動時は無条件に移動
			ELSEIF (RESULT && 無差別移動) || 強制移動
				移動決定 = 移動先
			ENDIF
		ENDIF
	;通常の移動
	ELSE
		FOR LOCAL, 0, MAXROOM - MINROOM()
			移動先 = SHAFFLE_ARRAY:LOCAL + MAIN_MAP * 100 + 1
			;現在位置
			SIF 移動先 == N_ID
				CONTINUE
			;移動できない
			SIF !(CAN_MOVE(N_ID, 移動先) & 1)
				CONTINUE
			;移動できない２,ワンルーム制限等、移動に制限がある場所
			SIF !MAP_CAN_MOVE(移動先, ARG)
				CONTINUE
			;移動先が主人公私室であり、その角色の私室でなく、そこで你がウフフ中の場合は入ってこれない
			SIF 移動先 == CFLAG:MASTER:初期位置 && 移動先 != CFLAG:ARG:初期位置 && 移動先 == CFLAG:MASTER:現在位置 && CFLAG:MASTER:诶嘿嘿
				CONTINUE
			;強制移動時は以下の条件はパスする
			IF !強制移動
				;天候が今いる場所より痛い
				SIF 天候造成的影響(ARG, 移動先) <= -3 && N_ID != MAXROOM && 天候造成的影響(ARG, N_ID) >= -2
					CONTINUE
				;追い出された先
				SIF 移動先 == TCVAR:ARG:追い出され地点
					CONTINUE
				;結界発動中
				SIF TEQUIP:MASTER:結界発動 && 移動先 == CFLAG:MASTER:現在位置
					CONTINUE
			ENDIF
			;最初にヒットした移動先で判定してBREAKする（分岐が多いほど移動確率が上がらないようにするため）
			CALL 角色移動率(ARG, 移動先, 留まり率)
			;通常の移動判定
			IF RESULT * TIME_PROGRESS(TIME:1) > RAND:1000
				移動決定 = 移動先
			;無差別移動時はなるべく移動,強制移動時は無条件に移動
			ELSEIF (RESULT && 無差別移動) || 強制移動
				移動決定 = 移動先
			;移動率が0%じゃないなら判定終了（减少でも終了）
			ELSEIF RESULT
				;ただし無差別移動時は強制移動を付けて再判定
				IF 無差別移動 && !強制移動
					強制移動 = 1
				ELSE
					TCVAR:ARG:なるべく動かない = 0
					RETURN
				ENDIF
			;0%なら再判定
			ELSE
				CONTINUE
			ENDIF
			BREAK
		NEXT
	ENDIF
	;強制移動時は移動決定するまでループ
	IF 強制移動 && !移動決定
		CONTINUE
	ELSEIF 移動決定
		CALL 角色移動処理２(ARG, 移動先, N_ID)
		RETURN
	ELSE
		TCVAR:ARG:なるべく動かない = 0
		RETURN
	ENDIF
WEND

;-----------------------------------------------------------
;移動が決定したあとの処理
;ARG     移動する角色
;移動先  移動する地点ID
;N_ID    ARGの現在位置
;-----------------------------------------------------------
@角色移動処理２(ARG, 移動先, N_ID)
#DIM 移動先
#DIM N_ID
#DIM 移動メッセージ
#DIM ワンルーム人数カウント
#DIM SKIP
移動メッセージ = 0
SKIP = 0
SETCOLOR C_YELLOW
IF CAN_SEE(ARG) && !CFLAG:MASTER:睡眠
	IF N_ID == MAXROOM
		PRINTFORML %NAME_OUTPUT_TRANSLATION("CALLNAME", ARG)%来到了【%NAME_FROM_PLACE(移動先)%】
	ELSE
		PRINTFORML %NAME_OUTPUT_TRANSLATION("CALLNAME", ARG)%從【%NAME_FROM_PLACE(N_ID)%】往【%NAME_FROM_PLACE(移動先)%】移動了
	ENDIF
	移動メッセージ = 1
ENDIF
;ワンルーム処理
IF ROOMDATA:(N_ID % 100) & 場所_ワンルーム
	;ワンルーム家主が外出する場合、相性が良くない角色は一緒に外に出される
	IF N_ID == CFLAG:ARG:初期位置
		ワンルーム人数カウント = 0
		FOR LOCAL, 1, CHARANUM
			IF CFLAG:LOCAL:現在位置 == N_ID && LOCAL != ARG
				;別の同居している角色がまだいる場合は逐出が発生しない
				IF CFLAG:LOCAL:現在位置 == CFLAG:LOCAL:初期位置
					SKIP = 1
					BREAK
				;相性の良い角色は居ても良い
				ELSEIF RELATION:ARG:LOCAL <= 100
					ワンルーム人数カウント ++
					CFLAG:LOCAL:現在位置 = 移動先
					TCVAR:LOCAL:なるべく動かない = 1
				ENDIF
			ENDIF
		NEXT
		;你は恋慕ならオッケー,你＋相性のいい角色が留守番、他の角色が締め出しだと稍微地の文と齟齬があるのは仕様
		IF 移動メッセージ && !SKIP
			IF !TALENT:ARG:恋慕
				PRINTFORML %NAME_OUTPUT_TRANSLATION("CALLNAME", MASTER)%\@ ワンルーム人数カウント ? 他們 #  \@、在%NAME_OUTPUT_TRANSLATION("CALLNAME", ARG)%的催促下從【%NAME_FROM_PLACE(N_ID)%】往【%NAME_FROM_PLACE(移動先)%】移動了
				CFLAG:MASTER:現在位置 = 移動先
			ELSEIF ワンルーム人数カウント
				PRINTFORML 在%NAME_OUTPUT_TRANSLATION("CALLNAME", ARG)%的催促下、%NAME_OUTPUT_TRANSLATION("CALLNAME", MASTER)%以外的人從【%NAME_FROM_PLACE(N_ID)%】往【%NAME_FROM_PLACE(移動先)%】移動了
			ELSE
				PRINTFORML %NAME_OUTPUT_TRANSLATION("CALLNAME", ARG)%拜託%NAME_OUTPUT_TRANSLATION("CALLNAME", MASTER)%留下來看家
			ENDIF
		ENDIF
	ENDIF
ENDIF
RESETCOLOR
SIF 移動メッセージ
	WAIT
;移動処理
CFLAG:ARG:現在位置 = 移動先
TCVAR:ARG:なるべく動かない = 1

;--------------------------------------------------------
;角色(ARG)が地点(移動先)へ移動する確率／分
;留まり率は减少補正
;実数値は10倍したもの
;式中関数にしたかったが…
;--------------------------------------------------------
@角色移動率(ARG, 移動先, 留まり率)
#DIM 移動率
#DIM 留まり率
#DIM 移動先
#DIM N_ID
#DIM お風呂入りたい
#DIM 部屋主
;お風呂入りたい度を設定
IF TALENT:ARG:氷精
	お風呂入りたい = 2000
;お風呂が嫌いな角色(虎は泳げるけど)
ELSEIF GROUPMATCH(ARG, [[橙]], [[星]], [[正邪]], [[阿燐]], [[三花]])
	お風呂入りたい = 2000
ELSEIF TALENT:ARG:汚臭耐性 == -2
	お風呂入りたい = 600
ELSEIF TALENT:ARG:汚臭耐性 == -1
	お風呂入りたい = 800
ELSEIF TALENT:ARG:汚臭耐性 == 0
	お風呂入りたい = 1000
ELSEIF TALENT:ARG:汚臭耐性 == 1
	お風呂入りたい = 1500
ELSEIF TALENT:ARG:汚臭耐性 == 2
	お風呂入りたい = 2000
ENDIF

N_ID = CFLAG:ARG:現在位置
;基本移動率,1.5% / 分 = 45.0% / 30分
移動率 = 15 + CFLAG:ARG:移動率補正
;你が見えていたら態度でUP
SIF CFLAG:MASTER:現在位置 == 移動先 && CAN_MOVE(N_ID, 移動先) == 3
	移動率 += CFLAG:ARG:態度 * 2
;掃除係は掃除中汚れに影響される
SIF TALENT:ARG:掃除係 && CFLAG:ARG:神社在住 && BETWEENTIME(720, 1080)
	移動率 += YOGORE:移動先 / 300
;角色ごとの移動率設定
;addition custom code, for custom charadata movement
CALL KOJO_CHECK(ARG, "CHARADATA", "MOVE", 4, 移動先)
IF RESULT == -1 ;等于-1时,表明口上侧需要是结果为0
	RESULT = 0
	CALLFORM CHARAMOVE_DATA_{NO:ARG}(4, 移動先)
ELSEIF RESULT ;等于其他正值时，表明口上侧有自己的值
ELSE 
	;addition custom code, duplicated characters
	CALLFORM CHARAMOVE_DATA_{NO:ARG}(4, 移動先)
ENDIF 
移動率 = 移動率 + RESULT

;お風呂に入りたい時は入りに行く
IF BATHCHECK(移動先) & 場所_風呂
	IF CFLAG:ARG:風呂 >= お風呂入りたい
		移動率 = 移動率 * 10
	ELSE
		移動率 = 0
	ENDIF
ENDIF
;引きこもり対策として、天候ダメージがない状況で屋内にいる場合屋外へ行きたがるように
SIF INROOM(N_ID) && !INROOM(移動先) && 天候造成的影響(ARG, 移動先) >= 0 
	移動率 += 15

;－－－－－－－－－－－－－－－
;移動節度によって行かない場所を設定
;MAP住人のプライベート箇所は個別に設定してください
 ;0以上 =プライベートな場所には入らない
;     1 =倉庫や小胡同、地下室等の過疎地点には移動しない
;    -1 =プライベートな場所でもあまり気にせず移動する
;    -2 =ありとあらゆるところに移動する
;－－－－－－－－－－－－－－－
部屋主 = PRIVATEROOM:(移動先 % 100)
IF 移動先 != CFLAG:ARG:初期位置 && N_ID != MAXROOM
	IF CFLAG:ARG:移動節度 >= 1
		SIF ROOMDATA:(移動先 % 100) & 場所_過疎
			移動率 = 0
	ENDIF
	IF CFLAG:ARG:移動節度 >= 0 && !CFLAG:ARG:神社在住
		SIF ROOMDATA:(移動先 % 100) & 場所_プライベート && RELATION:部屋主:ARG <= 100
			移動率 = 0
	ENDIF
	IF CFLAG:ARG:移動節度 >= -1
		SIF 寝てる子がいる(移動先)
			移動率 = 移動率 * 1 / 3
		SIF ROOMDATA:(移動先 % 100) & 場所_プライベート && !CFLAG:ARG:神社在住 && RELATION:部屋主:ARG <= 100
			移動率 = 移動率 * 2 / 3
		SIF 天候造成的影響(ARG, 移動先) <= -1
			移動率 = 移動率 * 1 / 3
		SIF ROOMDATA:(移動先 % 100) & 場所_過疎
			移動率 = 移動率 * 1 / 3
	ENDIF
ENDIF
;留まり率を差し引く
移動率 = MAX(移動率 - 留まり率, 0)
RETURN 移動率

@寝てる子がいる(ARG)
#FUNCTION
FOR LOCAL, 1, CHARANUM
	SIF CFLAG:LOCAL:現在位置 == ARG && CFLAG:LOCAL:睡眠
		RETURNF 1
NEXT

;ARG  判定角色
@引力点発動可(ARG)
#FUNCTION
;引力点が無い
SIF !TCVAR:ARG:引力点
	RETURNF 0
;現在位置と同じ
SIF CFLAG:ARG:現在位置 == TCVAR:ARG:引力点
	RETURNF 0
;引力点が拠点の外
SIF IN_HOME(TCVAR:ARG:引力点) != 1
	RETURNF 0
;現在位置が拠点の外
SIF IN_HOME(CFLAG:ARG:現在位置) != 1
	RETURNF 0
;天候ダメージが痛い
SIF 天候造成的影響(ARG, TCVAR:ARG:引力点) < 0
	RETURNF 0
RETURNF 1
