@SET_BODYSIZE(対象, セット位置 = 0)
#DIM 対象
#DIM セット位置

SIF GETBIT(セット位置, 0) || セット位置 == 0
	CALL SET_BODYSIZE_HEIGHT(対象)

SIF GETBIT(セット位置, 1) || セット位置 == 0
	CALL SET_BODYSIZE_BUST(対象)

SIF GETBIT(セット位置, 2) || セット位置 == 0
	CALL SET_BODYSIZE_WAIST(対象)

SIF GETBIT(セット位置, 3) || セット位置 == 0
	CALL SET_BODYSIZE_HIP(対象)


;-------------------------
;身長の設定
;-------------------------
@INIT_BODYSIZE_HEIGHT(対象)
#DIM 対象
;CSVに依存しない再設定関数

IF !BASE:対象:身長
	;身長がない場合は体格を元に身長を算出
	CALL SET_BODYSIZE_HEIGHT(対象)
ELSEIF !TALENT:対象:体格
	;身長があり体格が無い場合再設定
	SELECTCASE BASE:対象:身長
		CASE IS < 1000
			TALENT:対象:体格 = 体格_ハーヴィン並
		CASE IS < 1300 + IS_MALE(対象)*100
			TALENT:対象:体格 = 体格_子供
		CASE IS < 1500 + IS_MALE(対象)*100
			TALENT:対象:体格 = 体格_小柄
		CASE IS < 1700 + IS_MALE(対象)*100
			TALENT:対象:体格 = 体格_普通
		CASE IS < 1900 + IS_MALE(対象)*100
			TALENT:対象:体格 = 体格_長身
		CASEELSE
			TALENT:対象:体格 = 体格_男ドラフ並
	ENDSELECT
ENDIF

@SET_BODYSIZE_HEIGHT(対象)
#DIM 対象
#DIM 身長基礎値

MAXBASE:対象:身長 = CALC_BODYSIZE_HEIGHT(対象)
BASE:対象:身長 = MAXBASE:対象:身長


@CALC_BODYSIZE_HEIGHT(対象)
#FUNCTION
#DIM 対象
#DIM 基礎値

;今のところ子供は未実装なのでコメントアウト
;IF CFLAG:対象:行動不能状態 == 行動不能_子供
;	基礎値 = MIN(500 + CFLAG:対象:子の成長度 * 20, 1300)
;ELSEIF TALENT:対象:幼児
;	基礎値 = MIN(800 + (CFLAG:対象:子の成長度 - 6) * 50, 1300)
;ELSE
	SELECTCASE TALENT:対象:体格
		CASE 体格_ハーヴィン並
			基礎値 = IS_MALE(対象) ? RAND(800, 1000) # RAND(700, 1000)
		CASE 体格_子供
			IF TALENT:対象:種族 == 種族_ハーヴィン
				基礎値 = IS_MALE(対象) ? RAND(1000, 1400) # RAND(1000, 1300)
			ELSE
				基礎値 = IS_MALE(対象) ? RAND(1200, 1400) # RAND(1100, 1300)
			ENDIF
		CASE 体格_小柄
			IF TALENT:対象:種族 == 種族_ドラフ && IS_FEMALE(対象) && RAND:4
				基礎値 = RAND(1300, 1400)
			ELSE
				基礎値 = IS_MALE(対象) ? RAND(1400, 1600) # RAND(1300, 1500)
			ENDIF
		CASE 体格_普通
			基礎値 = IS_MALE(対象) ? RAND(1600, 1800) # RAND(1500, 1700)
		CASE 体格_長身
			基礎値 = IS_MALE(対象) ? RAND(1800, 2150) # RAND(1700, 2000)
		CASE 体格_男ドラフ並
			基礎値 = IS_MALE(対象) ? RAND(2150, 2450) # RAND(2000, 2200)
	ENDSELECT
;ENDIF

RETURNF 基礎値

;-------------------------
;バストサイズの設定
;-------------------------
@INIT_BODYSIZE_BUST(対象)
#DIM 対象
#DIM 計算値
;CSVに依存しない再設定関数
;先にHEIGHTとウエストを呼んでるはずなので身長・体格・体型・ウエストは存在するはず

IF !BASE:対象:バスト
	;既存データを元にバストを算出
	CALL SET_BODYSIZE_BUST(対象)
ELSEIF !TALENT:対象:バストサイズ
	;バストがありバストサイズ素質がない場合再設定
	計算値 = BASE:対象:バスト

	;ドラフ補正
	SIF TALENT:対象:種族 == 種族_ドラフ && IS_FEMALE(対象)
		TIMES 計算値, 0.89

	;体型補正
	SELECTCASE TALENT:対象:体型
		CASE 体型_痩せすぎ
			SIF TALENT:対象:種族 != 種族_ドラフ || !HAS_VAGINA(対象)
				TIMES 計算値, 1.11
		CASE 体型_細身
			SIF TALENT:対象:種族 != 種族_ドラフ || !HAS_VAGINA(対象)
				TIMES 計算値, 1.06
		CASE 体型_スレンダー
			SIF TALENT:対象:種族 != 種族_ドラフ || !HAS_VAGINA(対象)
				TIMES 計算値, 1.03
		CASE 体型_グラマー
			TIMES 計算値, 0.97
		CASE 体型_豊満
			TIMES 計算値, 0.96
		CASE 体型_肥満
			TIMES 計算値, 0.95
	ENDSELECT

	;体格補正
	SELECTCASE TALENT:対象:体格
		CASE 体格_ハーヴィン並
			TIMES 計算値, 0.83
		CASE 体格_子供
			IF TALENT:対象:種族 != 種族_ドラフ || !HAS_VAGINA(対象)
				TIMES 計算値, 0.94
			ELSE
				TIMES 計算値, 0.93
			ENDIF
		CASE 体格_小柄
			IF TALENT:対象:種族 != 種族_ドラフ || !HAS_VAGINA(対象)
				TIMES 計算値, 0.98
			ELSE
				TIMES 計算値, 0.97
			ENDIF
		CASE 体格_普通
		CASE 体格_長身
		CASE 体格_男ドラフ並
			TIMES 計算値, 1.02
	ENDSELECT

	;身長補正
	計算値 = 計算値 * 10000 / BASE:対象:身長 / (!HAS_VAGINA(対象) ? 52 # 53)

	SELECTCASE 計算値
		CASE IS > 116
			TALENT:対象:バストサイズ = バストサイズ_魔乳
		CASE IS > 110
			TALENT:対象:バストサイズ = バストサイズ_爆乳
		CASE IS > 101
			TALENT:対象:バストサイズ = バストサイズ_巨乳
		CASE IS > 96
			TALENT:対象:バストサイズ = バストサイズ_並乳
		CASE IS > 90
			TALENT:対象:バストサイズ = バストサイズ_貧乳
		CASEELSE
			TALENT:対象:バストサイズ = バストサイズ_絶壁
	ENDSELECT
ENDIF

@SET_BODYSIZE_BUST(対象)
#DIM 対象
#DIM 補正値
#DIM 基礎値

基礎値 = CALC_BODYSIZE_BUST(対象)
;ハーヴィンかつ並乳なら補正
;SIF TALENT:対象:体格 == 体格_ハーヴィン並 && TALENT:対象:バストサイズ > -1
;	TIMES 基礎値, 1.15
;巨乳以上ならさらにドーン！非現実的にも程があるのでインパクト重視
;SIF TALENT:対象:体格 == 体格_ハーヴィン並 && TALENT:対象:バストサイズ > 1
;	TIMES 基礎値, 1.4
	
IF IS_MALE(対象)
	補正値 = 100
ELSE
	SELECTCASE TALENT:対象:バストサイズ
		CASE IS <= -3
			補正値 = 85
		CASE -2
			補正値 = 88
		CASE -1
			補正値 = 95
		CASE 0
			補正値 = 100
		CASE 1
			補正値 = 106
		CASE 2
			補正値 = 112
		CASE 3
			補正値 = 120
		CASEELSE
			補正値 = 90 + TALENT:対象:バストサイズ * 10
	ENDSELECT
ENDIF

基礎値 = 基礎値 * 補正値 / 100

;百分率だとバストサイズ結果が離散的になるのでダメ, メートル越えの人のこと考えると千分率でもダメ
;平均100
	基礎値 = 基礎値 * RAND(9700, 10301) / 10000

基礎値 = MAX(基礎値, CALC_BODYSIZE_UNDERBUST(対象) + 10)

BASE:対象:バスト = 基礎値
MAXBASE:対象:バスト = BASE:対象:バスト

@CALC_BODYSIZE_BUST(対象)
#FUNCTION
#DIM 対象
#DIM 基礎値

基礎値 = BASE:対象:身長 * (!HAS_VAGINA(対象) ? 52 # 53) / 100

SELECTCASE TALENT:対象:体格
	CASE 体格_ハーヴィン並
		TIMES 基礎値, 1.2
	CASE 体格_子供
		IF TALENT:対象:種族 != 種族_ドラフ || !HAS_VAGINA(対象)
			TIMES 基礎値, 1.06
		ELSE
			TIMES 基礎値, 1.07
		ENDIF
	CASE 体格_小柄
		IF TALENT:対象:種族 != 種族_ドラフ || !HAS_VAGINA(対象)
			TIMES 基礎値, 1.02
		ELSE
			TIMES 基礎値, 1.03
		ENDIF
	CASE 体格_普通
	CASE 体格_長身
	CASE 体格_男ドラフ並
		TIMES 基礎値, 0.98
ENDSELECT

SELECTCASE TALENT:対象:体型
	CASE 体型_痩せすぎ
		SIF TALENT:対象:種族 != 種族_ドラフ || !HAS_VAGINA(対象)
			TIMES 基礎値, 0.90
	CASE 体型_細身
		SIF TALENT:対象:種族 != 種族_ドラフ || !HAS_VAGINA(対象)
			TIMES 基礎値, 0.94
	CASE 体型_スレンダー
		SIF TALENT:対象:種族 != 種族_ドラフ || !HAS_VAGINA(対象)
			TIMES 基礎値, 0.97
	CASE 体型_グラマー
		TIMES 基礎値, 1.03
	CASE 体型_豊満
		TIMES 基礎値, 1.04
	CASE 体型_肥満
		TIMES 基礎値, 1.05
ENDSELECT

;ドラフのおっぱいにはロマンが詰まってるので補正
SIF TALENT:対象:種族 == 種族_ドラフ && IS_FEMALE(対象)
	TIMES 基礎値, 1.12

RETURNF 基礎値

;-------------------------
;アンダーバストの算出
;-------------------------
@CALC_BODYSIZE_UNDERBUST(対象)
#FUNCTION
#DIM 対象
#DIM 基礎値
基礎値 = BASE:対象:身長 * (!HAS_VAGINA(対象) ? 50 # 43) / 100

SELECTCASE TALENT:対象:体格
	CASE 体格_ハーヴィン並
		TIMES 基礎値, 1.2
	CASE 体格_子供
		TIMES 基礎値, 1.06
	CASE 体格_小柄
		IF TALENT:対象:種族 != 種族_ドラフ
			TIMES 基礎値, 1.01
		ELSE
			TIMES 基礎値, 1.02
		ENDIF
	CASE 体格_普通
	CASE 体格_長身
		TIMES 基礎値, 0.99
	CASE 体格_男ドラフ並
		TIMES 基礎値, 0.98
ENDSELECT

SELECTCASE TALENT:対象:体型
	CASE 体型_痩せすぎ
		TIMES 基礎値, 0.90
	CASE 体型_細身
		TIMES 基礎値, 0.94
	CASE 体型_スレンダー
		TIMES 基礎値, 0.97
	CASE 体型_グラマー
		TIMES 基礎値, 1.01
	CASE 体型_豊満
		TIMES 基礎値, 1.05
	CASE 体型_肥満
		TIMES 基礎値, 1.10
ENDSELECT

;夢詰め込んだらドラフカップが大きくなりすぎるので補正
SIF TALENT:対象:種族 == 種族_ドラフ && HAS_VAGINA(対象)
	基礎値 = 基礎値 * 108 / 100

RETURNF 基礎値

;-------------------------
;ウエストの設定
;-------------------------
@INIT_BODYSIZE_WAIST(対象)
#DIM 対象
#DIM 計算値
;CSVに依存しない再設定関数
;先にHEIGHTを呼んでるはずなので身長と体格は存在するはず

IF !BASE:対象:ウエスト
	;ウエストがない場合は身長・体格・体型を元にウエストを算出
	CALL SET_BODYSIZE_WAIST(対象)
ELSEIF !TALENT:対象:体型
	;ウエストがあり体型素質がない場合再設定
	計算値 = BASE:対象:ウエスト

	SELECTCASE TALENT:対象:体格
		CASE 体格_ハーヴィン並
			TIMES 計算値, 0.82
		CASE 体格_子供
			TIMES 計算値, 0.93
		CASE 体格_小柄
			TIMES 計算値, 0.97
		CASE 体格_普通
		CASE 体格_長身
			TIMES 計算値, 1.02
		CASE 体格_男ドラフ並
			TIMES 計算値, 1.03
	ENDSELECT

	計算値 = 計算値 * 10000 / (!HAS_VAGINA(対象) ? 43 # 38) / BASE:対象:身長

	SELECTCASE 計算値
		CASE IS > 110
			TALENT:対象:体型 = 体型_肥満
		CASE IS > 105
			TALENT:対象:体型 = 体型_豊満
		CASE IS > 100
			TALENT:対象:体型 = 体型_グラマー
		CASE IS > 95
			TALENT:対象:体型 = 体型_普通
		CASE IS > 90
			TALENT:対象:体型 = 体型_スレンダー
		CASE IS > 85
			TALENT:対象:体型 = 体型_細身
		CASEELSE
			TALENT:対象:体型 = 体型_痩せすぎ
	ENDSELECT
ENDIF

@SET_BODYSIZE_WAIST(対象)
#DIM 対象
#DIM ウエスト基礎値

MAXBASE:対象:ウエスト = CALC_BODYSIZE_WAIST(対象)
BASE:対象:ウエスト = MAXBASE:対象:ウエスト


@CALC_BODYSIZE_WAIST(対象)
#FUNCTION
#DIM 対象
#DIM 基礎値

基礎値 = BASE:対象:身長 * (!HAS_VAGINA(対象) ? 43 # 38) / 100

SELECTCASE TALENT:対象:体格
	CASE 体格_ハーヴィン並
		TIMES 基礎値, 1.22
	CASE 体格_子供
		TIMES 基礎値, 1.07
	CASE 体格_小柄
		TIMES 基礎値, 1.03
	CASE 体格_普通
	CASE 体格_長身
		TIMES 基礎値, 0.98
	CASE 体格_男ドラフ並
		TIMES 基礎値, 0.97
ENDSELECT

SELECTCASE TALENT:対象:体型
	CASE 体型_痩せすぎ
		TIMES 基礎値, 0.85
	CASE 体型_細身
		TIMES 基礎値, 0.9
	CASE 体型_スレンダー
		TIMES 基礎値, 0.95
	CASE 体型_グラマー
		TIMES 基礎値, 1.02
	CASE 体型_豊満
		TIMES 基礎値, 1.06
	CASE 体型_肥満
		TIMES 基礎値, 1.10
ENDSELECT

基礎値 = 基礎値 * RAND(9700, 10301) / 10000

RETURNF 基礎値

;-------------------------
;ヒップの設定
;-------------------------
@INIT_BODYSIZE_HIP(対象)
#DIM 対象
#DIM 計算値
;CSVに依存しない再設定関数
;先にHEIGHTとウエストを呼んでるはずなので身長・体格・体型・ウエストは存在するはず

IF !BASE:対象:ヒップ
	;ヒップがない場合はそのまま再設定する
	CALL SET_BODYSIZE_HIP(対象)
ELSEIF !TALENT:対象:下半身
	;ヒップがあり下半身素質がない場合再設定
	計算値 = BASE:対象:ヒップ

	;体型補正
	SELECTCASE TALENT:対象:体型
		CASE 体型_痩せすぎ
			TIMES 計算値, 1.08
		CASE 体型_細身
			TIMES 計算値, 1.05
		CASE 体型_スレンダー
			TIMES 計算値, 1.02
		CASE 体型_グラマー
			TIMES 計算値, 0.96
		CASE 体型_豊満
			TIMES 計算値, 0.92
		CASE 体型_肥満
			TIMES 計算値, 0.89
	ENDSELECT

	;体格補正
	SELECTCASE TALENT:対象:体格
		CASE 体格_ハーヴィン並
			TIMES 計算値, 0.83
		CASE 体格_子供
			TIMES 計算値, 0.95
		CASE 体格_小柄
			TIMES 計算値, 0.98
		CASE 体格_普通
		CASE 体格_長身
			TIMES 計算値, 1.01
		CASE 体格_男ドラフ並
			TIMES 計算値, 1.02
	ENDSELECT

	;身長補正
	計算値 = 計算値 * 10000 / BASE:対象:身長 / (!HAS_VAGINA(対象) ? 47 # 54)
	SELECTCASE 計算値
		CASE IS > 103
			TALENT:対象:下半身 = 下半身_安産型
		CASE IS > 95
			TALENT:対象:下半身 = 下半身_普通
		CASE IS > 90
			IF IS_MALE(対象)
				TALENT:対象:下半身 = 下半身_逆三角形
			ELSE
				TALENT:対象:下半身 = 下半身_普通
			ENDIF
		CASEELSE
			TALENT:対象:下半身 = 下半身_逆三角形
	ENDSELECT
ENDIF

@SET_BODYSIZE_HIP(対象)
#DIM 対象
#DIM ヒップ基礎値

MAXBASE:対象:ヒップ = CALC_BODYSIZE_HIP(対象)
BASE:対象:ヒップ = MAXBASE:対象:ヒップ


@CALC_BODYSIZE_HIP(対象)
#FUNCTION
#DIM 対象
#DIM 基礎値
#DIM 補正値

基礎値 = BASE:対象:身長 * (!HAS_VAGINA(対象) ? 47 # 54) / 100

SELECTCASE TALENT:対象:体格
	CASE 体格_ハーヴィン並
		TIMES 基礎値, 1.2
	CASE 体格_子供
		TIMES 基礎値, 1.05
	CASE 体格_小柄
		TIMES 基礎値, 1.02
	CASE 体格_普通
	CASE 体格_長身
		TIMES 基礎値, 0.99
	CASE 体格_男ドラフ並
		TIMES 基礎値, 0.98
ENDSELECT

SELECTCASE TALENT:対象:体型
	CASE 体型_痩せすぎ
		TIMES 基礎値, 0.92
	CASE 体型_細身
		TIMES 基礎値, 0.95
	CASE 体型_スレンダー
		TIMES 基礎値, 0.98
	CASE 体型_グラマー
		TIMES 基礎値, 1.04
	CASE 体型_豊満
		TIMES 基礎値, 1.08
	CASE 体型_肥満
		TIMES 基礎値, 1.12
ENDSELECT

SELECTCASE TALENT:対象:下半身
	CASE -1
		IF IS_MALE(対象)
			補正値 = 97
		ELSE
			補正値 = 93
		ENDIF
	CASE 0
		補正値 = 100
	CASE 1
		補正値 = 108
ENDSELECT

基礎値 = 基礎値 * 補正値 / 100

基礎値 = 基礎値 * RAND(9600, 10401) / 10000

RETURNF 基礎値

;-------------------------
;スリーサイズその他の表示
;-------------------------
@SHOW_BODYSIZE(対象)
#FUNCTIONS
#DIM 対象
LOCALS = 身長:%DECIMAL_STRING(BASE:対象:身長, 1), 6, RIGHT%cm/   B:%DECIMAL_STRING(BASE:対象:バスト, 1), 6, RIGHT%cm %GET_CUPSIZE(対象)%

RETURNF LOCALS

;バストのカップサイズ生成及び表示処理
@PRINT_CUPSIZE(対象)
#DIM 対象
PRINTFORM %GET_CUPSIZE(対象)%

;バストのカップサイズ生成処理
;ARGに0を指定しない限り、TALENT:バストサイズの範囲に収まるように返す
;-2=絶壁(AAA～AA) -1=貧乳(A～B) 0=並乳(C～D) 1=巨乳(E～F) 2=爆乳(G～I) 3=魔乳(J↑)
@GET_CUPSIZE(対象, ARG=1)
#FUNCTIONS
#DIM 対象
#DIMS CONST 表記 = "(-)","(AAA)","(AA)","(A)","(B)","(C)","(D)","(E)","(F)","(G)","(H)","(I)","(J)","(K)","(L)","(M)","(N)","(O)","(P)","(Q)","(R)","(S)","(T)","(U)","(V)","(W)","(X)","(Y)","(Z)","(Z+) "
#DIM CONST 補正 = 1, 2, 4, 6, 8, 11, 29

LOCAL = (BASE:対象:バスト - CALC_BODYSIZE_UNDERBUST(対象) + 10) / 25 - 1

;文字列変数が若干不自由なので無理やり作成
LOCAL = MAX(LOCAL , 1)
;TALENTの表記に無理やり追従させる
SIF ARG && 補正:(TALENT:対象:バストサイズ + 3) < LOCAL
	LOCAL = 補正:(TALENT:対象:バストサイズ + 3)
SIF ARG && 補正:(TALENT:対象:バストサイズ + 2) + 1 > LOCAL
	LOCAL = 補正:(TALENT:対象:バストサイズ + 2) + 1

LOCAL = MIN(LOCAL, 29)
LOCALS:0 = %表記:(LOCAL)%

IF !HAS_VAGINA(対象)
	RETURNF "(--)"
ELSE
	RETURNF LOCALS:0
ENDIF

;-------------------------------------------------
;キャラ作成・初期化時にCSVの身長体重スリーサイズを反映するようにビットを建てる
;-------------------------------------------------
@SETBIT_PI(対象)
#FUNCTION
#DIM 対象
LOCAL = 0
SETBIT LOCAL, 0, 1, 2, 3, 4
SIF !EXISTCSV(NO:対象)
	RETURNF LOCAL

SIF BASE:対象:身長
	CLEARBIT LOCAL, 0

SIF BASE:対象:バスト
	CLEARBIT LOCAL, 1

SIF BASE:対象:ウエスト
	CLEARBIT LOCAL, 2

SIF BASE:対象:ヒップ
	CLEARBIT LOCAL, 3

RETURNF LOCAL

;-------------------------------------------------
;整数ARG:0の下からARG:1番目に小数点を打ち、その値を文字列として返す関数
;-------------------------------------------------
@DECIMAL_STRING(ARG:0, ARG:1)
#FUNCTIONS
IF ARG:1 <= 0
	THROW "@DECIMAL_STRINGの二番目の引数に0以下の値が指定されました({ARG:1})"
ENDIF

LOCAL:4 = ARG:0

LOCAL:2 = POWER(10, ARG:1)
LOCAL:3 = LOCAL:4 / LOCAL:2
LOCAL:4 = LOCAL:4 - LOCAL:3 * LOCAL:2
LOCALS:0 = {LOCAL:3}.

FOR LOCAL:0, ARG:1 - 1, 0, -1
	LOCAL:2 = POWER(10, LOCAL:0)
	LOCAL:3 = LOCAL:4 / LOCAL:2
	LOCAL:4 = LOCAL:4 - LOCAL:3 * LOCAL:2
	LOCALS:0 = %LOCALS:0%{LOCAL:3}
NEXT
LOCALS:0 = %LOCALS:0%{LOCAL:4}
RETURNF LOCALS:0

;-------------------------------------------------
;キャラの身長・バスト・体型・体格をCSVと種族・性別を元に算出する関数
;ゲーム中に変動した場合を想定していないので、初期設定以外では呼び出さないこと
;23/12/11 初期化に便利そうだったので種族変更時に呼び出しました
;-------------------------------------------------
@INIT_BODYSIZE(ARG)

;性別・種族が変動してない場合、CSVの身長を読みに行く
IF GETBIT(CSVTALENT(NO:ARG, GETNUM(TALENT, "性別")), 0) == GETBIT(TALENT:ARG:性別, 0) && CSVTALENT(NO:ARG, GETNUM(TALENT, "種族")) == TALENT:ARG:種族
	IF CFLAG:ARG:身長初期値 && !BASE:ARG:身長
		BASE:ARG:身長 = CFLAG:ARG:身長初期値
		MAXBASE:ARG:身長 = BASE:ARG:身長
	ENDIF

	IF CFLAG:ARG:バスト初期値 && !BASE:ARG:バスト
		BASE:ARG:バスト = CFLAG:ARG:バスト初期値
		MAXBASE:ARG:バスト = BASE:ARG:バスト
	ENDIF

	IF CFLAG:ARG:ウエスト初期値 && !BASE:ARG:ウエスト
		BASE:ARG:ウエスト = CFLAG:ARG:ウエスト初期値
		MAXBASE:ARG:ウエスト = BASE:ARG:ウエスト
	ENDIF

	IF CFLAG:ARG:ヒップ初期値 && !BASE:ARG:ヒップ
		BASE:ARG:ヒップ = CFLAG:ARG:ヒップ初期値
		MAXBASE:ARG:ヒップ = BASE:ARG:ヒップ
	ENDIF
ENDIF

CALL INIT_BODYTALENT(ARG)

;身長、バスト数値を決める
LOCAL = SETBIT_PI(ARG)
CALL SET_BODYSIZE(ARG, SETBIT_PI(ARG))



@INIT_BODYTALENT(ARG)

SIF CSVTALENT(NO:ARG, GETNUM(TALENT, "体格")) && TALENT:ARG:体格 != CSVTALENT(NO:ARG, GETNUM(TALENT, "体格"))
	TALENT:ARG:体格 = CSVTALENT(NO:ARG, GETNUM(TALENT, "体格"))

SIF CSVTALENT(NO:ARG, GETNUM(TALENT, "体型")) && TALENT:ARG:体型 != CSVTALENT(NO:ARG, GETNUM(TALENT, "体型"))
	TALENT:ARG:体型 = CSVTALENT(NO:ARG, GETNUM(TALENT, "体型"))

;CSVに体型、体格の記述が無い場合は身長と種族と性別をもとに算出する
IF !CSVTALENT(NO:ARG, GETNUM(TALENT, "体格"))
	;身長が存在する場合、そこから算出
	IF CSVBASE(NO:ARG, GETNUM(BASE, "身長"))
		SELECTCASE CSVBASE(NO:ARG, GETNUM(BASE, "身長"))
			CASE IS < 1000
				TALENT:ARG:体格 = 体格_ハーヴィン並
			CASE IS < 1300 + IS_MALE(ARG)*100
				TALENT:ARG:体格 = 体格_子供
			CASE IS < 1500 + IS_MALE(ARG)*100
				TALENT:ARG:体格 = 体格_小柄
			CASE IS < 1700 + IS_MALE(ARG)*100
				TALENT:ARG:体格 = 体格_普通
			CASE IS < 1900 + IS_MALE(ARG)*100
				TALENT:ARG:体格 = 体格_長身
			CASEELSE
				TALENT:ARG:体格 = 体格_男ドラフ並
		ENDSELECT
	;ハーヴィンはハーヴィン並
	ELSEIF TALENT:ARG:種族 == 種族_ハーヴィン
		TALENT:ARG:体格 = 体格_ハーヴィン並
	ELSEIF TALENT:ARG:種族 == 種族_ドラフ
		;男性ドラフは男ドラフ並
		IF IS_MALE(ARG)
			TALENT:ARG:体格 = 体格_男ドラフ並
		;女性ドラフは小柄
		ELSE
			TALENT:ARG:体格 = 体格_小柄
		ENDIF
	ELSE
		;どこにも引っかからない場合、男は長身、女は普通に
		IF IS_MALE(ARG)
			TALENT:ARG:体格 = 体格_長身
		ELSE
			TALENT:ARG:体格 = 体格_普通
		ENDIF
	ENDIF
ENDIF

IF !CSVTALENT(NO:ARG, GETNUM(TALENT, "体型"))
	;男性ドラフはグラマー（肉感的）
	SIF TALENT:ARG:種族 == 種族_ドラフ
		TALENT:ARG:体型 = 体型_グラマー
ENDIF
;----------------------------------------------
;キャラのバストの数値から素質;バストサイズを設定し直す関数
;BASE:バストを直接変動させたときにこの関数を使う
;判定はそのキャラの身長、体型から求まる標準体型と比較してどれだけ巨乳かを表す数値、巨乳指数で行う
;ここで使う関係で本来CALC_BODYSIZE_BUST内で行っていた計算を一部SET_BODYSIZE_BUSTへ移動させました
;----------------------------------------------
@RESET_BUSTSIZE(対象)
#DIM 対象
#DIM 巨乳指数
#DIM 測定前サイズ

測定前サイズ = TALENT:対象:バストサイズ
巨乳指数 = BASE:対象:バスト * 100 / CALC_BODYSIZE_BUST(対象)

SELECTCASE 巨乳指数
	CASE IS < 90
		TALENT:対象:バストサイズ = バストサイズ_絶壁
	CASE IS < 98
		TALENT:対象:バストサイズ = バストサイズ_貧乳
	CASE IS < 104
		TALENT:対象:バストサイズ = バストサイズ_並乳
	CASE IS < 110
		TALENT:対象:バストサイズ = バストサイズ_巨乳
	CASE IS < 116
		TALENT:対象:バストサイズ = バストサイズ_爆乳
	CASEELSE
		TALENT:対象:バストサイズ = バストサイズ_魔乳
ENDSELECT

;----------------------------------------------
;キャラの身長関数
;BASE:バストを直接変動させたときにこの関数を使う
;判定はそのキャラの身長、体型から求まる標準体型と比較してどれだけ巨乳かを表す数値、巨乳指数で行う
;ここで使う関係で本来CALC_BODYSIZE_BUST内で行っていた計算を一部SET_BODYSIZE_BUSTへ移動させました
;----------------------------------------------
@RESET_HEIGHTSIZE(対象)
#DIM 対象
