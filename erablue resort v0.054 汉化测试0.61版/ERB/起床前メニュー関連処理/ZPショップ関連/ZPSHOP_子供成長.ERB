@ZP_SHOP_子供成長
#DIM ページ
#DIM 子供人物番号

LOCAL:1 = 0
FOR LOCAL, 住宅街広さ(), VARSIZE("定住者部屋割り配列")
	IF 定住者部屋割り配列:LOCAL == ""
		LOCAL:1 = 1
		BREAK
	ENDIF
NEXT
IF LOCAL:1 == 0
	PRINTW 住宅区已满员。
	RETURN
ENDIF

ページ = 0
$INPUT_LOOP
PRINTL 
CALL 子供一覧表示(0, ページ, "成長可能")
INPUT
SELECTCASE RESULT
	CASE -1
		RETURN -1
	CASE -2
		ページ ++
		REUSELASTLINE 
		GOTO INPUT_LOOP
	CASE -3
		ページ --
		REUSELASTLINE 
		GOTO INPUT_LOOP
	CASE IS > 0
		子供人物番号 = RESULT
		REUSELASTLINE 
		SIF !保育所子供_チェック(0, 子供人物番号)
			GOTO INPUT_LOOP
		CALL 子供一覧表示_追加条件_成長可能(子供人物番号)
		SIF !RESULT
			GOTO INPUT_LOOP
		CALL ZP_子供成長(子供人物番号)
		SIF RESULT == -1
			GOTO INPUT_LOOP
	CASEELSE
		GOTO INPUT_LOOP
ENDSELECT

RETURN

@子供一覧表示_追加条件_成長可能(子供人物番号)
#DIM 子供人物番号
#DIM MOTHER

MOTHER = FIND_MOTHER_CHARA_FROM_PERSON_ID(子供人物番号)
SIF MOTHER < 0
	RETURN 0
RETURN 1


@ZP_子供成長(子供人物番号)
#DIM 子供人物番号
#DIM CONST COST_BASE = 450
#DIM CONST COST_PER_AGE = 50
#DIM 必要COST
#DIM 成長後年齢層

DRAWLINE
PRINTFORML 消耗ZP可使%GET_PERSON_呼び名(子供人物番号)%成长。
PRINTL 要成长至哪个阶段？
DRAWLINE
FOR LOCAL, 年齢層_幼い, 年齢層_壮年
	PRINTBUTTON @"[{LOCAL, 2}]%GET_TALENTNAME(164, LOCAL, 0)%", LOCAL
	PRINTFORML 　　　需要ZP:{COST_BASE + COST_PER_AGE * (LOCAL - 年齢層_乳幼児)}
NEXT
PRINTBUTTON "[999]返回", 999
PRINTL

BINPUT
SIF RESULT == 999
	RETURN -1

成長後年齢層 = RESULT
必要COST = COST_BASE + COST_PER_AGE * (成長後年齢層 - 年齢層_乳幼児)

IF FLAG:ZP所持量 < 必要COST
	PRINTW ZP不足
	RESTART
ENDIF
PRINTFORML 是否支付{必要COST}ZP使%GET_PERSON_呼び名(子供人物番号)%成长？
PRINTFORML （持有ZP：{FLAG:ZP所持量}）
PRINTBUTTONLC "[0]确定", 0
PRINTBUTTONLC "[1]取消", 1
BINPUT
SIF RESULT == 1
	RESTART

FLAG:ZP所持量 -= 必要COST
SELECTCASE 成長後年齢層
	CASE 年齢層_幼い
		PRINTFORML 虽然还很稚嫩，但%GET_PERSON_呼び名(子供人物番号)%稍微成长了些！
	CASE 年齢層_若い
		PRINTFORML %GET_PERSON_呼び名(子供人物番号)%已成长为可称为\@ (GET_PERSON_性別(子供人物番号) == 2) ? 少年 # 少女 \@的年纪！
	CASE 年齢層_成人
		PRINTFORML %GET_PERSON_呼び名(子供人物番号)%已成长到可称为年轻人的阶段了！
	CASE 年齢層_大人
		PRINTFORML %GET_PERSON_呼び名(子供人物番号)%已完全成长为成人模样！
ENDSELECT
CALL 子供成長処理(子供人物番号, 成長後年齢層)
IF RESULT
	PRINTFORML %GET_PERSON_呼び名(子供人物番号)%已从托儿所毕业，似乎搬进了%CALLNAME:RESULT%的同一房间。
ELSE
	PRINTFORML %GET_PERSON_呼び名(子供人物番号)%已从托儿所毕业，似乎搬到了居住区域的住宅区。
ENDIF
PRINTW 

RETURN 0


@子供成長処理(子供人物番号, 成長後年齢層)
#DIM 子供人物番号
#DIM 成長後年齢層
#DIM MOTHER
#DIM FATHER
#DIM DOMINANT
#DIM RECESSIVE
#DIM PARENT
#DIM TARGET保存
#DIM ベース種族
#DIM 素質選択用, 10
#DIM 部屋決定フラグ
#DIM 複数得意フラグ


MOTHER = FIND_MOTHER_CHARA_FROM_PERSON_ID(子供人物番号)
FATHER = FIND_FATHER_CHARA_FROM_PERSON_ID(子供人物番号)
;素質をよく引き継ぐ側の親を1/2ずつで選択(ただしあなたは優先度低)
IF FATHER < 0 || FATHER == MASTER || (MOTHER != MASTER && RAND:2 == 0)
	DOMINANT = MOTHER
	RECESSIVE = FATHER
ELSE
	DOMINANT = FATHER
	RECESSIVE = MOTHER
ENDIF

TARGET保存 = TARGET
TARGET = CHARANUM
ADDCHARA 999

;名前・呼び名・NO
NAME:TARGET '= GET_PERSON_名前(子供人物番号)
CALLNAME:TARGET '= GET_PERSON_呼び名(子供人物番号)
CALL SET_PERSON_ナンバー(子供人物番号, 999)

;戦闘関連設定
PARENT = 遺伝元(DOMINANT, RECESSIVE, "変異あり", "あなた除外")
基礎BATTLE_STATE:属性 = (PARENT >= 0) ? 基礎BATTLE_STATE:PARENT:属性 # RAND:6
PARENT = 遺伝元(DOMINANT, RECESSIVE, "変異あり", "あなた除外")
基礎BATTLE_STATE:得意武器 = (PARENT >= 0) ? 基礎BATTLE_STATE:PARENT:得意武器 # RAND:10
PARENT = 遺伝元(DOMINANT, RECESSIVE, "変異あり", "あなた除外")
基礎BATTLE_STATE:ステータスタイプ保存 = (PARENT >= 0) ? 基礎BATTLE_STATE:PARENT:ステータスタイプ保存 # RAND:8
SIF 基礎BATTLE_STATE:ステータスタイプ保存 < 0
	基礎BATTLE_STATE:ステータスタイプ保存 = RAND:8
CSTR:戦闘基礎ステータス設定 '= @" 属性_%属性数値文字列変換(基礎BATTLE_STATE:属性)% 得意武器_"

複数得意フラグ = 0
FOR LOCAL, 0, 10
	IF GETBIT(基礎BATTLE_STATE:得意武器, LOCAL)
		SIF 複数得意フラグ
			CSTR:戦闘基礎ステータス設定 += "・"
		CSTR:戦闘基礎ステータス設定 += @"%得意武器数値文字列変換(LOCAL)%"
		複数得意フラグ ++
	ENDIF
NEXT

CSTR:戦闘基礎ステータス設定 += @" 初期ステータスタイプ_%成長タイプ:(基礎BATTLE_STATE:ステータスタイプ保存)%"

;種族・特殊種族
TALENT:種族 = GET_PERSON_種族(子供人物番号)
ベース種族 = ベース種族検索(子供人物番号)
IF FATHER >= 0 && CSTR:MOTHER:特殊種族 == CSTR:FATHER:特殊種族
	CSTR:特殊種族 '= CSTR:MOTHER:特殊種族
ELSEIF FATHER == MASTER && あなた特殊能力:潜性の血
	CSTR:特殊種族 '= CSTR:MOTHER:特殊種族
ELSEIF MOTHER == MASTER && あなた特殊能力:潜性の血 && FATHER >= 0
	CSTR:特殊種族 '= CSTR:FATHER:特殊種族
;ELSEIF TALENT:種族 == 種族_その他 && (FATHER < 0 || TALENT:MOTHER:種族 != TALENT:FATHER:種族)
	;CSTR:特殊種族 '= "混血児"
ENDIF

;発情期あり
IF TALENT:種族 != 種族_その他
	PARENT = 遺伝元(DOMINANT, RECESSIVE, "両親のみ")
	IF PARENT >= 0
		TALENT:発情期あり = TALENT:PARENT:発情期あり
	ENDIF
ELSEIF キャラ一致チェック(MOTHER, "[六龙之『金』]伽莱翁") || (FATHER >= 0 && キャラ一致チェック(FATHER, "[六龙之『金』]伽莱翁"))
	TALENT:発情期あり = 0b0110111
ELSE
	TALENT:発情期あり = 0
	SELECTCASE ベース種族
		CASE 種族_エルーン
			TALENT:発情期あり |= 0b0010011
		CASE 種族_ドラフ
			TALENT:発情期あり |= 0b0100101
	ENDSELECT

	TALENT:発情期あり |= TALENT:MOTHER:発情期あり
	SELECTCASE ベース種族検索(CFLAG:MOTHER:人物番号)
		CASE 種族_エルーン
			TALENT:発情期あり |= 0b0010011
		CASE 種族_ドラフ
			TALENT:発情期あり |= 0b0100101
	ENDSELECT

	IF FATHER >= 0
		TALENT:発情期あり |= TALENT:FATHER:発情期あり
		SELECTCASE ベース種族検索(CFLAG:FATHER:人物番号)
			CASE 種族_エルーン
				TALENT:発情期あり |= 0b0010011
			CASE 種族_ドラフ
				TALENT:発情期あり |= 0b0100101
		ENDSELECT
	ENDIF
ENDIF

;性別
TALENT:性別 = GET_PERSON_性別(子供人物番号)

;処女・Ａ処女・童貞・性知識
TALENT:処女 = 1
TALENT:Ａ処女 = 1
TALENT:非童貞 = 0
CSTR:知識素質設定 '= " 性知識Lv-2 "

;年齢層・外見年齢
TALENT:年齢層 = 成長後年齢層
TALENT:外見年齢 = 0

;バストサイズ 母親優先
IF GETBIT(TALENT:性別, 0)
	PARENT = 遺伝元(MOTHER, FATHER, "両親のみ", "女性器あり")
	TALENT:バストサイズ = ランダムバストサイズ(ベース種族, 成長後年齢層)
	IF PARENT >= 0
		;因子により補正
		TALENT:バストサイズ = LIMIT(TALENT:バストサイズ + 因子取得_バストサイズ(PARENT), -2, 3)
	ENDIF
ENDIF

;男性器サイズ 父親優先
IF GETBIT(TALENT:性別, 1)
	PARENT = 遺伝元(FATHER, MOTHER, "両親のみ", "男性器あり")
	TALENT:男性器サイズ = ランダム男性器サイズ(ベース種族, TALENT:性別, 成長後年齢層)
	IF PARENT >= 0
		;因子により補正
		TALENT:男性器サイズ = LIMIT(TALENT:男性器サイズ + 因子取得_男性器サイズ(PARENT), -2, 2)
	ENDIF
ENDIF

;耳・尻尾
IF (FATHER == MASTER || MOTHER == MASTER) && あなた特殊能力:潜性の血
	;潜性のあなたの場合、常にもう片方の親と同じ身体的形質
	PARENT = DOMINANT
ELSE
	PARENT = 遺伝元(DOMINANT, RECESSIVE, "両親のみ")
ENDIF
IF PARENT >= 0
	TALENT:エルーン耳 = TALENT:PARENT:エルーン耳
	TALENT:ハーヴィン耳 = TALENT:PARENT:ハーヴィン耳
	TALENT:尻尾あり = TALENT:PARENT:尻尾あり
ENDIF

;角
IF (FATHER == MASTER || MOTHER == MASTER) && あなた特殊能力:潜性の血
	;潜性のあなたの場合、常にもう片方の親と同じ身体的形質
	PARENT = DOMINANT
ELSE
	PARENT = 遺伝元(DOMINANT, RECESSIVE, "両親のみ")
ENDIF
IF PARENT >= 0
	TALENT:角あり = TALENT:PARENT:角あり
ENDIF

;髪の毛なし 両親がともに[頭髪なし]の場合のみ
IF FATHER >= 0 && TALENT:FATHER:髪の毛なし == -1 && (TALENT:MOTHER:髪の毛なし == -1 || (MOTHER == MASTER && あなた特殊能力:潜性の血))
	TALENT:髪の毛なし = -1
ELSEIF TALENT:MOTHER:髪の毛なし == -1 && FATHER == MASTER && あなた特殊能力:潜性の血
	TALENT:髪の毛なし = -1
ENDIF

;容姿 両親の平均（乱数要素なし）
IF (FATHER == MASTER || MOTHER == MASTER) && あなた特殊能力:潜性の血
	;潜性のあなたの場合、常にもう片方の親と同じ身体的形質
	TALENT:容姿 = 親容姿(DOMINANT)
ELSE
	TALENT:容姿 = 親容姿(MOTHER)
	SIF FATHER >= 0
		TALENT:容姿 = LIMIT((TALENT:容姿 + 親容姿(FATHER) + 1) / 2, -1, 2)
ENDIF

;体格・体型 同性の親優先
IF TALENT:性別 != 2
	PARENT = 遺伝元(MOTHER, FATHER, "両親のみ")
ELSE
	PARENT = 遺伝元(FATHER, MOTHER, "両親のみ")
ENDIF
TALENT:体格 = ランダム体格(ベース種族, TALENT:性別, 成長後年齢層, TALENT:バストサイズ, 0)
IF PARENT >= 0
	;因子により補正
	TALENT:体格 = LIMIT(TALENT:体格 + 因子取得_体格(PARENT), -3, 2)
ENDIF
TALENT:体型 = ランダム体型(ベース種族)
IF PARENT >= 0
	;因子により補正
	TALENT:体型 = LIMIT(TALENT:体型 + 因子取得_体型(PARENT), -3, 3)
	IF TALENT:性別 == 2 && TALENT:PARENT:下半身 < 0
		;さらに逆三角形があれば遺伝(男の子のみ)
		TALENT:下半身 = TALENT:PARENT:下半身
	ELSEIF GETBIT(TALENT:性別, 0) && TALENT:PARENT:下半身 > 0
		;さらに安産型があれば遺伝(女の子のみ)
		TALENT:下半身 = TALENT:PARENT:下半身
	ENDIF
ENDIF

;素質
;まずは独自の素質6個～8個（うち2つは性格系の素質確定）
CALL ランダム素質選択(素質選択用)
FOR LOCAL, 0, 8
	SIF 素質選択用:LOCAL == 0
		BREAK
	TALENT:(ランダムキャラ素質番号(素質選択用:LOCAL)) = ランダムキャラ素質値(素質選択用:LOCAL)
NEXT

;親からの素質遺伝(上の素質が上書きされる可能性あり)
IF RECESSIVE >= 0
	CALL 素質遺伝(TARGET, RECESSIVE, 50)
ENDIF
CALL 素質遺伝(TARGET, DOMINANT, 50)

;素質が多くなりすぎないように削除
CALL 素質削減(TARGET, 12)

;敏感系
FOR LOCAL, 0, 5
	PARENT = 遺伝元(DOMINANT, RECESSIVE, "両親のみ")
	SIF PARENT >= 0
		TALENT:(LOCAL + 101) = TALENT:PARENT:(LOCAL + 101)
NEXT
FOR LOCAL, 0, 5
	SELECTCASE RAND:10
		CASE IS < 2
			;鈍感方向へ1
			TALENT:(LOCAL + 101) -= 1
		CASE IS < 7
		CASEELSE
			;敏感方向へ1
			TALENT:(LOCAL + 101) += 1
	ENDSELECT
	TALENT:(LOCAL + 101) = LIMIT(TALENT:(LOCAL + 101), -1, 1)
NEXT

;イキやすさ
PARENT = 遺伝元(DOMINANT, RECESSIVE, "両親のみ")
SIF PARENT >= 0
	TALENT:イキやすさ = TALENT:PARENT:イキやすさ

;陥没乳首・母乳体質・絶倫
IF TALENT:バストサイズ > 1 && 素質切り替えOPTION記憶:陥没乳首_なし == 0
	PARENT = 遺伝元(DOMINANT, RECESSIVE, "変異あり", "女性器あり")
	IF PARENT >= 0
		TALENT:陥没乳首 = TALENT:PARENT:陥没乳首
	ELSEIF RAND:10 == 0
		TALENT:陥没乳首 = 1
	ENDIF
ENDIF
IF TALENT:バストサイズ > 1 && 素質切り替えOPTION記憶:母乳体質_なし == 0
	PARENT = 遺伝元(DOMINANT, RECESSIVE, "変異あり", "女性器あり")
	IF PARENT >= 0
		TALENT:母乳体質 = (TALENT:PARENT:母乳体質 == 1) ? 1 # 0
	ELSEIF RAND:10 == 0
		TALENT:母乳体質 = 1
	ENDIF
ENDIF
IF GETBIT(TALENT:性別, 1)
	PARENT = 遺伝元(DOMINANT, RECESSIVE, "変異あり", "男性器あり")
	IF PARENT >= 0
		TALENT:絶倫 = TALENT:PARENT:絶倫
	ELSEIF RAND:3 == 0
		TALENT:絶倫 = 1
	ENDIF
ENDIF

;プレゼント好み
CSTR:プレゼント好み '= GET_PERSON_プレゼント好み(子供人物番号)
SIF TALENT:飲兵衛 > 0
	CSTR:プレゼント好み += "_酒"

CFLAG:人物番号 = 子供人物番号
CALL コマンド存在チェック
CALL キャラクター初期化(TARGET)
CALL 子供相性初期化(TARGET)

TALENT:定住者 = 1
CFLAG:滞在期間 = 999
CFLAG:招待不可フラグ = 0
IF TALENT:性別 == 2
ELSE
	CSTR:汎用立ち絵登録文字列 '= 汎用立ち絵取得処理(NAME:TARGET, ベース種族, TALENT:バストサイズ, TALENT:体格)
ENDIF
CALL ステータス記録(TARGET)

部屋決定フラグ = 0
IF 成長後年齢層 <= 年齢層_成人
	;幼い～成人なら親と一緒に暮らす
	IF MOTHER > 0 && TALENT:MOTHER:定住者
		部屋決定フラグ = MOTHER
	ELSEIF FATHER > 0 && TALENT:FATHER:定住者
		部屋決定フラグ = FATHER
	ENDIF
	IF 部屋決定フラグ
		IF TALENT:部屋決定フラグ:定住者 == 2
			IF 同棲部屋割り配列:0 < 1
				TALENT:TARGET:定住者 = 2
				同棲部屋割り配列:0 = TARGET
			ELSEIF 同棲部屋割り配列:1 < 1
				TALENT:TARGET:定住者 = 2
				同棲部屋割り配列:1 = TARGET
			ELSEIF 同棲部屋割り配列:2 < 1
				TALENT:TARGET:定住者 = 2
				同棲部屋割り配列:2 = TARGET
			ELSEIF 同棲部屋割り配列:3 < 1
				TALENT:TARGET:定住者 = 2
				同棲部屋割り配列:3 = TARGET
			ELSEIF 同棲部屋割り配列:4 < 1
				TALENT:TARGET:定住者 = 2
				同棲部屋割り配列:4 = TARGET
			ELSEIF 同棲部屋割り配列:5 < 1
				TALENT:TARGET:定住者 = 2
				同棲部屋割り配列:5 = TARGET
			ELSE
				部屋決定フラグ = 0
			ENDIF
		ELSE
			FOR LOCAL, 0, VARSIZE("定住者部屋割り配列")
				IF STRFIND(定住者部屋割り配列:LOCAL, @"_{部屋決定フラグ}_") > -1 || STRFIND(定住者部屋割り配列:LOCAL, @"{部屋決定フラグ}_") == 0
					定住者部屋割り配列:LOCAL += @"{TARGET}_"
					BREAK
				ENDIF
			NEXT
		ENDIF
	ENDIF
ENDIF

IF 部屋決定フラグ == 0
	FOR LOCAL, 住宅街広さ(), VARSIZE("定住者部屋割り配列")
		IF 定住者部屋割り配列:LOCAL == ""
			定住者部屋割り配列:LOCAL = {TARGET}_
			BREAK
		ENDIF
	NEXT
ENDIF

TARGET = TARGET保存
RETURN 部屋決定フラグ


@遺伝元(PARENT:0, PARENT:1, ランダム性 = "両親のみ", ARGS:0 = "", ARGS:1 = "")
#FUNCTION
#DIM PARENT, 2
#DIM 候補, 4
#DIM 性器要求
#DIM 性別限定
#DIM あなた除外
#DIMS ランダム性

VARSET 候補, -1

性器要求 = 0
性別限定 = 0
あなた除外 = 0
FOR LOCAL, 0, 2
	SELECTCASE ARGS:LOCAL
		CASE "女性器あり"
			性器要求 |= 1
		CASE "男性器あり"
			性器要求 |= 2

		CASE "女性のみ"
			性別限定 = 1
		CASE "男性のみ"
			性別限定 = 2

		CASE "あなた除外"
			あなた除外 = 1
	ENDSELECT
NEXT

FOR LOCAL, 0, 2
	SIF PARENT:LOCAL < 0
		CONTINUE

	SIF (TALENT:(PARENT:LOCAL):性別 & 性器要求) != 性器要求
		CONTINUE

	SIF 性別限定 == 1 && TALENT:(PARENT:LOCAL):性別 == 2
		CONTINUE
	SIF 性別限定 == 2 && TALENT:(PARENT:LOCAL):性別 != 2
		CONTINUE

	SIF あなた除外 && PARENT:LOCAL == MASTER
		CONTINUE

	SIF ランダム性 == "固定"
		RETURNF PARENT:LOCAL

	候補:LOCAL = PARENT:LOCAL
	候補:(LOCAL + 2) = PARENT:LOCAL
NEXT
IF 候補:2 != -1
	IF ランダム性 == "変異あり"
		候補:3 = -1
	ELSE
		候補:3 = 候補:2
	ENDIF
ENDIF

RETURNF 候補:(RAND:4)


@ベース種族検索(ID)
#FUNCTION
#DIM ID
#DIM ベース候補リスト, 31
#DIM ベース候補数
#DIM ベース候補ポインタ

VARSET ベース候補リスト, -1
ベース候補リスト:0 = ID
ベース候補数 = 1

;3代上くらいまでさかのぼって見つからないならもう血はぐちゃぐちゃだと思うのでそのくらいで打ち切る
ベース候補ポインタ = 0
WHILE ベース候補ポインタ < MIN(ベース候補数, 15)
	SIF INRANGE(GET_PERSON_種族(ベース候補リスト:ベース候補ポインタ), 1, 4)
		RETURNF GET_PERSON_種族(ベース候補リスト:ベース候補ポインタ)

	LOCAL = GET_PERSON_母親(ベース候補リスト:ベース候補ポインタ)
	IF LOCAL && FINDELEMENT(ベース候補リスト, LOCAL) == -1
		ベース候補リスト:ベース候補数 = LOCAL
		ベース候補数 ++
	ENDIF

	LOCAL = GET_PERSON_父親(ベース候補リスト:ベース候補ポインタ)
	IF LOCAL && FINDELEMENT(ベース候補リスト, LOCAL) == -1
		ベース候補リスト:ベース候補数 = LOCAL
		ベース候補数 ++
	ENDIF

	ベース候補ポインタ ++
WEND

RETURNF GET_PERSON_種族(ID)

@素質遺伝(CHILD, PARENT, PERCENTAGE)
#DIM CHILD
#DIM PARENT
#DIM PERCENTAGE
#DIM 遺伝候補, VARSIZE("遺伝可能配列")
#DIM 遺伝候補数
#DIM TALENT_NO
#DIM 削除対象

VARSET 遺伝候補, -1
遺伝候補数 = 0

;遺伝候補の洗い出し
FOR LOCAL, 0, VARSIZE("遺伝可能配列")
	TALENT_NO = 遺伝可能配列:LOCAL
	IF STRLENS(GET_TALENTNAME(TALENT_NO, TALENT:PARENT:TALENT_NO, 0)) > 0
		遺伝候補:遺伝候補数 = TALENT_NO
		遺伝候補数 ++
	ENDIF
NEXT

;遺伝候補をPERCENTAGEに沿って減らす
LOCAL = 遺伝候補数 * (100 - PERCENTAGE) / 100
WHILE LOCAL > 0
	削除対象 = RAND:遺伝候補数
	遺伝候補数 --
	遺伝候補:削除対象 = 遺伝候補:遺伝候補数
	遺伝候補:遺伝候補数 = -1
	LOCAL --
WEND

;残ったものを遺伝させる
FOR LOCAL, 0, 遺伝候補数
	TALENT_NO = 遺伝候補:LOCAL
	TALENT:CHILD:TALENT_NO = TALENT:PARENT:TALENT_NO
NEXT

@素質削減(CHILD, QUANTITY)
#DIM CHILD
#DIM QUANTITY
#DIM 削減候補, VARSIZE("遺伝可能配列")
#DIM 削減候補数
#DIM 性格数
#DIM TALENT_NO
#DIM 削除対象

VARSET 削減候補, -1
削減候補数 = 0
性格数 = 0

;削減候補の洗い出し
FOR LOCAL, 0, VARSIZE("遺伝可能配列")
	TALENT_NO = 遺伝可能配列:LOCAL
	IF STRLENS(GET_TALENTNAME(TALENT_NO, TALENT:CHILD:TALENT_NO, 0)) > 0
		削減候補:削減候補数 = TALENT_NO
		削減候補数 ++
		SIF FINDELEMENT(素質候補_性格, ランダム素質_キー(TALENT_NO, TALENT:CHILD:TALENT_NO)) >= 0
			性格数 ++
	ENDIF
NEXT

;削減候補をQUANTITYに沿って減らす
LOCAL = 削減候補数 - QUANTITY
WHILE LOCAL > 0
	削除対象 = RAND:削減候補数
	TALENT_NO = 削減候補:削除対象

	IF FINDELEMENT(素質候補_性格, ランダム素質_キー(TALENT_NO, TALENT:CHILD:TALENT_NO)) >= 0
		;最低でも素質の1/4は性格
		IF 性格数 <= QUANTITY / 4
			CONTINUE
		ELSE
			性格数 --
		ENDIF
	ENDIF
	削減候補数 --
	削減候補:削除対象 = 削減候補:削減候補数
	削減候補:削減候補数 = -1
	TALENT:CHILD:TALENT_NO = 0
	LOCAL --
WEND


@親容姿(PARENT)
#FUNCTION
#DIM PARENT
IF NO:PARENT == 0 || NO:PARENT == 999
	;あなたとランダムキャラは設定されているものを使う
	RETURNF TALENT:PARENT:容姿
ELSE
	;名有りキャラは美形として扱う
	RETURNF 1
ENDIF

@因子取得_体格(PARENT)
#FUNCTION
#DIM PARENT
RETURNF TALENT:PARENT:体格 - 体格_平均(ベース種族検索(CFLAG:PARENT:人物番号), TALENT:PARENT:性別, キャラ見た目年齢(PARENT), TALENT:PARENT:バストサイズ, (TALENT:PARENT:年齢層>=年齢層_老年))

@因子取得_体型(PARENT)
#FUNCTION
#DIM PARENT
RETURNF TALENT:PARENT:体型 - 体型_平均(ベース種族検索(CFLAG:PARENT:人物番号))

@因子取得_バストサイズ(PARENT)
#FUNCTION
#DIM PARENT
#DIM ベース種族
#DIM バストサイズ格納
ベース種族 = ベース種族検索(CFLAG:PARENT:人物番号)
IF GETBIT(TALENT:PARENT:性別, 0)
	バストサイズ格納 = TALENT:PARENT:バストサイズ
ELSE
	バストサイズ格納 = ランダムバストサイズ(ベース種族, TALENT:PARENT:年齢層)
ENDIF
RETURNF バストサイズ格納 - バストサイズ_平均(ベース種族, TALENT:PARENT:年齢層)

@因子取得_男性器サイズ(PARENT)
#FUNCTION
#DIM PARENT
#DIM ベース種族
#DIM 男性器サイズ格納
ベース種族 = ベース種族検索(CFLAG:PARENT:人物番号)
IF GETBIT(TALENT:PARENT:性別, 1)
	男性器サイズ格納 = TALENT:PARENT:男性器サイズ
ELSE
	男性器サイズ格納 = ランダム男性器サイズ(ベース種族, TALENT:PARENT:性別, TALENT:PARENT:年齢層)
ENDIF
RETURNF 男性器サイズ格納 - 男性器サイズ_平均(ベース種族, TALENT:PARENT:性別, TALENT:PARENT:年齢層)


@子供相性初期化(CHILD)
#DIM CONST 親子同行確率 = 50
#DIM CONST 姉妹同行確率 = 30
#DIM CONST 双子同行確率 = 100
#DIM CHILD
#DIM MOTHER
#DIM FATHER
#DIM SISTER_COUNT
#DIM SISTER
#DIM 相性数

VARSET 同行候補キャラ番号:CHILD:0
VARSET 同行候補キャラ確率:CHILD:0
相性数 = 0

MOTHER = FIND_MOTHER_CHARA_FROM_PERSON_ID(CFLAG:CHILD:人物番号)
IF MOTHER >= 0 && MASTER != MOTHER
	同行候補キャラ番号:CHILD:相性数 = MOTHER
	同行候補キャラ確率:CHILD:相性数 = 親子同行確率
	相性数 ++
	CALL SET_RELATION(MOTHER, CHILD, 親子同行確率, 1)
ENDIF

FATHER = FIND_FATHER_CHARA_FROM_PERSON_ID(CFLAG:CHILD:人物番号)
IF FATHER >= 0 && MASTER != FATHER
	同行候補キャラ番号:CHILD:相性数 = FATHER
	同行候補キャラ確率:CHILD:相性数 = 親子同行確率
	相性数 ++
	CALL SET_RELATION(FATHER, CHILD, 親子同行確率, 1)
ENDIF

;両親がはっきりしている場合、同じ両親の組み合わせから生まれた姉妹にも同行する
IF MOTHER >= 0 && FATHER >= 0
	CALL FIND_CHILDREN(CFLAG:MOTHER:人物番号, CFLAG:FATHER:人物番号)
	SISTER_COUNT = RESULT
	FOR LOCAL, 1, (SISTER_COUNT + 1)
		SIF CFLAG:CHILD:人物番号 == RESULT:LOCAL
			CONTINUE
		SISTER = FIND_CHARA_FROM_PERSON_ID(RESULT:LOCAL)
		IF SISTER >= 0 && MASTER != SISTER
			IF GET_PERSON_生年日(CFLAG:CHILD:人物番号) == GET_PERSON_生年日(RESULT:LOCAL) && GET_PERSON_出会った周回(CFLAG:CHILD:人物番号) == GET_PERSON_出会った周回(RESULT:LOCAL) && GET_PERSON_出生順(CFLAG:CHILD:人物番号) == GET_PERSON_出生順(RESULT:LOCAL)
				同行候補キャラ番号:CHILD:相性数 = SISTER
				同行候補キャラ確率:CHILD:相性数 = 双子同行確率
				相性数 ++
				CALL SET_RELATION(SISTER, CHILD, 双子同行確率, 1)
			ELSE
				同行候補キャラ番号:CHILD:相性数 = SISTER
				同行候補キャラ確率:CHILD:相性数 = 姉妹同行確率
				相性数 ++
				CALL SET_RELATION(SISTER, CHILD, 姉妹同行確率, 1)
			ENDIF
		ENDIF
	NEXT
ENDIF

CALL INIT_RELATION(CHILD)

;アップデート用処理 今は使用されていない
;@子供相性設定確認(CHILD)
;#DIM CHILD
;#DIM MOTHER
;#DIM FATHER
;#DIM SISTER_COUNT
;#DIM SISTER
;
;
;MOTHER = FIND_MOTHER_CHARA_FROM_PERSON_ID(CFLAG:CHILD:人物番号)
;IF MOTHER >= 0 && MASTER != MOTHER
;	SIF 同行候補キャラ番号:CHILD:0 != MOTHER
;		CALL 子供相性初期化(CHILD)
;	RETURN 0
;ENDIF
;
;FATHER = FIND_FATHER_CHARA_FROM_PERSON_ID(CFLAG:CHILD:人物番号)
;IF FATHER >= 0 && MASTER != FATHER
;	SIF 同行候補キャラ番号:CHILD:0 != FATHER
;		CALL 子供相性初期化(CHILD)
;	RETURN 0
;ENDIF
;
;;両親がはっきりしている場合、同じ両親の組み合わせから生まれた姉妹にも同行する
;IF MOTHER >= 0 && FATHER >= 0
;	CALL FIND_CHILDREN(CFLAG:MOTHER:人物番号, CFLAG:FATHER:人物番号)
;	SISTER_COUNT = RESULT
;	FOR LOCAL, 1, (SISTER_COUNT + 1)
;		SIF CFLAG:CHILD:人物番号 == RESULT:LOCAL
;			CONTINUE
;		SISTER = FIND_CHARA_FROM_PERSON_ID(RESULT:LOCAL)
;		IF SISTER >= 0 && MASTER != SISTER
;			SIF 同行候補キャラ番号:CHILD:0 != SISTER
;				CALL 子供相性初期化(CHILD)
;			RETURN 0
;		ENDIF
;	NEXT
;ENDIF
