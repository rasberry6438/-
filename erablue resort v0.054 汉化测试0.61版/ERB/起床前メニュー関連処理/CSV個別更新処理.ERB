@CSV更新処理リスト()
#DIM 現在ページ
#DIM 対象キャラ
#DIM ボタン結果

DRAWLINE
PRINTL 请选择要应用CSV的角色。
DRAWLINE

LOCAL:1 = 0
FOR 対象キャラ, 現在ページ * 30 + 1, CHARANUM
	SIF LOCAL:1 >= 30
		BREAK
	SIF NO:対象キャラ == 999
		CONTINUE
	PRINTBUTTON @"[{対象キャラ, 3}] %NAME表示省略(NAME表示(対象キャラ)), 41, LEFT%", 対象キャラ
	LOCAL:1 ++
	SIF LOCAL:1 % 2 == 0
		PRINTL 
NEXT
PRINTL
DRAWLINE
IF 現在ページ > 0
	PRINTBUTTONLC "[9997] 上一页", 9997
ELSE
	PRINTLC 　
ENDIF
IF CHARANUM > 対象キャラ
	PRINTBUTTONLC "[9998] 下一页", 9998
ENDIF
PRINTL
PRINTBUTTON "[9999] 返回", 9999
PRINTL
BINPUT

ボタン結果 = RESULT
SELECTCASE ボタン結果
	CASE 9997
		現在ページ --
	CASE 9998
		現在ページ ++
	CASE 9999
		現在ページ = 0
		RETURN 0
	CASEELSE
		CALL CSV個別更新処理(ボタン結果)
ENDSELECT

RESTART

@CSV個別更新処理(対象キャラ)
#DIM 対象キャラ
#DIM 得意武器記録
#DIM ボタン結果
#DIMS CSTR切り分け文字列格納, 2
#DIMS CONST カテゴリ一覧 = "名前", "出演作品", "プレゼント好み", "戦闘タイプ", "肉体情報", "素質", "知識素質", "性癖素質", "固有素質", "能力", "経験", "初期服装","奥義名設定"

; 画像フォルダ設定の修正
CALL FIX_RESOURCES_FOLDER(対象キャラ)
IF RESULT
	PRINTL 由于当前设定的图像文件夹无效，
	PRINTFORMW 已将图像文件夹设定更改为%CSTR:対象キャラ:画像フォルダ%
ENDIF

DRAWLINE
PRINTL 请选择要应用CSV的类别。
PRINTFORML 选定的角色：%NAME表示(対象キャラ)%
DRAWLINE

IF CSVNAME(NO:対象キャラ) != NAME:対象キャラ || CSVCALLNAME(NO:対象キャラ) != CALLNAME:対象キャラ
	PRINTBUTTON "[0] 应用名称变更", 0
	PRINTL
ELSE
	SETCOLOR カラーパレット("グレーアウト")
	PRINTPLAIN [0] 应用名称变更（无变更）
	RESETCOLOR
	PRINTL
ENDIF

IF CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "出演作品")) != CSTR:対象キャラ:出演作品
	PRINTBUTTON "[1] 应用出自作品变更", 1
	PRINTL
ELSE
	SETCOLOR カラーパレット("グレーアウト")
	PRINTPLAIN [1] 应用出自作品变更（无变更）
	RESETCOLOR
	PRINTL
ENDIF

IF CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "プレゼント好み")) != CSTR:対象キャラ:プレゼント好み
	PRINTBUTTON "[2] 应用礼物偏好变更", 2
	PRINTL
ELSE
	SETCOLOR カラーパレット("グレーアウト")
	PRINTPLAIN [2] 应用礼物偏好变更（无变更）
	RESETCOLOR
	PRINTL
ENDIF

IF CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "戦闘基礎ステータス設定")) != CSTR:対象キャラ:戦闘基礎ステータス設定
	PRINTBUTTON "[3] 应用战斗类型变更", 3
	PRINTL
ELSE
	SETCOLOR カラーパレット("グレーアウト")
	PRINTPLAIN [3] 应用战斗类型变更（无变更）
	RESETCOLOR
	PRINTL
ENDIF

RESULT = 0
CALL 肉体情報比較処理(対象キャラ, 0)
IF RESULT
	PRINTBUTTON "[4] 应用身体信息变更", 4
	PRINTL 　　※因系统处理需要，即使无变更也可能应用
ELSE
	SETCOLOR カラーパレット("グレーアウト")
	PRINTPLAIN [4] 应用身体信息变更（无变更）
	RESETCOLOR
	PRINTL
ENDIF

RESULT = 0
CALL 素質比較処理(対象キャラ, 0)
IF RESULT
	PRINTBUTTON "[5] 应用特质变更", 5
	PRINTL 　　※因系统处理需要，即使无变更也可能应用
ELSE
	SETCOLOR カラーパレット("グレーアウト")
	PRINTPLAIN [5] 应用特质变更（无变更）
	RESETCOLOR
	PRINTL
ENDIF

RESULT = 0
CALL 知識素質比較処理(対象キャラ, 0)
IF RESULT
	PRINTBUTTON "[6] 应用知识特质变更", 6
	PRINTL 　　※成长值也将重置
ELSE
	SETCOLOR カラーパレット("グレーアウト")
	PRINTPLAIN [6] 应用知识特质变更（无变更）
	RESETCOLOR
	PRINTL
ENDIF

RESULT = 0
CALL 性癖素質比較処理(対象キャラ, 0)
IF RESULT
	PRINTBUTTON "[7] 应用性癖特质变更", 7
	PRINTL 　　※成长值也将重置
ELSE
	SETCOLOR カラーパレット("グレーアウト")
	PRINTPLAIN [7] 应用性癖特质变更（无变更）
	RESETCOLOR
	PRINTL
ENDIF

RESULT = 0
FOR LOCAL, 0, 10
	IF CSTR:対象キャラ:(LOCAL + 80) != CSVCSTR(NO:対象キャラ, LOCAL + 80)
		RESULT = 1
		BREAK
	ENDIF
NEXT
IF RESULT
	PRINTBUTTON "[8] 应用专属特质变更", 8
ELSE
	SETCOLOR カラーパレット("グレーアウト")
	PRINTPLAIN [8] 应用专属特质变更（无变更）
	RESETCOLOR
	PRINTL
ENDIF

RESULT = 0
FOR LOCAL, 0, VARSIZE("ABL")
	IF ABL:対象キャラ:LOCAL != CSVABL(NO:対象キャラ, LOCAL)
		RESULT = 1
		BREAK
	ENDIF
NEXT
IF RESULT
	PRINTBUTTON "[9] 应用能力变更", 9
	PRINTL 　　※成长值也将重置
ELSE
	SETCOLOR カラーパレット("グレーアウト")
	PRINTPLAIN [9] 应用能力变更（无变更）
	RESETCOLOR
	PRINTL
ENDIF

RESULT = 0
FOR LOCAL, 0, VARSIZE("EXP")
	IF EXP:対象キャラ:LOCAL != CSVEXP(NO:対象キャラ, LOCAL)
		RESULT = 1
		BREAK
	ENDIF
NEXT
IF RESULT
	PRINTBUTTON "[10] 应用经验变更", 10
	PRINTL 　　※成长值也将重置
ELSE
	SETCOLOR カラーパレット("グレーアウト")
	PRINTPLAIN [10] 应用经验变更（无变更）
	RESETCOLOR
	PRINTL
ENDIF

RESULT = 0
FOR LOCAL, 0, VARSIZE("EQUIP")
	IF EQUIP:対象キャラ:LOCAL != CSVEQUIP(NO:対象キャラ, LOCAL)
		RESULT = 1
		BREAK
	ENDIF
NEXT
SIF RESULT == 0 && CSTR:対象キャラ:服名称 != CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "服名称"))
	RESULT = 1
SIF RESULT == 0 && CSTR:対象キャラ:普段着解説 != CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "普段着解説"))
	RESULT = 1

IF RESULT
	PRINTBUTTON "[11] 应用初始服装变更", 11
	PRINTL 　　※成长值也将重置
ELSE
	SETCOLOR カラーパレット("グレーアウト")
	PRINTPLAIN [11] 应用初始服装变更（无变更）
	RESETCOLOR
	PRINTL
ENDIF

RESULT = 0
IF CSTR:対象キャラ:表示奥義設定 != CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "表示奥義設定"))
	RESULT = 1
ENDIF
IF CSTR:対象キャラ:陥落奥義設定 != CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "陥落奥義設定"))
	RESULT = 1
ENDIF
IF RESULT
	PRINTBUTTON "[12] 应用奥义名称设定变更", 12
ELSE
	SETCOLOR カラーパレット("グレーアウト")
	PRINTPLAIN [12] 应用奥义名称设定变更（无变更）
	RESETCOLOR
	PRINTL
ENDIF



PRINTL
PRINTBUTTON "[9999] 返回", 9999
PRINTL 

BINPUT
IF RESULT == 9999
	RETURN 0
ENDIF

ボタン結果 = RESULT
PRINTL
PRINTL
PRINTL
DRAWLINE
PRINTL ・变更项
SELECTCASE ボタン結果
	CASE 0
		IF CSVNAME(NO:対象キャラ) != NAME:対象キャラ
			PRINTL 名称：
			PRINTFORML %NAME表示(対象キャラ)% > %CSVNAME(NO:対象キャラ)%
		ENDIF
		IF CSVCALLNAME(NO:対象キャラ) != CALLNAME:対象キャラ
			PRINTL 昵称：
			PRINTFORML %CALLNAME:対象キャラ% > %CSVCALLNAME(NO:対象キャラ)%
		ENDIF
	CASE 1
		PRINTL 出自作品：
		PRINTFORML %CSTR:対象キャラ:出演作品% > %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "出演作品"))%
	CASE 2
		PRINTL 礼物偏好：
		PRINTFORML %CSTR:対象キャラ:プレゼント好み% > %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "プレゼント好み"))%
	CASE 3
		PRINTL 战斗类型：
		PRINTFORML %CSTR:対象キャラ:戦闘基礎ステータス設定% > %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "戦闘基礎ステータス設定"))%
	CASE 4
		CALL 肉体情報比較処理(対象キャラ, -1)
	CASE 5
		CALL 素質比較処理(対象キャラ, -1)
	CASE 6
		CALL 知識素質比較処理(対象キャラ, -1)
	CASE 7
		CALL 性癖素質比較処理(対象キャラ, -1)
	CASE 8
		FOR LOCAL, 0, 10
			IF CSTR:対象キャラ:(LOCAL + 80) != CSVCSTR(NO:対象キャラ, LOCAL + 80)
				PRINTFORML [%CSTR:対象キャラ:(LOCAL + 80)%] > [%CSVCSTR(NO:対象キャラ, LOCAL + 80)%]
			ENDIF
		NEXT
	CASE 9
		FOR LOCAL, 0, VARSIZE("ABL")
			IF ABL:対象キャラ:LOCAL != CSVABL(NO:対象キャラ, LOCAL)
				PRINTFORML %ABLNAME:LOCAL%：{ABL:対象キャラ:LOCAL} > {CSVABL(NO:対象キャラ, LOCAL)}
			ENDIF
		NEXT
	CASE 10
		FOR LOCAL, 0, VARSIZE("EXP")
			IF EXP:対象キャラ:LOCAL != CSVEXP(NO:対象キャラ, LOCAL)
				PRINTFORML %EXPNAME:LOCAL%：{EXP:対象キャラ:LOCAL} > {CSVEXP(NO:対象キャラ, LOCAL)}
			ENDIF
		NEXT
	CASE 11
		SIF CSTR:対象キャラ:服名称 != CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "服名称"))
			PRINTFORML %CSTR:対象キャラ:服名称% > %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "服名称"))%
		SIF CSTR:対象キャラ:普段着解説 != CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "普段着解説"))
			PRINTFORML %CSTR:対象キャラ:普段着解説% > %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "普段着解説"))%
		FOR LOCAL, 0, VARSIZE("EQUIP")
			IF EQUIP:対象キャラ:LOCAL != CSVEQUIP(NO:対象キャラ, LOCAL)
				PRINTFORML %EQUIPNAME:LOCAL%：{EQUIP:対象キャラ:LOCAL} > {CSVEQUIP(NO:対象キャラ, LOCAL)}
			ENDIF
		NEXT
	CASE 12
		VARSET LOCALS
		IF CSTR:対象キャラ:表示奥義設定 != ""
			SPLIT CSTR:対象キャラ:表示奥義設定, "_", LOCALS
			PRINTL ■通常奥义：变更前
			PRINTFORML %LOCALS:0%
			PRINTFORML %LOCALS:1%
			PRINTFORML %LOCALS:2%
		ELSE
			PRINTL ■通常奥义：变更前
			PRINTL 未设置
		ENDIF
		PRINTL
		VARSET LOCALS
		IF CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "表示奥義設定")) != ""
			SPLIT CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "表示奥義設定")), "_", LOCALS
			PRINTL ■通常奥义：变更后
			PRINTFORML %LOCALS:0%
			PRINTFORML %LOCALS:1%
			PRINTFORML %LOCALS:2%
		ELSE
			PRINTL ■通常奥义：变更后
			PRINTL 未设置
		ENDIF
		VARSET LOCALS
		IF CSTR:対象キャラ:陥落奥義設定 != ""
			SPLIT CSTR:対象キャラ:陥落奥義設定, "_", LOCALS
			PRINTL ■攻略奥义：变更前
			PRINTFORML %LOCALS:0%
			PRINTFORML %LOCALS:1%
			PRINTFORML %LOCALS:2%
		ELSE
			PRINTL ■攻略奥义：变更前
			PRINTL 未设置
		ENDIF
		PRINTL
		VARSET LOCALS
		IF CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "陥落奥義設定")) != ""
			SPLIT CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "陥落奥義設定")), "_", LOCALS
			PRINTL ■攻略奥义：变更后
			PRINTFORML %LOCALS:0%
			PRINTFORML %LOCALS:1%
			PRINTFORML %LOCALS:2%
		ELSE
			PRINTL ■攻略奥义：变更后
			PRINTL 未设置
		ENDIF
ENDSELECT
DRAWLINE
PRINTFORML 确定要对%カテゴリ一覧:ボタン結果%应用CSV设定吗？
PRINTL ※所有成长值、ZP相关变动都将重置
PRINTL ※已育子女、已有恋人等特质也将初始化。可能导致异常，请谨慎操作
PRINTL ※体格、体型在应用CSV后会进行种族修正，可能与显示值存在差异
DRAWLINE
PRINTBUTTONLC "[0] 确定", 0
PRINTBUTTONLC "[1] 取消", 1
PRINTL
BINPUT
IF RESULT == 1
	RESTART
ENDIF
SELECTCASE ボタン結果
	CASE 0
		NAME:対象キャラ = %CSVNAME(NO:対象キャラ)%
		CALLNAME:対象キャラ = %CSVCALLNAME(NO:対象キャラ)%
	CASE 1
		CSTR:対象キャラ:出演作品 = %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "出演作品"))%
	CASE 2
		CSTR:対象キャラ:プレゼント好み = %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "プレゼント好み"))%
	CASE 3
		VARSET CSTR切り分け文字列格納
		VARSET LOCALS
		VARSET RESULTS

		CSTR:対象キャラ:戦闘基礎ステータス設定 = %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "戦闘基礎ステータス設定"))%
		SUBSTRING CSTR:対象キャラ:戦闘基礎ステータス設定, 1, -1
		SPLIT RESULTS, " ", LOCALS
		;属性
		SPLIT LOCALS:0, "_", CSTR切り分け文字列格納
		基礎BATTLE_STATE:対象キャラ:属性 = 属性文字列数値変換(CSTR切り分け文字列格納:1)
		;得意武器
		SPLIT LOCALS:1, "_", CSTR切り分け文字列格納
		VARSET RESULTS
		SPLIT CSTR切り分け文字列格納:1, "・", RESULTS
		得意武器記録 = 0
		FOR LOCAL, 0, RESULT
			SETBIT 得意武器記録, 得意武器文字列数値変換(RESULTS:LOCAL)
		NEXT
		基礎BATTLE_STATE:対象キャラ:得意武器 = 得意武器記録
		;初期ステータス
		SPLIT LOCALS:2, "_", CSTR切り分け文字列格納
		CALL 初期ステータス設定_テンプレート適用(CSTR切り分け文字列格納:1, 対象キャラ)
		TRYCALLFORM 戦闘初期ステータス設定_{NO:対象キャラ}(対象キャラ)
		CALL レベルアップ処理(対象キャラ, 1)
		CALL 口上変数初期化
	CASE 4
		CALL 肉体情報比較処理(対象キャラ, 1)
	CASE 5
		CALL 素質比較処理(対象キャラ, 1)
	CASE 6
		CALL 知識素質比較処理(対象キャラ, 1)
	CASE 7
		CALL 性癖素質比較処理(対象キャラ, 1)
	CASE 8
		FOR LOCAL, 0, 10
			CSTR:対象キャラ:(LOCAL + 80) = %CSVCSTR(NO:対象キャラ, LOCAL + 80)%
		NEXT
	CASE 9
		FOR LOCAL, 0, VARSIZE("ABL")
			ABL:対象キャラ:LOCAL = CSVABL(NO:対象キャラ, LOCAL)
		NEXT
	CASE 10
		FOR LOCAL, 0, VARSIZE("EXP")
			EXP:対象キャラ:LOCAL = CSVEXP(NO:対象キャラ, LOCAL)
		NEXT
	CASE 11
		FOR LOCAL, 0, VARSIZE("EQUIP")
			EQUIP:対象キャラ:LOCAL = CSVEQUIP(NO:対象キャラ, LOCAL)
		NEXT
		CSTR:対象キャラ:服名称 = %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "服名称"))%
		CSTR:対象キャラ:普段着解説 = %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "普段着解説"))%
	CASE 12
		CSTR:対象キャラ:表示奥義設定 '= CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "表示奥義設定"))
		CSTR:対象キャラ:陥落奥義設定 '= CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "陥落奥義設定"))
		VARSET LOCALS
		IF CSTR:対象キャラ:表示奥義設定 != ""
			SPLIT CSTR:対象キャラ:表示奥義設定, "_", LOCALS
			表示奥義:対象キャラ:0 '= LOCALS:0
			表示奥義:対象キャラ:1 '= LOCALS:1
			表示奥義:対象キャラ:2 '= LOCALS:2
		ENDIF
		VARSET LOCALS
		IF CSTR:対象キャラ:陥落奥義設定 != ""
			SPLIT CSTR:対象キャラ:陥落奥義設定, "_", LOCALS
			陥落奥義:対象キャラ:0 '= LOCALS:0
			陥落奥義:対象キャラ:1 '= LOCALS:1
			陥落奥義:対象キャラ:2 '= LOCALS:2
		ENDIF
ENDSELECT
PRINTFORMW 已对%カテゴリ一覧:ボタン結果%应用CSV设定
RESTART



@肉体情報比較処理(対象キャラ, 動作モード)
#DIM 対象キャラ
#DIM 動作モード

IF 動作モード == 0
	;比較するだけ
	SIF TALENT:対象キャラ:種族 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "種族"))
		RETURN 1
	SIF CSTR:対象キャラ:特殊種族 != CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "特殊種族"))
		RETURN 1
	SIF TALENT:対象キャラ:角あり != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "角あり"))
		RETURN 1
	SIF TALENT:対象キャラ:尻尾あり != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "尻尾あり"))
		RETURN 1
	SIF TALENT:対象キャラ:エルーン耳 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "エルーン耳"))
		RETURN 1
	SIF TALENT:対象キャラ:ハーヴィン耳 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "ハーヴィン耳"))
		RETURN 1
	IF BASE:対象キャラ:ヒップ != CSVBASE(NO:対象キャラ, GETNUM(BASE, "ヒップ")) && CSVBASE(NO:対象キャラ, GETNUM(BASE, "ヒップ"))
		RETURN 1
	ELSE
		SIF TALENT:対象キャラ:下半身 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "下半身"))
			RETURN 1
	ENDIF
	IF BASE:対象キャラ:ウエスト != CSVBASE(NO:対象キャラ, GETNUM(BASE, "ウエスト")) && CSVBASE(NO:対象キャラ, GETNUM(BASE, "ウエスト"))
		RETURN 1
	ENDIF
	IF BASE:対象キャラ:バスト != CSVBASE(NO:対象キャラ, GETNUM(BASE, "バスト")) && CSVBASE(NO:対象キャラ, GETNUM(BASE, "バスト"))
		RETURN 1
	ELSE
		SIF TALENT:対象キャラ:バストサイズ != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "バストサイズ"))
			RETURN 1
	ENDIF
	IF BASE:対象キャラ:身長 != CSVBASE(NO:対象キャラ, GETNUM(BASE, "身長")) && CSVBASE(NO:対象キャラ, GETNUM(BASE, "身長"))
		RETURN 1
	ENDIF
	IF BASE:対象キャラ:年齢 != CSVBASE(NO:対象キャラ, GETNUM(BASE, "年齢"))
		RETURN 1
	ELSEIF TALENT:対象キャラ:年齢層 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "年齢層"))
		RETURN 1
	ENDIF
	SIF CSTR:対象キャラ:特殊年齢 != CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "特殊年齢"))
		RETURN 1
	SIF TALENT:対象キャラ:外見年齢 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "外見年齢"))
		RETURN 1
	SIF TALENT:対象キャラ:体格 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "体格"))
		RETURN 1
	SIF TALENT:対象キャラ:体型 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "体型"))
		RETURN 1
	SIF TALENT:対象キャラ:男性器サイズ != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "男性器サイズ"))
		RETURN 1
	SIF TALENT:対象キャラ:性別 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "性別"))
		RETURN 1
	SIF TALENT:対象キャラ:処女 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "処女"))
		RETURN 1
	SIF TALENT:対象キャラ:非童貞 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "非童貞"))
		RETURN 1
ELSEIF 動作モード == -1
	;差異の表示
	SIF TALENT:対象キャラ:種族 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "種族"))
		PRINTFORML 种族：%GET_TALENTNAME(GETNUM(TALENT, "種族"), TALENT:対象キャラ:種族,,対象キャラ)% > %GET_TALENTNAME(GETNUM(TALENT, "種族"), CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "種族")),,対象キャラ)%
	SIF CSTR:対象キャラ:特殊種族 != CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "特殊種族"))
		PRINTFORML 特殊种族：%CSTR:対象キャラ:特殊種族% > %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "特殊種族"))%
	SIF TALENT:対象キャラ:角あり != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "角あり"))
		PRINTFORML 有角：{TALENT:対象キャラ:角あり} > {CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "角あり"))}
	SIF TALENT:対象キャラ:尻尾あり != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "尻尾あり"))
		PRINTFORML 有尾巴：{TALENT:対象キャラ:尻尾あり} > {CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "尻尾あり"))}
	SIF TALENT:対象キャラ:エルーン耳 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "エルーン耳"))
		PRINTFORML 艾伦耳：{TALENT:対象キャラ:エルーン耳} > {CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "エルーン耳"))}
	SIF TALENT:対象キャラ:ハーヴィン耳 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "ハーヴィン耳"))
		PRINTFORML 哈文耳：{TALENT:対象キャラ:ハーヴィン耳} > {CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "ハーヴィン耳"))}
	IF BASE:対象キャラ:バスト != CSVBASE(NO:対象キャラ, GETNUM(BASE, "バスト")) && CSVBASE(NO:対象キャラ, GETNUM(BASE, "バスト"))
		PRINTFORML 胸围：{BASE:対象キャラ:バスト} > {CSVBASE(NO:対象キャラ, GETNUM(BASE, "バスト"))}
	ELSE
		SIF TALENT:対象キャラ:バストサイズ != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "バストサイズ"))
			PRINTFORML 胸围尺寸：{TALENT:対象キャラ:バストサイズ} > {CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "バストサイズ"))}
	ENDIF
	IF BASE:対象キャラ:ウエスト != CSVBASE(NO:対象キャラ, GETNUM(BASE, "ウエスト")) && CSVBASE(NO:対象キャラ, GETNUM(BASE, "ウエスト"))
		PRINTFORML 腰围：{BASE:対象キャラ:ウエスト} > {CSVBASE(NO:対象キャラ, GETNUM(BASE, "ウエスト"))}
	ENDIF
	IF BASE:対象キャラ:ヒップ != CSVBASE(NO:対象キャラ, GETNUM(BASE, "ヒップ")) && CSVBASE(NO:対象キャラ, GETNUM(BASE, "ヒップ"))
		PRINTFORML 臀围：{BASE:対象キャラ:ヒップ} > {CSVBASE(NO:対象キャラ, GETNUM(BASE, "ヒップ"))}
	ELSE
		SIF TALENT:対象キャラ:下半身 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "下半身"))
			PRINTFORML 下半身：{TALENT:対象キャラ:下半身} > {CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "下半身"))}
	ENDIF
	IF BASE:対象キャラ:身長 != CSVBASE(NO:対象キャラ, GETNUM(BASE, "身長")) && CSVBASE(NO:対象キャラ, GETNUM(BASE, "身長"))
		PRINTFORML 身高：{BASE:対象キャラ:身長} > {CSVBASE(NO:対象キャラ, GETNUM(BASE, "身長"))}
	ENDIF
	IF BASE:対象キャラ:年齢 != CSVBASE(NO:対象キャラ, GETNUM(BASE, "年齢"))
		PRINTFORML 年龄：{BASE:対象キャラ:年齢} > {CSVBASE(NO:対象キャラ, GETNUM(BASE, "年齢"))}
	ELSEIF TALENT:対象キャラ:年齢層 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "年齢層"))
		PRINTFORML 年龄层：{TALENT:対象キャラ:年齢層} > {CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "年齢層"))}
	ENDIF
	SIF CSTR:対象キャラ:特殊年齢 != CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "特殊年齢"))
		PRINTFORML 特殊年龄：%CSTR:対象キャラ:特殊年齢% > %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "特殊年齢"))%
	SIF TALENT:対象キャラ:外見年齢 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "外見年齢"))
		PRINTFORML 外表年龄：{TALENT:対象キャラ:外見年齢} > {CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "外見年齢"))}
	SIF TALENT:対象キャラ:体格 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "体格"))
		PRINTFORML 体格：{TALENT:対象キャラ:体格} > {CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "体格"))}
	SIF TALENT:対象キャラ:体型 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "体型"))
		PRINTFORML 体型：{TALENT:対象キャラ:体型} > {CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "体型"))}
	SIF TALENT:対象キャラ:男性器サイズ != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "男性器サイズ"))
		PRINTFORML 男性生殖器尺寸：{TALENT:対象キャラ:男性器サイズ} > {CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "男性器サイズ"))}
	SIF TALENT:対象キャラ:性別 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "性別"))
		PRINTFORML 性别：{TALENT:対象キャラ:性別} > {CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "性別"))}
	SIF TALENT:対象キャラ:処女 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "処女"))
		PRINTFORML 处女：{TALENT:対象キャラ:処女} > {CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "処女"))}
	SIF TALENT:対象キャラ:非童貞 != CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "非童貞"))
		PRINTFORML 非童贞：{TALENT:対象キャラ:非童貞} > {CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "非童貞"))}
ELSE
	;書き換える
	TALENT:対象キャラ:種族 = CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "種族"))
	CSTR:対象キャラ:特殊種族 '= CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "特殊種族"))
	TALENT:対象キャラ:角あり = CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "角あり"))
	TALENT:対象キャラ:尻尾あり = CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "尻尾あり"))
	TALENT:対象キャラ:エルーン耳 = CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "エルーン耳"))
	TALENT:対象キャラ:ハーヴィン耳 = CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "ハーヴィン耳"))
	BASE:対象キャラ:ヒップ = CSVBASE(NO:対象キャラ, GETNUM(BASE, "ヒップ"))
	TALENT:対象キャラ:下半身 = CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "下半身"))
	BASE:対象キャラ:ウエスト = CSVBASE(NO:対象キャラ, GETNUM(BASE, "ウエスト"))
	BASE:対象キャラ:バスト = CSVBASE(NO:対象キャラ, GETNUM(BASE, "バスト"))
	TALENT:対象キャラ:バストサイズ = CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "バストサイズ"))
	BASE:対象キャラ:身長 = CSVBASE(NO:対象キャラ, GETNUM(BASE, "身長"))
	BASE:対象キャラ:年齢 = CSVBASE(NO:対象キャラ, GETNUM(BASE, "年齢"))
	IF BASE:対象キャラ:年齢 > 0
		TALENT:対象キャラ:年齢層 = 年齢層算出処理(BASE:対象キャラ:年齢)
	ELSE
		TALENT:対象キャラ:年齢層 = CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "年齢層"))
	ENDIF
	CSTR:対象キャラ:特殊年齢 '= CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "特殊年齢"))
	TALENT:対象キャラ:外見年齢 = CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "外見年齢"))
	TALENT:対象キャラ:体格 = CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "体格"))
	TALENT:対象キャラ:体型 = CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "体型"))
	TALENT:対象キャラ:男性器サイズ = CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "男性器サイズ"))
	TALENT:対象キャラ:性別 = CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "性別"))
	CFLAG:対象キャラ:元性別保存 = TALENT:対象キャラ:性別
	TALENT:対象キャラ:処女 = CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "処女"))
	TALENT:対象キャラ:非童貞 = CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "非童貞"))
	;身長・体格決定
	IF !BASE:対象キャラ:身長 || !TALENT:対象キャラ:体格
		CALL INIT_BODYSIZE_HEIGHT(対象キャラ)
	ENDIF
	;ウエスト・体型決定
	IF !BASE:対象キャラ:ウエスト || !TALENT:対象キャラ:体型
		CALL INIT_BODYSIZE_WAIST(対象キャラ)
	ENDIF
	;バスト決定
	IF !BASE:対象キャラ:バスト || !TALENT:対象キャラ:バストサイズ
		CALL INIT_BODYSIZE_BUST(対象キャラ)
	ENDIF
	;ヒップ決定
	IF !BASE:対象キャラ:ヒップ || !TALENT:対象キャラ:下半身
		CALL INIT_BODYSIZE_HIP(対象キャラ)
	ENDIF
ENDIF

RETURN 0


@素質比較処理(対象キャラ, 動作モード)
#DIM 対象キャラ
#DIM 動作モード
#DIM 素質番号

IF 動作モード == 0
	;比較するだけ
	FOR 素質番号, 10, 155
		SIF GROUPMATCH(素質番号, 34, 73, 74, 75, 76, 133, 134, 135, 136, 138, 153)
			CONTINUE
		SIF TALENT:対象キャラ:素質番号 != CSVTALENT(NO:対象キャラ, 素質番号)
			RETURN 1
	NEXT
	FOR 素質番号, 220, VARSIZE("TALENT")
		SIF TALENT:対象キャラ:素質番号 != CSVTALENT(NO:対象キャラ, 素質番号)
			RETURN 1
	NEXT
ELSEIF 動作モード == -1
	;表示
	FOR 素質番号, 10, 155
		SIF GROUPMATCH(素質番号, 34, 73, 74, 75, 76, 133, 134, 135, 136, 138, 153)
			CONTINUE
		SIF TALENT:対象キャラ:素質番号 != CSVTALENT(NO:対象キャラ, 素質番号)
			PRINTFORML [%GET_TALENTNAME(素質番号, TALENT:対象キャラ:素質番号,,対象キャラ)%] > [%GET_TALENTNAME(素質番号, CSVTALENT(NO:対象キャラ, 素質番号),,対象キャラ)%]
	NEXT
	FOR 素質番号, 220, VARSIZE("TALENT")
		SIF TALENT:対象キャラ:素質番号 != CSVTALENT(NO:対象キャラ, 素質番号)
			PRINTFORML [%GET_TALENTNAME(素質番号, TALENT:対象キャラ:素質番号,,対象キャラ)%] > [%GET_TALENTNAME(素質番号, CSVTALENT(NO:対象キャラ, 素質番号),,対象キャラ)%]
	NEXT
ELSE
	;書き換える
	FOR 素質番号, 10, 155
		SIF GROUPMATCH(素質番号, 34, 73, 74, 75, 76, 133, 134, 135, 136, 138, 153)
			CONTINUE
		TALENT:対象キャラ:素質番号 = CSVTALENT(NO:対象キャラ, 素質番号)
	NEXT
	FOR 素質番号, 220, VARSIZE("TALENT")
		TALENT:対象キャラ:素質番号 = CSVTALENT(NO:対象キャラ, 素質番号)
	NEXT
ENDIF

RETURN 0


@知識素質比較処理(対象キャラ, 動作モード)
#DIM 対象キャラ
#DIM 動作モード
#DIM 素質番号
#DIM 素質記録, 100
#DIMS CSTR切り分け文字列格納, 2

VARSET LOCALS
VARSET RESULTS
VARSET 素質記録

;知識素質
SUBSTRING CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "知識素質設定")), 1, -1
SPLIT RESULTS, " ", LOCALS
LOCAL:2 = RESULT - 1
FOR LOCAL, 0, LOCAL:2
	SPLIT LOCALS:LOCAL, "Lv", CSTR切り分け文字列格納
	;CSTR切り分け文字列格納:0に素質名、CSTR切り分け文字列格納:1に数値が入っているはず
	素質記録:(GETNUM(知識素質, CSTR切り分け文字列格納:0)) = TOINT(CSTR切り分け文字列格納:1)
NEXT

IF 動作モード == 0
	;比較するだけ
	FOR 素質番号, 0, 100
		SIF 知識素質:対象キャラ:素質番号 != 素質記録:素質番号
			RETURN 1
	NEXT
ELSEIF 動作モード == -1
	;表示
	FOR 素質番号, 0, 100
		SIF 知識素質:対象キャラ:素質番号 != 素質記録:素質番号
			PRINTFORML %ERDNAME(知識素質, 素質番号)%：Lv{知識素質:対象キャラ:素質番号} > Lv{素質記録:素質番号}
	NEXT
ELSE
	;書き換える
	FOR 素質番号, 0, 100
		知識素質:対象キャラ:素質番号 = 素質記録:素質番号
	NEXT
	FOR 素質番号, 100, 200
		知識素質:対象キャラ:素質番号 = 0
	NEXT
ENDIF

RETURN 0


@性癖素質比較処理(対象キャラ, 動作モード)
#DIM 対象キャラ
#DIM 動作モード
#DIM 素質番号
#DIM 素質記録, 100
#DIMS CSTR切り分け文字列格納, 2
#DIMS CONST 強度表示 = "なし", "興味", "愛好", "中毒"

VARSET LOCALS
VARSET RESULTS
VARSET 素質記録

;知識素質
SUBSTRING CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "性癖素質設定")), 1, -1
SPLIT RESULTS, " ", LOCALS
LOCAL:2 = RESULT - 1
FOR LOCAL, 0, LOCAL:2
	SPLIT LOCALS:LOCAL, "Lv", CSTR切り分け文字列格納
	;CSTR切り分け文字列格納:0に素質名、CSTR切り分け文字列格納:1に数値が入っているはず
	素質記録:(GETNUM(性癖素質, CSTR切り分け文字列格納:0)) = TOINT(CSTR切り分け文字列格納:1)
NEXT

IF 動作モード == 0
	;比較するだけ
	FOR 素質番号, 1, 100
		SIF 性癖素質:対象キャラ:素質番号 != 素質記録:素質番号
			RETURN 1
	NEXT
ELSEIF 動作モード == -1
	;表示
	FOR 素質番号, 1, 100
		SIF 性癖素質:対象キャラ:素質番号 != 素質記録:素質番号
			PRINTFORML %ERDNAME(性癖素質, 素質番号)%：%強度表示:ABS(性癖素質:対象キャラ:素質番号)% > %強度表示:(素質記録:素質番号)%
	NEXT
ELSE
	;書き換える
	FOR 素質番号, 1, 100
		性癖素質:対象キャラ:素質番号 = 素質記録:素質番号
	NEXT
ENDIF

;性癖の設定
IF TALENT:対象キャラ:性愛傾向 == 3
	性癖素質:対象キャラ:同性愛 = 2
ENDIF

RETURN 0


@影響低い部分まとめて適用()
#DIM 対象キャラ
#DIM 得意武器記録
#DIMS CSTR切り分け文字列格納, 2

FOR 対象キャラ, 1, CHARANUM
	SIF NO:対象キャラ == 999
		CONTINUE

	NAME:対象キャラ = %CSVNAME(NO:対象キャラ)%
	CALLNAME:対象キャラ = %CSVCALLNAME(NO:対象キャラ)%
	; 画像フォルダ設定の修正
	CALL FIX_RESOURCES_FOLDER(対象キャラ)

	CSTR:対象キャラ:出演作品 = %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "出演作品"))%
	
	CSTR:対象キャラ:プレゼント好み = %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "プレゼント好み"))%

	VARSET CSTR切り分け文字列格納
	VARSET LOCALS
	VARSET RESULTS

	CSTR:対象キャラ:戦闘基礎ステータス設定 = %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "戦闘基礎ステータス設定"))%
	SUBSTRING CSTR:対象キャラ:戦闘基礎ステータス設定, 1, -1
	SPLIT RESULTS, " ", LOCALS
	;属性
	SPLIT LOCALS:0, "_", CSTR切り分け文字列格納
	基礎BATTLE_STATE:対象キャラ:属性 = 属性文字列数値変換(CSTR切り分け文字列格納:1)
	;得意武器
	SPLIT LOCALS:1, "_", CSTR切り分け文字列格納
	VARSET RESULTS
	SPLIT CSTR切り分け文字列格納:1, "・", RESULTS
	得意武器記録 = 0
	FOR LOCAL, 0, RESULT
		SETBIT 得意武器記録, 得意武器文字列数値変換(RESULTS:LOCAL)
	NEXT
	基礎BATTLE_STATE:対象キャラ:得意武器 = 得意武器記録
	;初期ステータス
	SPLIT LOCALS:2, "_", CSTR切り分け文字列格納
	CALL 初期ステータス設定_テンプレート適用(CSTR切り分け文字列格納:1, 対象キャラ)
	TRYCALLFORM 戦闘初期ステータス設定_{NO:対象キャラ}(対象キャラ)
	CALL レベルアップ処理(対象キャラ, 1)
	CALL 口上変数初期化

	FOR LOCAL, 0, 10
		CSTR:対象キャラ:(LOCAL + 80) = %CSVCSTR(NO:対象キャラ, LOCAL + 80)%
	NEXT

	FOR LOCAL, 0, VARSIZE("EQUIP")
		EQUIP:対象キャラ:LOCAL = CSVEQUIP(NO:対象キャラ, LOCAL)
	NEXT
	CSTR:対象キャラ:服名称 = %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "服名称"))%
	CSTR:対象キャラ:普段着解説 = %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "普段着解説"))%
	;年齢
	BASE:対象キャラ:年齢 = CSVBASE(NO:対象キャラ, GETNUM(BASE, "年齢"))
	IF BASE:対象キャラ:年齢 > 0
		TALENT:対象キャラ:年齢層 = 年齢層算出処理(BASE:対象キャラ:年齢)
	ELSE
		TALENT:対象キャラ:年齢層 = CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "年齢層"))
	ENDIF
	TALENT:対象キャラ:外見年齢 = CSVTALENT(NO:対象キャラ, GETNUM(TALENT, "外見年齢"))
	;奥義名設定
	CSTR:対象キャラ:表示奥義設定 '= CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "表示奥義設定"))
	CSTR:対象キャラ:陥落奥義設定 '= CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "陥落奥義設定"))
	VARSET LOCALS
	IF CSTR:対象キャラ:表示奥義設定 != ""
		SPLIT CSTR:対象キャラ:表示奥義設定, "_", LOCALS
		表示奥義:対象キャラ:0 '= LOCALS:0
		表示奥義:対象キャラ:1 '= LOCALS:1
		表示奥義:対象キャラ:2 '= LOCALS:2
	ENDIF
	VARSET LOCALS
	IF CSTR:対象キャラ:陥落奥義設定 != ""
		SPLIT CSTR:対象キャラ:陥落奥義設定, "_", LOCALS
		陥落奥義:対象キャラ:0 '= LOCALS:0
		陥落奥義:対象キャラ:1 '= LOCALS:1
		陥落奥義:対象キャラ:2 '= LOCALS:2
	ENDIF
NEXT
