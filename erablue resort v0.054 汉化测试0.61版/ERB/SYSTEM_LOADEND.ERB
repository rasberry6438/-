

;-------------------------------------------------------------------------------------------
;ロードの後に実行される一連の処理
;主にキャラのCSVが前回プレイから新たに増えた時など
;-------------------------------------------------------------------------------------------

@SYSTEM_LOADEND
#DIM 部屋セットチェック
#DIM 追加キャラ保存, 1000
#DIM L_C
#DIM F_NUM
#DIM 追加前キャラ数保存
#DIM CSV番号
#DIM 部屋番号
#DIM 得意武器記録
#DIM 対象キャラ
#DIM ループ番号

#DIMS 比較用一時保存配列, 1000
#DIMS 素材名分割用, 2
#DIMS 同行キャラ文字列一時保存
#DIMS CSTR切り分け文字列格納, 2
VARSET 比較用一時保存配列
VARSET 同時モード_選択キャラ, -1

VARSET 追加キャラ保存
LOCAL:1 = 0

ダンジョン表示モード = 


REDRAW 0
PRINTL 正在处理加载…


;CSVが存在しない場合のフォロー
FOR LOCAL, 0, CHARANUM
	SIF LOCAL >= CHARANUM
		BREAK
	IF !EXISTCSV(NO:LOCAL)
		FOR CSV番号, 1, キャラクタ数上限
			SIF !EXISTCSV(CSV番号)
				CONTINUE
			SIF CSV番号 == 999
				CONTINUE
			IF NAME:LOCAL == CSVNAME(CSV番号)
				;全く同じ名前のCSVがある場合
				IF GETCHARA(CSV番号) >= 0
					;流れとしては「CSVが存在しないキャラが先にいて、後からCSVのNOが変更されて
					;変更された後のNOのキャラが追加された」のはずなのでこっちを削除する
					DELCHARA GETCHARA(CSV番号)
				ENDIF
				NO:LOCAL = CSV番号
				BREAK
			ENDIF
		NEXT
		IF !EXISTCSV(NO:LOCAL)
				;ここまでCSVがないなら起動させない
				;THROW %NAME表示(LOCAL)%のCSVが存在しません。ゲームを終了します。
			;ここまでCSVがないなら仮のCSVファイル生成
			CLEARLINE LINECOUNT
			PRINTFORML 编号,{NO:LOCAL},
			PRINTFORML 姓名,%NAME表示(LOCAL)%
			PRINTFORML 昵称,%CALLNAME:LOCAL%,
			OUTPUTLOG @"CSV/キャラデータ/Chara{NO:LOCAL} %CALLNAME:LOCAL%.csv", 1
			CLEARLINE LINECOUNT
			PRINTFORMW 由于%NAME表示(LOCAL)%的CSV文件不存在，已在CSV/角色数据文件夹输出临时CSV文件
			LOCAL:1 ++
		ENDIF
	ENDIF
NEXT
SIF LOCAL:1
	THROW 由于存在缺少CSV文件的角色，游戏将终止。请重新启动游戏以重新读取CSV数据
追加前キャラ数保存 = CHARANUM

;CSVを全部読んでキャラがADDってなければADDる
FOR LOCAL, 1, キャラクタ数上限
	SIF !EXISTCSV(LOCAL)
		CONTINUE
	SIF LOCAL == 999
		CONTINUE
	SIF GETCHARA(LOCAL) >= 0
		CONTINUE
	ADDCHARA LOCAL
	CALL ADD_PERSON_FROM_CHARA(CHARANUM - 1)

NEXT

SIF 追加前キャラ数保存 != CHARANUM
	CALL コマンド存在チェック

FOR LOCAL, 追加前キャラ数保存, CHARANUM
	CALL キャラクター初期化(LOCAL)
NEXT

PRINTL 附加CSV检查完成
AWAIT

;ロード時処理
FOR LOCAL, 0, CHARANUM
	;初期加入状態なら加入させる
	SIF (CFLAG:LOCAL:招待不可フラグ == 1 || CFLAG:LOCAL:招待不可フラグ == 3) && GETBIT(OPTION変数:キャラ制限初期, 0)
		CFLAG:LOCAL:招待不可フラグ = 0
	SIF CFLAG:LOCAL:招待不可フラグ == 2 && GETBIT(OPTION変数:キャラ制限初期, 1)
		CFLAG:LOCAL:招待不可フラグ = 0

	TRYCALLFORM 口上側LOADENDパラメータ変更_{NO:LOCAL}
	SIF !BASE:LOCAL:身長
		CALL INIT_BODYSIZE(LOCAL)
	IF !RELATION_VAL:0:0 && LOCAL < 追加前キャラ数保存
		CALL INIT_RELATION(LOCAL)
	ENDIF

	;追加同行キャラチェック
	同行キャラ文字列一時保存 = %CSVCSTR(NO:LOCAL, GETNUM(CSTR, "同行キャラ"))%
	VARSET LOCALS
	REPLACE 同行キャラ文字列一時保存, " ", ""
	SPLIT RESULTS, "%", LOCALS
	LOCAL:2 = RESULT - 1
	FOR LOCAL:10, 0, LOCAL:2
		VARSET CSTR切り分け文字列格納
		SPLIT LOCALS:(LOCAL:10), "_", CSTR切り分け文字列格納
		CALL SET_RELATION(LOCAL, FINDCHARA(NAME, CSTR切り分け文字列格納:0), TOINT(CSTR切り分け文字列格納:1))
	NEXT
	LOCAL:10 = FINDELEMENT(同行候補キャラ番号:LOCAL:0, -1)
	IF LOCAL:10 >= 0
		;ミスって存在しないキャラが入ってるので削除
		ARRAYREMOVE 同行候補キャラ番号:LOCAL:0, LOCAL:10, 1
	ENDIF

	;追加初期関係性チェック
	IF CSTR:LOCAL:初期関係性 == "" && CSVCSTR(NO:LOCAL, GETNUM(CSTR, "初期関係性")) != ""
		CSTR:LOCAL:初期関係性 '= CSVCSTR(NO:LOCAL, GETNUM(CSTR, "初期関係性"))
		CALL 初期関係性データベース登録(LOCAL)
	ENDIF

	;固有ステータスチェック
	IF EXISTFUNCTION(@"戦闘初期ステータス設定_{NO:LOCAL}")
		;固有ステがあるのにステタイプが汎用なら修正
		IF 基礎BATTLE_STATE:LOCAL:ステータスタイプ保存 > -1
			CALLFORM 戦闘初期ステータス設定_{NO:LOCAL}(LOCAL)
			CALL レベルアップ処理(LOCAL, 1)
			CALL 口上変数初期化
		ENDIF
	ENDIF

	MAXBASE:LOCAL:警戒 = 1001

	;画像フォルダは有効？
	IF NO:LOCAL == 999
		IF CALLNAME:LOCAL == "ランダムキャラ"
			SPLIT NAME:LOCAL, "]", RESULTS
			CALLNAME:LOCAL '= RESULTS:1
		ENDIF
	ELSEIF NO:LOCAL == 0
		;あなたは触らない
	ELSE
		CALL FIX_RESOURCES_FOLDER(LOCAL)
	ENDIF
NEXT

PRINTL 同伴角色・固有属性・图片文件夹检查完成
AWAIT

SIF !RELATION_VAL:0:0
	RELATION_VAL:0:0 = 1
CALL 戦闘用データベースセット
CALL 戦闘時ツールチップ埋め込み_起動時処理
CALL シリーズ出典マップセット
CALL 従業員業務用マップセット
CALL 体位モードデータベースセット

ボタン化用カラーマトリクス:0:0 = 768,256,256,  0,  0
ボタン化用カラーマトリクス:1:0 = 256,768,256,  0,  0
ボタン化用カラーマトリクス:2:0 = 256,256,256,  0,  0
ボタン化用カラーマトリクス:3:0 =   0,  0,  0,256,  0
ボタン化用カラーマトリクス:4:0 =   0,  0,  0,  0,256

;初期所持服登録
LOCAL:1 = ENUMFUNCBEGINSWITH("CLOTHES_初期所持関数_")
IF LOCAL:1 > 0
	FOR LOCAL, 0, LOCAL:1
		CALLFORM %RESULTS:LOCAL%
	NEXT
ENDIF

;------------------------------------------------------------------------------------------
;旧セーブとの互換のために入れる処理
;------------------------------------------------------------------------------------------

;追加TALENT、追加CSTRのチェック
FOR LOCAL, 0, CHARANUM
	; FOR LOCAL:1, GAMEBASE_ALLOWVERSION, GAMEBASE_VERSION + 1
	; 	CALLFORM VERUP_{LOCAL:1}_CHARA(LOCAL)
	; NEXT
	CALLFORM VERUP_52_CHARA(LOCAL)
	CALLFORM VERUP_53_CHARA(LOCAL)
	CALLFORM VERUP_54_CHARA(LOCAL)
NEXT

FOR LOCAL:1, GAMEBASE_ALLOWVERSION, GAMEBASE_VERSION + 1
	; ;その他広域変数の書き換えなど
	; CALLFORM VERUP_{LOCAL:1}()
	; ;対応処理用フラグを対応済状態にセット
	; CALLFORM VERUP_{LOCAL:1}_FINISH()
	CALLFORM VERUP_52()
	CALLFORM VERUP_52_FINISH()
	CALLFORM VERUP_53()
	CALLFORM VERUP_53_FINISH()
	CALLFORM VERUP_54()
	CALLFORM VERUP_54_FINISH()
NEXT

;------------------------------------------------------------------------------------------
;ここまで互換のための処理
;------------------------------------------------------------------------------------------

PRINTL 旧存档数据兼容处理完成
AWAIT

CALL コマンド存在チェック()

;あなたの弱点チェック
FOR LOCAL:1, 0, 50
	;今現在設定されてない弱点枠には触らない
	SIF 弱点コマンド枠:MASTER:(LOCAL:1) == ""
		BREAK
	IF EXISTFUNCTION(@"COMTYPE_S_%弱点コマンド枠:MASTER:(LOCAL:1)%")
		SIF 弱点コマンド候補判定(MASTER, @"COMTYPE_S_%弱点コマンド枠:MASTER:(LOCAL:1)%") == 0
			弱点コマンド枠:MASTER:(LOCAL:1) = 
	ELSEIF EXISTFUNCTION(@"COMTYPE_%弱点コマンド枠:MASTER:(LOCAL:1)%")
		SIF 弱点コマンド候補判定(MASTER, @"COMTYPE_%弱点コマンド枠:MASTER:(LOCAL:1)%") == 0
			弱点コマンド枠:MASTER:(LOCAL:1) = 
	ELSE
		弱点コマンド枠:MASTER:(LOCAL:1) = 
	ENDIF
	;上を通って空っぽならランダムに入れ込む
	IF 弱点コマンド枠:MASTER:(LOCAL:1) == ""
		RESULTS = 
		CALL 弱点コマンドランダム選出(MASTER)
		弱点コマンド枠:MASTER:(LOCAL:1) = %RESULTS%
	ENDIF
NEXT

;スイートルーム関係おかしくなってないかチェック
FOR 部屋番号, 0, VARSIZE("スイートルーム部屋割り配列")
	VARSET RESULTS
	SPLIT スイートルーム部屋割り配列:部屋番号, "_", RESULTS
	;スイートルームは文字列的に1から読む
	FOR LOCAL, 1, RESULT
		SIF RESULTS:LOCAL == ""
			BREAK
		IF ISNUMERIC(RESULTS:LOCAL)
			IF CFLAG:(TOINT(RESULTS:LOCAL)):スイートルーム滞在フラグ - 100 != 部屋番号
				;部屋割りとフラグが一致してない場合は追い出す
				CFLAG:(TOINT(RESULTS:LOCAL)):スイートルーム滞在フラグ = 0
				スイートルーム部屋割り配列:部屋番号 '= REPLACE(スイートルーム部屋割り配列:部屋番号, @"_{TOINT(RESULTS:LOCAL)}_", "_")
				SIF スイートルーム部屋割り配列:部屋番号 == "_"
					スイートルーム部屋割り配列:部屋番号 = 
				;追い出されたキャラはこの後の部屋なしキャラチェックで正しく整備されるはず
			ENDIF
		ENDIF
	NEXT
NEXT

FOR 対象キャラ, 1, CHARANUM
	;キャラ体力再計算
	CALL 体力変動素質適用処理(対象キャラ)

	;弱点コマンドの設定がされているかどうかチェック
	CALL 弱点妥当性チェック(対象キャラ)

	;定住者が帰ってないかチェック
	SIF TALENT:対象キャラ:定住者 && CFLAG:対象キャラ:滞在期間 != 999
		CFLAG:対象キャラ:滞在期間 = 999

	;Lvがおかしくないかチェック
	IF 基礎BATTLE_STATE:対象キャラ:Lv < 1
		VARSET LOCALS
		VARSET RESULTS
		CSTR:対象キャラ:戦闘基礎ステータス設定 '= CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "戦闘基礎ステータス設定"))
		;戦闘ステータス
		SUBSTRING CSTR:対象キャラ:戦闘基礎ステータス設定, 1, -1
		SPLIT RESULTS, " ", LOCALS
		;属性
		SPLIT LOCALS:0, "_", CSTR切り分け文字列格納
		基礎BATTLE_STATE:対象キャラ:属性 = 属性文字列数値変換(CSTR切り分け文字列格納:1)
		;得意武器
		SPLIT LOCALS:1, "_", CSTR切り分け文字列格納
		VARSET RESULTS
		SPLIT CSTR切り分け文字列格納:1, "・", RESULTS
		得意武器記録 = 0
		FOR LOCAL, 0, RESULT
			SETBIT 得意武器記録, 得意武器文字列数値変換(RESULTS:LOCAL)
		NEXT
		基礎BATTLE_STATE:対象キャラ:得意武器 = 得意武器記録
		;初期ステータス
		SPLIT LOCALS:2, "_", CSTR切り分け文字列格納
		CALL 初期ステータス設定_テンプレート適用(CSTR切り分け文字列格納:1, 対象キャラ)
		TRYCALLFORM 戦闘初期ステータス設定_{NO:対象キャラ}(対象キャラ)
	ENDIF

	;招待不可の場合、CSVの変更を自動適用
	IF CFLAG:対象キャラ:招待不可フラグ > 0
		;同行キャラは別の場所で処理しているはずなので見ない
		NAME:対象キャラ = %CSVNAME(NO:対象キャラ)%
		CALLNAME:対象キャラ = %CSVCALLNAME(NO:対象キャラ)%
		CSTR:対象キャラ:出演作品 = %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "出演作品"))%
		CSTR:対象キャラ:プレゼント好み = %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "プレゼント好み"))%
		;CFLAG:対象キャラ:招待不可フラグ = CSVCFLAG(NO:対象キャラ, GETNUM(CFLAG, "招待不可フラグ"))

		IF EXISTFUNCTION(@"戦闘初期ステータス設定_{NO:対象キャラ}") == 0 && CSTR:対象キャラ:戦闘基礎ステータス設定 != CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "戦闘基礎ステータス設定"))
			VARSET CSTR切り分け文字列格納
			VARSET LOCALS
			VARSET RESULTS

			CSTR:対象キャラ:戦闘基礎ステータス設定 = %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "戦闘基礎ステータス設定"))%
			SUBSTRING CSTR:対象キャラ:戦闘基礎ステータス設定, 1, -1
			SPLIT RESULTS, " ", LOCALS
			;属性
			SPLIT LOCALS:0, "_", CSTR切り分け文字列格納
			基礎BATTLE_STATE:対象キャラ:属性 = 属性文字列数値変換(CSTR切り分け文字列格納:1)
			;得意武器
			SPLIT LOCALS:1, "_", CSTR切り分け文字列格納
			VARSET RESULTS
			SPLIT CSTR切り分け文字列格納:1, "・", RESULTS
			得意武器記録 = 0
			FOR ループ番号, 0, RESULT
				SETBIT 得意武器記録, 得意武器文字列数値変換(RESULTS:ループ番号)
			NEXT
			基礎BATTLE_STATE:対象キャラ:得意武器 = 得意武器記録
			
			SPLIT LOCALS:2, "_", CSTR切り分け文字列格納
			CALL 初期ステータス設定_テンプレート適用(CSTR切り分け文字列格納:1, 対象キャラ)
			TRYCALLFORM 戦闘初期ステータス設定_{NO:対象キャラ}(対象キャラ)
		ENDIF
		
		CALL 肉体情報比較処理(対象キャラ, 1)
		CALL 素質比較処理(対象キャラ, 1)
		CALL 知識素質比較処理(対象キャラ, 1)
		CALL 性癖素質比較処理(対象キャラ, 1)
		
		FOR ループ番号, 0, 10
			CSTR:対象キャラ:(ループ番号 + 80) = %CSVCSTR(NO:対象キャラ, ループ番号 + 80)%
		NEXT
		
		FOR ループ番号, 0, VARSIZE("ABL")
			ABL:対象キャラ:ループ番号 = CSVABL(NO:対象キャラ, ループ番号)
		NEXT
		
		FOR ループ番号, 0, VARSIZE("EXP")
			EXP:対象キャラ:ループ番号 = CSVEXP(NO:対象キャラ, ループ番号)
		NEXT
		
		FOR ループ番号, 0, VARSIZE("EQUIP")
			EQUIP:対象キャラ:ループ番号 = CSVEQUIP(NO:対象キャラ, ループ番号)
		NEXT

		CSTR:対象キャラ:服名称 = %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "服名称"))%
		CSTR:対象キャラ:普段着解説 = %CSVCSTR(NO:対象キャラ, GETNUM(CSTR, "普段着解説"))%
	ENDIF

	SIF CFLAG:対象キャラ:滞在期間 < 0
		CONTINUE

	CALL 部屋なしキャラチェック(対象キャラ)

	;この段階でデートは入らないはずなのでリセット
	CFLAG:対象キャラ:デート = 0

	;複数の部屋に入っちゃってないかチェック
	LOCAL:2 = 0
	IF TALENT:対象キャラ:定住者 == 0
		IF TALENT:対象キャラ:従業員
			FOR LOCAL:1, 0, 従業員部屋数
				IF 従業員部屋割り配列:(LOCAL:1) == 対象キャラ
					IF LOCAL:2
						従業員部屋割り配列:(LOCAL:1) = 0
					ELSE
						LOCAL:2 = 1
					ENDIF
				ENDIF
			NEXT
		ELSE
			FOR LOCAL:1, 0, 100
				IF 滞在者部屋割り配列:(LOCAL:1) == 対象キャラ
					IF LOCAL:2
						滞在者部屋割り配列:(LOCAL:1) = 0
					ELSE
						LOCAL:2 = 1
					ENDIF
				ENDIF
			NEXT
		ENDIF
	ELSEIF TALENT:対象キャラ:定住者 == 2
		FOR LOCAL:1, 0, VARSIZE("定住者部屋割り配列")
			SIF 定住者部屋割り配列:(LOCAL:1) == ""
				CONTINUE
			;部屋の居住者を見る
			IF STRFIND(定住者部屋割り配列:(LOCAL:1), @"_{対象キャラ}_") > -1
				定住者部屋割り配列:(LOCAL:1) = %REPLACE(定住者部屋割り配列:(LOCAL:1), @"_{対象キャラ}_", "_")%
				BREAK
			ELSEIF STRFIND(定住者部屋割り配列:(LOCAL:1), @"{対象キャラ}_") == 0
				定住者部屋割り配列:(LOCAL:1) = %SUBSTRING(定住者部屋割り配列:(LOCAL:1), STRLENS(@"{対象キャラ}_"), -1)%
				BREAK
			ENDIF
		NEXT
	ENDIF

	;スイートルーム関係おかしくなってないかチェック
	IF CFLAG:対象キャラ:スイートルーム滞在フラグ && STRFIND(スイートルーム部屋割り配列:(CFLAG:対象キャラ:スイートルーム滞在フラグ - 100), @"_{対象キャラ}_") == -1
		スイートルーム部屋割り配列:(CFLAG:対象キャラ:スイートルーム滞在フラグ - 100) '= REPLACE(スイートルーム部屋割り配列:(CFLAG:対象キャラ:スイートルーム滞在フラグ - 100), @"_{対象キャラ}_", "_")
		SIF スイートルーム部屋割り配列:(CFLAG:対象キャラ:スイートルーム滞在フラグ - 100) == "_"
			スイートルーム部屋割り配列:(CFLAG:対象キャラ:スイートルーム滞在フラグ - 100) = 
		CFLAG:対象キャラ:スイートルーム滞在フラグ = 0
	ENDIF
NEXT

PRINTL 角色整合性检查完成
AWAIT

;分身が入り込んでないかチェック
FOR LOCAL:1, 0, 従業員部屋数
	IF TALENT:(従業員部屋割り配列:(LOCAL:1)):従業員 < 1
		従業員部屋割り配列:(LOCAL:1) = 0
	ENDIF
	IF 従業員部屋割り配列:(LOCAL:1) >= CHARANUM
		従業員部屋割り配列:(LOCAL:1) = 0
	ENDIF
	IF 滞在者部屋割り配列:(LOCAL:1) >= CHARANUM
		滞在者部屋割り配列:(LOCAL:1) = 0
	ENDIF
NEXT

;ちゃんとPTメンバー全員いるかチェック
FOR LOCAL, 0, 14
	SIF LOCAL > 3 && LOCAL < 10
		CONTINUE
	IF CFLAG:(BATTLE_STATE:LOCAL:キャラ登録番号):滞在期間 < 0
		BATTLE_STATE:LOCAL:キャラ登録番号 = BATTLE_STATE:(LOCAL + 1):キャラ登録番号
		BATTLE_STATE:(LOCAL + 1):キャラ登録番号 = BATTLE_STATE:(LOCAL + 2):キャラ登録番号
		BATTLE_STATE:(LOCAL + 2):キャラ登録番号 = BATTLE_STATE:(LOCAL + 3):キャラ登録番号
		BATTLE_STATE:(LOCAL + 3):キャラ登録番号 = BATTLE_STATE:(LOCAL + 4):キャラ登録番号
	ENDIF
NEXT

;新しく素材アイテムが増えてないかチェック
CALL 素材アイテム登録処理

;あなたに縁結びないかどうかチェック
LOCAL:1 = DT_SELECT("関係性データベース", @"対象キャラ１ = {CFLAG:MASTER:人物番号} Or 対象キャラ２ = {CFLAG:MASTER:人物番号}")
IF LOCAL:1 > 0
	FOR LOCAL, 1, LOCAL:1 + 1
		DT_ROW_REMOVE "関係性データベース", RESULT:LOCAL
	NEXT
ENDIF
LOCAL:1 = DT_SELECT("縁結びデータベース", @"対象キャラ１ = {CFLAG:MASTER:人物番号} Or 対象キャラ２ = {CFLAG:MASTER:人物番号}")
IF LOCAL:1 > 0
	FOR LOCAL, 1, LOCAL:1 + 1
		DT_ROW_REMOVE "縁結びデータベース", RESULT:LOCAL
	NEXT
ENDIF


;念のため変数リセット
CALL TRAIN_VAR_RESET
CALL TURN_RESET
CALL 最大レベル算出保存
;ほぼ使用しない配列内の数値として初期値8をセット
戦闘行動キャラ = 8

;初期値セット
SIF メンバーリスト表示欄:1 == ""
	メンバーリスト表示欄:1 = Ｌｖ
SIF メンバーリスト表示欄:2 == ""
	メンバーリスト表示欄:2 = 属性
SIF メンバーリスト表示欄:3 == ""
	メンバーリスト表示欄:3 = 固有

;ログボ処理
LOCAL = GETSECOND() / 3600
;日単位
LOCAL:1 = (LOCAL + 19) / 24

PRINTL 其他加载处理完成

REDRAW 1

IF (REAL_TIME < LOCAL:1)
	REAL_TIME = LOCAL:1
	CALL ログインボーナス処理
ENDIF

SIF EXシナリオ解放記録 == ""
	EXシナリオ解放記録 = ___
CALL イベント追加チェック
CALL イベント削除チェック
IF SAVESTR:ゲームフェイズ管理 == ""
	CALL イベント発生条件チェック
ENDIF
CALL 複数人一枚絵_組み合わせ登録処理


@弱点妥当性チェック(対象キャラ)
#DIM 対象キャラ
#DIMS 弱点一時保存, 50
#DIM 弱点番号

VARSET 弱点一時保存
IF EXISTFUNCTION(@"弱点コマンド変更_{NO:対象キャラ}")
	FOR 弱点番号, 0, 50
		弱点一時保存:弱点番号 = %弱点コマンド枠:対象キャラ:弱点番号%
	NEXT
	VARSET 弱点コマンド枠:対象キャラ:0
	TRYCALLFORM 弱点コマンド変更_{NO:対象キャラ}
	FOR 弱点番号, 0, 50
		IF 弱点コマンド枠:対象キャラ:弱点番号 == "-1" || 弱点コマンド枠:対象キャラ:弱点番号 == ""
			;口上で指定されてないのを入れ込む場合、有効な弱点かどうか見る
			IF EXISTFUNCTION(@"COMTYPE_S_%弱点一時保存:弱点番号%")
				SIF 弱点コマンド候補判定(対象キャラ, @"COMTYPE_S_%弱点一時保存:弱点番号%")
					弱点コマンド枠:対象キャラ:弱点番号 = %弱点一時保存:弱点番号%
			ELSEIF EXISTFUNCTION(@"COMTYPE_%弱点一時保存:弱点番号%")
				SIF 弱点コマンド候補判定(対象キャラ, @"COMTYPE_%弱点一時保存:弱点番号%")
					弱点コマンド枠:対象キャラ:弱点番号 = %弱点一時保存:弱点番号%
			ELSE
				弱点コマンド枠:対象キャラ:弱点番号 = 
			ENDIF
			;上を通って空っぽ、あるいはランダム指定ならランダムに入れ込む
			IF 弱点コマンド枠:対象キャラ:弱点番号 == "-1" || (弱点コマンド枠:対象キャラ:弱点番号 == "" && 弱点番号 <= 5)
				RESULTS = 
				CALL 弱点コマンドランダム選出(対象キャラ)
				弱点コマンド枠:対象キャラ:弱点番号 = %RESULTS%
			ENDIF
		ENDIF
	NEXT
ELSE
	;弱点の口上設定がない場合、有効な弱点かどうかだけ見る
	FOR 弱点番号, 0, 50
		;今現在設定されてない弱点枠には触らない
		SIF 弱点コマンド枠:対象キャラ:弱点番号 == ""
			BREAK
		IF EXISTFUNCTION(@"COMTYPE_S_%弱点コマンド枠:対象キャラ:弱点番号%")
			SIF 弱点コマンド候補判定(対象キャラ, @"COMTYPE_S_%弱点コマンド枠:対象キャラ:弱点番号%") == 0
				弱点コマンド枠:対象キャラ:弱点番号 = 
		ELSEIF EXISTFUNCTION(@"COMTYPE_%弱点コマンド枠:対象キャラ:弱点番号%")
			SIF 弱点コマンド候補判定(対象キャラ, @"COMTYPE_%弱点コマンド枠:対象キャラ:弱点番号%") == 0
				弱点コマンド枠:対象キャラ:弱点番号 = 
		ELSE
			弱点コマンド枠:対象キャラ:弱点番号 = 
		ENDIF
		;上を通って空っぽならランダムに入れ込む
		IF 弱点コマンド枠:対象キャラ:弱点番号 == ""
			RESULTS = 
			CALL 弱点コマンドランダム選出(対象キャラ)
			弱点コマンド枠:対象キャラ:弱点番号 = %RESULTS%
		ENDIF
	NEXT
ENDIF


