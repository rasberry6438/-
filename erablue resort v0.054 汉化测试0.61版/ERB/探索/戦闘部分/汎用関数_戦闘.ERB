@キャラ隊列検索(ARG)
#FUNCTION
FOR LOCAL, 0, 14
	SIF LOCAL > 3 && LOCAL < 10
		CONTINUE
	IF BATTLE_STATE:LOCAL:キャラ登録番号 == ARG
		RETURNF LOCAL
	ENDIF
NEXT
RETURNF -1

@最大レベル算出()
#FUNCTION
LOCAL:1 = 0
FOR LOCAL, 0, CHARANUM
	IF 基礎BATTLE_STATE:LOCAL:Lv > LOCAL:1
		LOCAL:1 = 基礎BATTLE_STATE:LOCAL:Lv
	ENDIF
NEXT
RETURNF LOCAL:1

@属性文字列数値変換(ARGS)
#FUNCTION

SELECTCASE ARGS
	CASE "火"
		RETURNF 0
	CASE "水"
		RETURNF 1
	CASE "風"
		RETURNF 2
	CASE "土"
		RETURNF 3
	CASE "光"
		RETURNF 4
	CASE "闇"
		RETURNF 5
	CASE "無"
		RETURNF 6
ENDSELECT

@属性数値文字列変換(ARG)
#FUNCTIONS

SELECTCASE ARG
	CASE 0
		RETURNF "火"
	CASE 1
		RETURNF "水"
	CASE 2
		RETURNF "風"
	CASE 3
		RETURNF "土"
	CASE 4
		RETURNF "光"
	CASE 5
		RETURNF "闇"
	CASE 6
		RETURNF "無"
ENDSELECT

@有利属性変換(ARG)
#FUNCTION

SELECTCASE ARG
	CASE 0
		RETURNF 2
	CASE 1
		RETURNF 0
	CASE 2
		RETURNF 3
	CASE 3
		RETURNF 1
	CASE 4
		RETURNF 5
	CASE 5
		RETURNF 4
	CASE 6
		RETURNF 6
ENDSELECT

@不利属性変換(ARG)
#FUNCTION

SELECTCASE ARG
	CASE 0
		RETURNF 1
	CASE 1
		RETURNF 3
	CASE 2
		RETURNF 0
	CASE 3
		RETURNF 2
	CASE 4
		RETURNF 5
	CASE 5
		RETURNF 4
	CASE 6
		RETURNF 6
ENDSELECT

@得意武器文字列数値変換(ARGS)
#FUNCTION

SELECTCASE ARGS
	CASE "剣"
		RETURNF 0
	CASE "短剣"
		RETURNF 1
	CASE "槍"
		RETURNF 2
	CASE "斧"
		RETURNF 3
	CASE "杖"
		RETURNF 4
	CASE "銃"
		RETURNF 5
	CASE "格闘"
		RETURNF 6
	CASE "弓"
		RETURNF 7
	CASE "楽器"
		RETURNF 8
	CASE "刀"
		RETURNF 9
ENDSELECT

@得意武器数値文字列変換(ARG)
#FUNCTIONS

SELECTCASE ARG
	CASE 0
		RETURNF "剣"
	CASE 1
		RETURNF "短剣"
	CASE 2
		RETURNF "槍"
	CASE 3
		RETURNF "斧"
	CASE 4
		RETURNF "杖"
	CASE 5
		RETURNF "銃"
	CASE 6
		RETURNF "格闘"
	CASE 7
		RETURNF "弓"
	CASE 8
		RETURNF "楽器"
	CASE 9
		RETURNF "刀"
ENDSELECT

@得意武器表示文字列(得意数値)
#FUNCTIONS
#DIM 得意数値

LOCALS = 
LOCAL:1 = 0
FOR LOCAL, 0, 10
	IF GETBIT(得意数値, LOCAL)
		SIF LOCAL:1
			LOCALS += "・"
		SELECTCASE LOCAL
			CASE 0
				LOCALS += "剣"
			CASE 1
				LOCALS += "短剣"
			CASE 2
				LOCALS += "槍"
			CASE 3
				LOCALS += "斧"
			CASE 4
				LOCALS += "杖"
			CASE 5
				LOCALS += "銃"
			CASE 6
				LOCALS += "格闘"
			CASE 7
				LOCALS += "弓"
			CASE 8
				LOCALS += "楽器"
			CASE 9
				LOCALS += "刀"
		ENDSELECT
		LOCAL:1 ++
	ENDIF
NEXT

RETURNF LOCALS

@タイプ数値文字列変換(ARG)
#FUNCTIONS

SELECTCASE ARG
	CASE -1
		RETURNF "固有"
	CASE 0
		RETURNF "バランス"
	CASE 1
		RETURNF "攻撃"
	CASE 2
		RETURNF "防御"
	CASE 3
		RETURNF "回復"
	CASE 4
		RETURNF "サポート"
	CASE 5
		RETURNF "連撃"
	CASE 6
		RETURNF "回避"
	CASE 7
		RETURNF "奥義"
ENDSELECT

@タイプ文字列数値変換(ARGS)
#FUNCTION

SELECTCASE ARGS
	CASE "固有"
		RETURNF -1
	CASE "バランス"
		RETURNF 0
	CASE "攻撃"
		RETURNF 1
	CASE "防御"
		RETURNF 2
	CASE "回復"
		RETURNF 3
	CASE "サポート"
		RETURNF 4
	CASE "連撃"
		RETURNF 5
	CASE "回避"
		RETURNF 6
	CASE "奥義"
		RETURNF 7
ENDSELECT


@属性数値文字色変換(ARG)
#FUNCTION
#DIMS 属性文字列

SELECTCASE ARG
	CASE 0 TO 5
		RETURNF カラーパレット(属性数値文字列変換(ARG) + "属性")
	CASEELSE
		RETURNF カラーパレット("無属性")
ENDSELECT


@属性数値文字色変換_透明度込(ARG)
#FUNCTION
#DIMS 属性文字列

SELECTCASE ARG
	CASE 0 TO 5
		RETURNF カラーパレット_透明度込(属性数値文字列変換(ARG) + "属性")
	CASEELSE
		RETURNF カラーパレット_透明度込("無属性")
ENDSELECT


@属性数値文字色変換_HTML(ARG)
#FUNCTIONS
#DIMS 属性文字列

SELECTCASE ARG
	CASE 0 TO 5
		RETURNF カラーパレット_HTML(属性数値文字列変換(ARG) + "属性")
	CASEELSE
		RETURNF カラーパレット_HTML("無属性")
ENDSELECT


@属性有利不利(攻撃側, 防御側, ARGS)
#FUNCTION
#DIM 攻撃側
#DIM 防御側

SELECTCASE 攻撃側
	CASE 0
		;火
		IF 防御側 == 2
			RETURNF 1
		ELSEIF 防御側 == 1
			RETURNF -1
		ENDIF
	CASE 1
		;水
		IF 防御側 == 0
			RETURNF 1
		ELSEIF 防御側 == 3
			RETURNF -1
		ENDIF
	CASE 2
		;風
		IF 防御側 == 3
			RETURNF 1
		ELSEIF 防御側 == 0
			RETURNF -1
		ENDIF
	CASE 3
		;土
		IF 防御側 == 1
			RETURNF 1
		ELSEIF 防御側 == 2
			RETURNF -1
		ENDIF
	CASE 4
		;光
		IF 防御側 == 5
			IF ARGS == "味方側"
				RETURNF 1
			ELSEIF ARGS == "敵側"
				RETURNF -1
			ENDIF
		ENDIF
	CASE 5
		;闇
		IF 防御側 == 4
			IF ARGS == "味方側"
				RETURNF 1
			ELSEIF ARGS == "敵側"
				RETURNF -1
			ENDIF
		ENDIF
ENDSELECT

RETURNF 0


@バフ・デバフ効果タイプ(バフ・デバフ種類)
#FUNCTION
#DIMS バフ・デバフ種類
;--------------------------------------------------------------------
; bit 0: 効果量を無視する
; bit 1: 効果割合を無視する
; bit 2: 効果枠を無視する(そんなのはないはず)
;--------------------------------------------------------------------
IF GETNUM(BATTLE_STATE, バフ・デバフ種類, 2) > 0
	RETURNF 0
ELSEIF バフ・デバフ種類 == "連続攻撃率"
	RETURNF 1p1
ELSEIF バフ・デバフ種類 == "暗闇"
	RETURNF 1p0
ELSEIF バフ・デバフ種類 == "最大ＣＴ増加"
	RETURNF 1p1
ELSEIF GROUPMATCH(バフ・デバフ種類, "全強化", "全耐性")
	RETURNF 1p1
ELSEIF REGEXPMATCH(バフ・デバフ種類, "^状態異常耐性_.*$") > 0
	RETURNF 1p1
ENDIF
RETURNF 0


@バフ・デバフ測定(観測隊列, バフ・デバフ種類, 補正前数値, 観測のみフラグ = 0)
;--------------------------------------------------------------------
;持続回数を減少する処理も入れ込んでいるので、実処理時以外はちゃんと観測のみフラグを立てること
;補正前数値を使うのは補正前の数値を取ることが出来ないダメージ・回復関係の処理のみ
;--------------------------------------------------------------------
#DIMS バフ・デバフ種類
#DIM 観測隊列
#DIM データベース行数
#DIM バフ・デバフ補正後数値
#DIM ループ用
#DIM 補正前数値
#DIM 観測のみフラグ
VARSET LOCAL
バフ・デバフ補正後数値 = 0

IF GETNUM(BATTLE_STATE, バフ・デバフ種類, 2) > 0
	FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
		IF バフ・デバフ効果適用判定_行指定(ループ用, "ALL", バフ・デバフ種類, 観測隊列)
			IF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "バフ"
				LOCAL += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
				LOCAL:1 += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL += 付随依存変動算出(ループ用, 観測隊列, "割合")
					LOCAL:1 += 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ELSEIF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "デバフ"
				LOCAL -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
				LOCAL:1 -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL -= 付随依存変動算出(ループ用, 観測隊列, "割合")
					LOCAL:1 -= 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ENDIF
		ENDIF
	NEXT
	IF 観測のみフラグ == 0
		;回数持続の効果の回数を減少
		CALL バフ回数経過処理(観測隊列, バフ・デバフ種類)
		CALL デバフ回数経過処理(観測隊列, バフ・デバフ種類)
	ENDIF
	IF 観測隊列 < 10
		;味方側
		バフ・デバフ補正後数値 = (BATTLE_STATE:観測隊列:バフ・デバフ種類 * (100 + LOCAL) / 100) + LOCAL:1
		;最低でも通常数値の半分まで
		バフ・デバフ補正後数値 = MAX(BATTLE_STATE:観測隊列:バフ・デバフ種類 / 2, バフ・デバフ補正後数値)
	ELSE
		;敵側
		バフ・デバフ補正後数値 = (敵BATTLE_STATE:(観測隊列 - 10):バフ・デバフ種類 * (100 + LOCAL) / 100) + LOCAL:1
		;最低でも通常数値の半分まで
		バフ・デバフ補正後数値 = MAX(敵BATTLE_STATE:(観測隊列 - 10):バフ・デバフ種類 / 2, バフ・デバフ補正後数値)
	ENDIF
ELSEIF バフ・デバフ種類 == "連続攻撃率"
	;連撃率はステータスになく、かつDA率TA率と基本的に加算するので基本値を無視して補正値のみ
	FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
		IF バフ・デバフ効果適用判定_行指定(ループ用, "ALL", バフ・デバフ種類, 観測隊列)
			IF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "バフ"
				LOCAL:1 += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL:1 += 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ELSEIF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "デバフ"
				LOCAL:1 -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL:1 -= 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ENDIF
		ENDIF
	NEXT
	IF 観測のみフラグ == 0
		;回数持続の効果の回数を減少
		CALL バフ回数経過処理(観測隊列, "連続攻撃率")
		CALL デバフ回数経過処理(観測隊列, "連続攻撃率")
	ENDIF
	;処理の関係上、割合を無視して固定値のみ
	バフ・デバフ補正後数値 = LOCAL:1
ELSEIF バフ・デバフ種類 == "与ダメージ"
	FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
		IF バフ・デバフ効果適用判定_行指定(ループ用, "ALL", バフ・デバフ種類, 観測隊列)
			IF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "バフ"
				LOCAL += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
				LOCAL:1 += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL += 付随依存変動算出(ループ用, 観測隊列, "割合")
					LOCAL:1 += 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ELSEIF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "デバフ"
				LOCAL -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
				LOCAL:1 -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL -= 付随依存変動算出(ループ用, 観測隊列, "割合")
					LOCAL:1 -= 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ENDIF
		ENDIF
	NEXT
	IF 観測のみフラグ == 0
		;回数持続の効果の回数を減少
		CALL バフ回数経過処理(観測隊列, "与ダメージ")
		CALL デバフ回数経過処理(観測隊列, "与ダメージ")
	ENDIF
	IF LOCAL <= -100
		;100%以上減少した時、固定値の与ダメージバフ・デバフも無効化される
		LOCAL = -100
		LOCAL:1 = 0
	ENDIF
	バフ・デバフ補正後数値 = (補正前数値 * (100 + LOCAL) / 100) + LOCAL:1
ELSEIF バフ・デバフ種類 == "被ダメージ"
	FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
		IF バフ・デバフ効果適用判定_行指定(ループ用, "ALL", バフ・デバフ種類, 観測隊列)
			IF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "バフ"
				LOCAL += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
				LOCAL:1 += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL += 付随依存変動算出(ループ用, 観測隊列, "割合")
					LOCAL:1 += 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ELSEIF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "デバフ"
				LOCAL -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
				LOCAL:1 -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL -= 付随依存変動算出(ループ用, 観測隊列, "割合")
					LOCAL:1 -= 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ENDIF
		ENDIF
	NEXT
	IF 観測のみフラグ == 0
		;回数持続の効果の回数を減少
		CALL バフ回数経過処理(観測隊列, "被ダメージ")
		CALL デバフ回数経過処理(観測隊列, "被ダメージ")
	ENDIF
	IF LOCAL >= 100
		;100%以上カットした時、固定値の被ダメージバフ・デバフも無効化される
		LOCAL = 100
		LOCAL:1 = 0
	ENDIF
	バフ・デバフ補正後数値 = (補正前数値 * (100 - LOCAL) / 100) - LOCAL:1
ELSEIF バフ・デバフ種類 == "テンション"
	FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
		IF バフ・デバフ効果適用判定_行指定(ループ用, "ALL", バフ・デバフ種類, 観測隊列)
			IF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "バフ"
				LOCAL += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL += 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ELSEIF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "デバフ"
				LOCAL -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL -= 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ENDIF
		ENDIF
	NEXT
	IF 観測のみフラグ == 0
		;回数持続の効果の回数を減少
		CALL バフ回数経過処理(観測隊列, "テンション")
	ENDIF
	SELECTCASE LOCAL
		CASE 1
			バフ・デバフ補正後数値 = 110
		CASE 2
			バフ・デバフ補正後数値 = 130
		CASE 3
			バフ・デバフ補正後数値 = 160
		CASEELSE
			IF LOCAL >= 4
				バフ・デバフ補正後数値 = 200
			ELSE
				バフ・デバフ補正後数値 = 100
			ENDIF
	ENDSELECT
ELSEIF バフ・デバフ種類 == "ストレングス"
	FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
		IF バフ・デバフ効果適用判定_行指定(ループ用, "ALL", バフ・デバフ種類, 観測隊列)
			IF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "バフ"
				LOCAL += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL += 付随依存変動算出(ループ用, 観測隊列, "割合")
				ENDIF
			ELSEIF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "デバフ"
				LOCAL -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL -= 付随依存変動算出(ループ用, 観測隊列, "割合")
				ENDIF
			ENDIF
		ENDIF
	NEXT
	IF 観測のみフラグ == 0
		;回数持続の効果の回数を減少
		CALL バフ回数経過処理(観測隊列, "ストレングス")
	ENDIF
	IF LOCAL > 0
		バフ・デバフ補正後数値 = (((BATTLE_STATE:観測隊列:ＨＰ * 200 / BATTLE_STATE:観測隊列:最大ＨＰ + 100) * (LOCAL/3) / 100) + 100)
	ELSE
		バフ・デバフ補正後数値 = 100
	ENDIF
ELSEIF バフ・デバフ種類 == "逆境"
	FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
		IF バフ・デバフ効果適用判定_行指定(ループ用, "ALL", バフ・デバフ種類, 観測隊列)
			IF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "バフ"
				LOCAL += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL += 付随依存変動算出(ループ用, 観測隊列, "割合")
				ENDIF
			ELSEIF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "デバフ"
				LOCAL -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL -= 付随依存変動算出(ループ用, 観測隊列, "割合")
				ENDIF
			ENDIF
		ENDIF
	NEXT
	IF 観測のみフラグ == 0
		;回数持続の効果の回数を減少
		CALL バフ回数経過処理(観測隊列, "逆境")
	ENDIF
	IF LOCAL > 0
		バフ・デバフ補正後数値 = ((((BATTLE_STATE:観測隊列:最大ＨＰ - BATTLE_STATE:観測隊列:ＨＰ) * 200 / BATTLE_STATE:観測隊列:最大ＨＰ + 100) * (LOCAL/3) / 100) + 100)
	ELSE
		バフ・デバフ補正後数値 = 100
	ENDIF
ELSEIF バフ・デバフ種類 == "暗闇"
	FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
		IF バフ・デバフ効果適用判定_行指定(ループ用, "デバフ", バフ・デバフ種類, 観測隊列)
			バフ・デバフ補正後数値 = DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
			IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
				バフ・デバフ補正後数値 += 付随依存変動算出(ループ用, 観測隊列, "割合")
			ENDIF
			BREAK
		ENDIF
	NEXT
	IF 観測のみフラグ == 0
		;回数持続の効果の回数を減少
		CALL デバフ回数経過処理(観測隊列, "暗闇")
	ENDIF
ELSEIF バフ・デバフ種類 == "最大ＣＴ増加"
	FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
		IF バフ・デバフ効果適用判定_行指定(ループ用, "デバフ", バフ・デバフ種類, 観測隊列)
			バフ・デバフ補正後数値 = DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
			IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
				バフ・デバフ補正後数値 += 付随依存変動算出(ループ用, 観測隊列, "固定値")
			ENDIF
			BREAK
		ENDIF
	NEXT
	IF 観測のみフラグ == 0
		;回数持続の効果の回数を減少
		CALL デバフ回数経過処理(観測隊列, "最大ＣＴ増加")
	ENDIF
ELSEIF GROUPMATCH(バフ・デバフ種類, "全強化", "全耐性")
	;全強化・全耐性はステータスになく、かつ属性強化・属性耐性と基本的に加算するので基本値を無視して補正値のみ
	FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
		IF バフ・デバフ効果適用判定_行指定(ループ用, "ALL", バフ・デバフ種類, 観測隊列)
			IF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "バフ"
				LOCAL:1 += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL:1 += 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ELSEIF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "デバフ"
				LOCAL:1 -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL:1 -= 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ENDIF
		ENDIF
	NEXT
	IF 観測のみフラグ == 0
		;回数持続の効果の回数を減少
		CALL バフ回数経過処理(観測隊列, バフ・デバフ種類)
		CALL デバフ回数経過処理(観測隊列, バフ・デバフ種類)
	ENDIF
	;処理の関係上、割合を無視して固定値のみ
	バフ・デバフ補正後数値 = LOCAL:1
ELSEIF GROUPMATCH(バフ・デバフ種類, "ダメージ補正_通常攻撃ダメージ", "ダメージ補正_奥義ダメージ", "ダメージ補正_チェンバダメージ")
	;通常攻撃、奥義、チェインバーストは個別
	FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
		IF バフ・デバフ効果適用判定_行指定(ループ用, "バフ", バフ・デバフ種類, 観測隊列)
			LOCAL += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
			LOCAL:1 += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
			IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
				LOCAL += 付随依存変動算出(ループ用, 観測隊列, "割合")
				LOCAL:1 += 付随依存変動算出(ループ用, 観測隊列, "固定値")
			ENDIF
		ENDIF
	NEXT
	IF 観測のみフラグ == 0
		;回数持続の効果の回数を減少
		CALL バフ回数経過処理(観測隊列, バフ・デバフ種類)
	ENDIF
	IF LOCAL <= -100
		;100%以上減少した時、固定値のダメージ補正バフ・デバフも無効化される
		LOCAL = -100
		LOCAL:1 = 0
	ENDIF
	バフ・デバフ補正後数値 = (補正前数値 * (100 + LOCAL) / 100) + LOCAL:1
ELSEIF REGEXPMATCH(バフ・デバフ種類, "^ダメージ補正_.*$") > 0
	;その他はアビリティダメージ扱いとし、アビリティダメージ補正も加える
	FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
		IF バフ・デバフ効果適用判定_行指定(ループ用, "バフ", バフ・デバフ種類, 観測隊列)
			LOCAL += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
			LOCAL:1 += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
			IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
				LOCAL += 付随依存変動算出(ループ用, 観測隊列, "割合")
				LOCAL:1 += 付随依存変動算出(ループ用, 観測隊列, "固定値")
			ENDIF
		ELSEIF バフ・デバフ効果適用判定_行指定(ループ用, "バフ", "ダメージ補正_アビリティダメージ", 観測隊列)
			LOCAL += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
			LOCAL:1 += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
			IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
				LOCAL += 付随依存変動算出(ループ用, 観測隊列, "割合")
				LOCAL:1 += 付随依存変動算出(ループ用, 観測隊列, "固定値")
			ENDIF
		ENDIF
	NEXT
	IF 観測のみフラグ == 0
		;回数持続の効果の回数を減少
		CALL バフ回数経過処理(観測隊列, バフ・デバフ種類)
		IF バフ・デバフ種類 != "ダメージ補正_アビリティダメージ"
			CALL バフ回数経過処理(観測隊列, "ダメージ補正_アビリティダメージ")
		ENDIF
	ENDIF
	IF LOCAL <= -100
		;100%以上減少した時、固定値の与ダメージバフ・デバフも無効化される
		LOCAL = -100
		LOCAL:1 = 0
	ENDIF
	バフ・デバフ補正後数値 = (補正前数値 * (100 + LOCAL) / 100) + LOCAL:1
ELSEIF REGEXPMATCH(バフ・デバフ種類, "^状態異常耐性_.*$") > 0
	;状態異常耐性はステータスになく、かつ弱体耐性と基本的に加算するので基本値を無視して補正値のみ
	FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
		IF バフ・デバフ効果適用判定_行指定(ループ用, "ALL", バフ・デバフ種類, 観測隊列)
			IF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "バフ"
				LOCAL:1 += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL:1 += 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ELSEIF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "デバフ"
				LOCAL:1 -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL:1 -= 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ENDIF
		ENDIF
	NEXT
	IF 観測のみフラグ == 0
		;回数持続の効果の回数を減少
		CALL バフ回数経過処理(観測隊列, バフ・デバフ種類)
		CALL デバフ回数経過処理(観測隊列, バフ・デバフ種類)
	ENDIF
	;処理の関係上、割合を無視して固定値のみ
	バフ・デバフ補正後数値 = LOCAL:1
ELSEIF バフ・デバフ種類 == "通常攻撃_ゲージ上昇率"
	FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
		IF バフ・デバフ効果適用判定_行指定(ループ用, "ALL", バフ・デバフ種類, 観測隊列)
			IF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "バフ"
				LOCAL += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
				LOCAL:1 += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL += 付随依存変動算出(ループ用, 観測隊列, "割合")
					LOCAL:1 += 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ELSEIF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "デバフ"
				LOCAL -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
				LOCAL:1 -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL -= 付随依存変動算出(ループ用, 観測隊列, "割合")
					LOCAL:1 -= 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ENDIF
		ENDIF
	NEXT
	バフ・デバフ補正後数値 = (補正前数値 * (100 + LOCAL) / 100) + LOCAL:1
	IF 観測のみフラグ == 0
		;回数持続の効果の回数を減少
		CALL デバフ回数経過処理(観測隊列, "通常攻撃_ゲージ上昇率")
	ENDIF
ELSEIF REGEXPMATCH(バフ・デバフ種類, "^属性与ダメージ_.*") > 0
	FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
		IF バフ・デバフ効果適用判定_行指定(ループ用, "ALL", バフ・デバフ種類, 観測隊列)
			IF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "バフ"
				LOCAL += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
				LOCAL:1 += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL += 付随依存変動算出(ループ用, 観測隊列, "割合")
					LOCAL:1 += 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ELSEIF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "デバフ"
				LOCAL -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
				LOCAL:1 -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL -= 付随依存変動算出(ループ用, 観測隊列, "割合")
					LOCAL:1 -= 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ENDIF
		ENDIF
	NEXT
	IF 観測のみフラグ == 0
		;回数持続の効果の回数を減少
		CALL バフ回数経過処理(観測隊列, バフ・デバフ種類)
		CALL デバフ回数経過処理(観測隊列, バフ・デバフ種類)
	ENDIF
	IF LOCAL <= -100
		;100%以上減少した時、固定値の与ダメージバフ・デバフも無効化される
		LOCAL = -100
		LOCAL:1 = 0
	ENDIF
	バフ・デバフ補正後数値 = (補正前数値 * (100 + LOCAL) / 100) + LOCAL:1
ELSEIF REGEXPMATCH(バフ・デバフ種類, "^属性被ダメージ_.*") > 0
	FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
		IF バフ・デバフ効果適用判定_行指定(ループ用, "ALL", バフ・デバフ種類, 観測隊列)
			IF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "バフ"
				LOCAL += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
				LOCAL:1 += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL += 付随依存変動算出(ループ用, 観測隊列, "割合")
					LOCAL:1 += 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ELSEIF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "デバフ"
				LOCAL -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
				LOCAL:1 -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL -= 付随依存変動算出(ループ用, 観測隊列, "割合")
					LOCAL:1 -= 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ENDIF
		ENDIF
	NEXT
	IF 観測のみフラグ == 0
		;回数持続の効果の回数を減少
		CALL バフ回数経過処理(観測隊列, バフ・デバフ種類)
		CALL デバフ回数経過処理(観測隊列, バフ・デバフ種類)
	ENDIF
	IF LOCAL >= 100
		;100%以上カットした時、固定値の被ダメージバフ・デバフも無効化される
		LOCAL = 100
		LOCAL:1 = 0
	ENDIF
	バフ・デバフ補正後数値 = (補正前数値 * (100 - LOCAL) / 100) - LOCAL:1
ELSEIF バフ・デバフ種類 == "与回復量"
	FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
		IF バフ・デバフ効果適用判定_行指定(ループ用, "ALL", バフ・デバフ種類, 観測隊列)
			IF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "バフ"
				LOCAL += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
				LOCAL:1 += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL += 付随依存変動算出(ループ用, 観測隊列, "割合")
					LOCAL:1 += 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ELSEIF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "デバフ"
				LOCAL -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
				LOCAL:1 -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL -= 付随依存変動算出(ループ用, 観測隊列, "割合")
					LOCAL:1 -= 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ENDIF
		ENDIF
	NEXT
	IF 観測のみフラグ == 0
		;回数持続の効果の回数を減少
		CALL バフ回数経過処理(観測隊列, "与回復量")
		CALL デバフ回数経過処理(観測隊列, "与回復量")
	ENDIF
	IF LOCAL <= -100
		;100%以上減少した時、固定値の与回復量上昇バフ・デバフも無効化される
		LOCAL = -100
		LOCAL:1 = 0
	ENDIF
	バフ・デバフ補正後数値 = (補正前数値 * (100 + LOCAL) / 100) + LOCAL:1
ELSEIF バフ・デバフ種類 == "被回復量"
	FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
		IF バフ・デバフ効果適用判定_行指定(ループ用, "ALL", バフ・デバフ種類, 観測隊列)
			IF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "バフ"
				LOCAL += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
				LOCAL:1 += DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL += 付随依存変動算出(ループ用, 観測隊列, "割合")
					LOCAL:1 += 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ELSEIF DT_CELL_GETS("戦闘効果データベース", ループ用, "バフ・デバフフラグ") == "デバフ"
				LOCAL -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合")
				LOCAL:1 -= DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値")
				IF DT_CELL_GETS("戦闘効果データベース", ループ用, "付随効果枠") != ""
					LOCAL -= 付随依存変動算出(ループ用, 観測隊列, "割合")
					LOCAL:1 -= 付随依存変動算出(ループ用, 観測隊列, "固定値")
				ENDIF
			ENDIF
		ENDIF
	NEXT
	IF 観測のみフラグ == 0
		;回数持続の効果の回数を減少
		CALL バフ回数経過処理(観測隊列, "被回復量")
		CALL デバフ回数経過処理(観測隊列, "被回復量")
	ENDIF
	IF LOCAL <= -100
		;100%以上減少した時、固定値の被回復量バフ・デバフも無効化される
		LOCAL = -100
		LOCAL:1 = 0
	ENDIF
	バフ・デバフ補正後数値 = (補正前数値 * (100 + LOCAL) / 100) + LOCAL:1
ENDIF

CALL バフ・デバフ測定_特殊補正処理(観測隊列, バフ・デバフ種類, バフ・デバフ補正後数値)
バフ・デバフ補正後数値 = RESULT

RETURN バフ・デバフ補正後数値



@雑魚敵遭遇汎用処理
CALL BATTLE_MAIN_LOOP

IF RESULT == 0
	;勝利時
	RETURN 0
ELSEIF RESULT == 1
	;全滅時
	CALL 口上変数初期化
	KSTR:(K++) = %CALLNAME:PLAYER%带着力竭的同伴们艰难脱险…
	CALL メッセージ欄表示用関数()
	ダンジョン終了状況 = 全滅
	RETURN 1
ELSEIF RESULT == -1
	;逃走時
	RETURN -1
ENDIF


@かばうチェック(始点, 終点, 無視フラグ = 0)
#DIM 始点
#DIM 終点
#DIM 無視フラグ
#DIM 隊列番号

IF !GETBIT(無視フラグ, 1)
	FOR 隊列番号, 始点, 終点
		;全体かばうチェック
		IF バフ番号取得("全体かばう", 隊列番号) > -1
			;回数持続の効果の回数を減少
			CALL バフ回数経過処理(隊列番号, "全体かばう")
			RETURN 隊列番号
		ENDIF
	NEXT
ENDIF
IF !GETBIT(無視フラグ, 0)
	FOR 隊列番号, 始点, 終点
		;全体かばうチェック（単体かばうとしても扱う）
		;上のブロックで先に確認した場合は飛ばす
		IF GETBIT(無視フラグ, 1) && バフ番号取得("全体かばう", 隊列番号) >= 0
			;回数持続の効果の回数を減少
			CALL バフ回数経過処理(隊列番号, "全体かばう")
			RETURN 隊列番号
		ENDIF
		;単体かばうチェック
		IF バフ番号取得("単体かばう", 隊列番号) >= 0
			;回数持続の効果の回数を減少
			CALL バフ回数経過処理(隊列番号, "単体かばう")
			RETURN 隊列番号
		ENDIF
	NEXT
ENDIF
RETURN -1

@かばうチェック_味方(無視フラグ = 0)
#DIM 無視フラグ
JUMP かばうチェック(0, 4, 無視フラグ)

@かばうチェック_敵(無視フラグ = 0)
#DIM 無視フラグ
JUMP かばうチェック(10, 20, 無視フラグ)


@戦闘キャラ名前取得(戦闘キャラ番号)
#FUNCTIONS
#DIM 戦闘キャラ番号

IF 戦闘キャラ番号 < 10
	RETURNF CALLNAME:(BATTLE_STATE:戦闘キャラ番号:キャラ登録番号)
ELSE
	RETURNF 敵BATTLE_STATE_STR:(戦闘キャラ番号 - 10):エネミー名
ENDIF


@サブメンバーステータス取得(取得能力値)
#FUNCTION
#DIMS 取得能力値
#DIM 対象キャラ
#DIM ステータス一時保存

;指定のステータスについて、サブメンバーで最も高い値を返す
;BATTLE_STATE、CFLAG、知識素質に対応
;該当ステータスが無い場合は-1を返す
;サブメンバーが一人もいない場合は0を返す

SIF MAX(BATTLE_STATE:10:キャラ登録番号, BATTLE_STATE:11:キャラ登録番号, BATTLE_STATE:12:キャラ登録番号, BATTLE_STATE:13:キャラ登録番号) < 1
	RETURNF 0

口上用サブメンバー保存番号 = -1
ステータス一時保存 = 0
IF GETNUM(BATTLE_STATE, 取得能力値, 2) > -1
	FOR 対象キャラ, 10, 14
		SIF BATTLE_STATE:対象キャラ:キャラ登録番号 < 1
			CONTINUE
		IF ステータス一時保存 < BATTLE_STATE:対象キャラ:取得能力値
			ステータス一時保存 = BATTLE_STATE:対象キャラ:取得能力値
			口上用サブメンバー保存番号 = 対象キャラ
		ENDIF
	NEXT
	RETURNF ステータス一時保存
ELSEIF GETNUM(CFLAG, 取得能力値) > -1
	FOR 対象キャラ, 10, 14
		SIF BATTLE_STATE:対象キャラ:キャラ登録番号 < 1
			CONTINUE
		IF ステータス一時保存 < CFLAG:(BATTLE_STATE:対象キャラ:キャラ登録番号):取得能力値
			ステータス一時保存 = CFLAG:(BATTLE_STATE:対象キャラ:キャラ登録番号):取得能力値
			口上用サブメンバー保存番号 = 対象キャラ
		ENDIF
	NEXT
	RETURNF ステータス一時保存
ELSEIF GETNUM(知識素質, 取得能力値) > -1
	FOR 対象キャラ, 10, 14
		SIF BATTLE_STATE:対象キャラ:キャラ登録番号 < 1
			CONTINUE
		IF ステータス一時保存 < 知識素質:(BATTLE_STATE:対象キャラ:キャラ登録番号):取得能力値
			ステータス一時保存 = 知識素質:(BATTLE_STATE:対象キャラ:キャラ登録番号):取得能力値
			口上用サブメンバー保存番号 = 対象キャラ
		ENDIF
	NEXT
	RETURNF ステータス一時保存
ELSE
	RETURNF -1
ENDIF


@得意武器判定(対象キャラ, 対象武器種)
#FUNCTION
#DIM 対象キャラ
#DIMS 対象武器種

;天司ラジエルは全ての武器が得意
IF キャラ一致チェック(対象キャラ, "[神秘的天司]拉结尔")
	RETURNF 1
ENDIF

IF GETBIT(基礎BATTLE_STATE:対象キャラ:得意武器, 得意武器文字列数値変換(対象武器種))
	RETURNF 1
ENDIF

RETURNF 0


@戦闘中最大ＨＰＭＰ変動処理()
#DIM 対象配列, 10
#DIM 対象数

対象数 = 0
VARSET 対象配列, -1

;敵は変動させないので味方のみ
FOR LOCAL, 0, 4
	SIF BATTLE_STATE:LOCAL:0 < 1
		CONTINUE
	SIF BATTLE_STATE:LOCAL:ＨＰ < 1
		CONTINUE
	対象配列:対象数 = LOCAL
	対象数 ++
NEXT

;サブキャラはリセットのみ
FOR LOCAL, 10, 14
	SIF BATTLE_STATE:LOCAL:0 < 1
		CONTINUE
	SIF BATTLE_STATE:LOCAL:ＨＰ < 1
		CONTINUE
	BATTLE_STATE:LOCAL:最大ＨＰ = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):最大ＨＰ + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):最大ＨＰ
	BATTLE_STATE:LOCAL:ＨＰ = MIN(BATTLE_STATE:LOCAL:ＨＰ, BATTLE_STATE:LOCAL:最大ＨＰ)
	BATTLE_STATE:LOCAL:最大ＭＰ = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):最大ＭＰ + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):最大ＭＰ
	BATTLE_STATE:LOCAL:ＭＰ = MIN(BATTLE_STATE:LOCAL:ＭＰ, BATTLE_STATE:LOCAL:最大ＭＰ)
NEXT

FOR LOCAL, 0, 対象数
	;多分このパターン無いけど一応フォロー
	SIF 対象配列:LOCAL < 0
		CONTINUE

	;一旦初期化
	BATTLE_STATE:(対象配列:LOCAL):最大ＨＰ = 基礎BATTLE_STATE:(BATTLE_STATE:(対象配列:LOCAL):キャラ登録番号):最大ＨＰ + 装備ステータス補正保存:(BATTLE_STATE:(対象配列:LOCAL):キャラ登録番号):最大ＨＰ
	;バフ測定
	CALL バフ・デバフ測定(対象配列:LOCAL, "最大ＨＰ", 0, 1)
	BATTLE_STATE:(対象配列:LOCAL):最大ＨＰ = RESULT
	BATTLE_STATE:(対象配列:LOCAL):ＨＰ = MIN(BATTLE_STATE:(対象配列:LOCAL):ＨＰ, BATTLE_STATE:(対象配列:LOCAL):最大ＨＰ)

	;一旦初期化
	BATTLE_STATE:(対象配列:LOCAL):最大ＭＰ = 基礎BATTLE_STATE:(BATTLE_STATE:(対象配列:LOCAL):キャラ登録番号):最大ＭＰ + 装備ステータス補正保存:(BATTLE_STATE:(対象配列:LOCAL):キャラ登録番号):最大ＭＰ
	;バフ測定
	CALL バフ・デバフ測定(対象配列:LOCAL, "最大ＭＰ", 0, 1)
	BATTLE_STATE:(対象配列:LOCAL):最大ＭＰ = RESULT
	BATTLE_STATE:(対象配列:LOCAL):ＭＰ = MIN(BATTLE_STATE:(対象配列:LOCAL):ＭＰ, BATTLE_STATE:(対象配列:LOCAL):最大ＭＰ)
NEXT

@チェンバ組み合わせ確認(キャラNAME1, キャラNAME2 = "", キャラNAME3 = "", キャラNAME4 = "", キャラNAME5 = "")
#FUNCTION
#DIM 保存番号
#DIM 判定BIT
#DIMS キャラNAME1
#DIMS キャラNAME2
#DIMS キャラNAME3
#DIMS キャラNAME4
#DIMS キャラNAME5
;チェンバに特定キャラが全員いるかどうかを見る

判定BIT = 0
FOR 保存番号, 0, 10
	SIF チェンバ基準キャラ保存:保存番号 < 0
		BREAK
	IF キャラ一致チェック(BATTLE_STATE:(チェンバ基準キャラ保存:保存番号):キャラ登録番号, キャラNAME1)
		SETBIT 判定BIT, 1
	ELSEIF キャラ一致チェック(BATTLE_STATE:(チェンバ基準キャラ保存:保存番号):キャラ登録番号, キャラNAME2)
		SETBIT 判定BIT, 2
	ELSEIF キャラ一致チェック(BATTLE_STATE:(チェンバ基準キャラ保存:保存番号):キャラ登録番号, キャラNAME3)
		SETBIT 判定BIT, 3
	ELSEIF キャラ一致チェック(BATTLE_STATE:(チェンバ基準キャラ保存:保存番号):キャラ登録番号, キャラNAME4)
		SETBIT 判定BIT, 4
	ELSEIF キャラ一致チェック(BATTLE_STATE:(チェンバ基準キャラ保存:保存番号):キャラ登録番号, キャラNAME5)
		SETBIT 判定BIT, 5
	ENDIF
NEXT

SIF GETBIT(判定BIT, 1) == 0
	RETURNF 0
SIF キャラNAME2 != "" && GETBIT(判定BIT, 2) == 0
	RETURNF 0
SIF キャラNAME3 != "" && GETBIT(判定BIT, 3) == 0
	RETURNF 0
SIF キャラNAME4 != "" && GETBIT(判定BIT, 4) == 0
	RETURNF 0
SIF キャラNAME5 != "" && GETBIT(判定BIT, 5) == 0
	RETURNF 0

RETURNF 1

@種族判定関数(対象隊列, 判定種族, 判定種族2 = "", 判定種族3 = "", 判定種族4 = "", 判定種族5 = "")
#FUNCTION
#DIM 対象隊列
#DIMS 判定種族1
#DIMS 判定種族2
#DIMS 判定種族3
#DIMS 判定種族4
#DIMS 判定種族5
#DIMS 判定種族, 5
#DIM 種族番号
#DIM キャラ番

判定種族:0 '= 判定種族1
判定種族:1 '= 判定種族2
判定種族:2 '= 判定種族3
判定種族:3 '= 判定種族4
判定種族:4 '= 判定種族5

IF 対象隊列 < 10
	;味方側
	キャラ番 = BATTLE_STATE:戦闘行動対象:キャラ登録番号
	FOR 種族番号, 0, 5
		SIF 判定種族:種族番号 == ""
			CONTINUE
		SELECTCASE 判定種族:種族番号
			CASE "ヒューマン"
				SIF TALENT:キャラ番:種族 == 1
					RETURNF 1
			CASE "エルーン"
				SIF TALENT:キャラ番:種族 == 2
					RETURNF 1
			CASE "ドラフ"
				SIF TALENT:キャラ番:種族 == 3
					RETURNF 1
			CASE "ハーヴィン"
				SIF TALENT:キャラ番:種族 == 4
					RETURNF 1
			CASE "星晶獣"
				SIF TALENT:キャラ番:種族 == 5
					RETURNF 1
			CASEELSE
				SIF CSTR:キャラ番:特殊種族 == 判定種族:種族番号
					RETURNF 1
				SIF CSTR:キャラ番:固有素質0 == 判定種族:種族番号
					RETURNF 1
				SIF CSTR:キャラ番:固有素質1 == 判定種族:種族番号
					RETURNF 1
				SIF CSTR:キャラ番:固有素質2 == 判定種族:種族番号
					RETURNF 1
				SIF CSTR:キャラ番:固有素質3 == 判定種族:種族番号
					RETURNF 1
				SIF CSTR:キャラ番:固有素質4 == 判定種族:種族番号
					RETURNF 1
				SIF CSTR:キャラ番:固有素質5 == 判定種族:種族番号
					RETURNF 1
				SIF CSTR:キャラ番:固有素質6 == 判定種族:種族番号
					RETURNF 1
				SIF CSTR:キャラ番:固有素質7 == 判定種族:種族番号
					RETURNF 1
				SIF CSTR:キャラ番:固有素質8 == 判定種族:種族番号
					RETURNF 1
				SIF CSTR:キャラ番:固有素質9 == 判定種族:種族番号
					RETURNF 1
		ENDSELECT
	NEXT
ELSE
	;敵側
	FOR 種族番号, 0, 5
		SIF 判定種族:種族番号 == ""
			CONTINUE
		SIF STRFIND(敵BATTLE_STATE_STR:(戦闘行動対象 - 10):種族, 判定種族:種族番号) > -1
			RETURNF 1
	NEXT
ENDIF

RETURNF 0
