@行動前発動効果処理
;戦闘行動キャラで呼ぶため、引数なし
#DIMS 効果種類
#DIM 効果量
#DIM デバフ番号
#DIM バフ番号
#DIM 効果番号
#DIM 行動不能デバフフラグ

CALL 口上変数初期化
;キャラの行動選択、エネミーの行動の直前に読みに来る関数

;行動開始時デバフ判定
FOR LOCAL:1, 0, DT_ROW_LENGTH("戦闘効果データベース")
	行動不能デバフフラグ = 0
	SIF バフ・デバフ効果適用判定_行指定(LOCAL:1, "デバフ", "魅了", 戦闘行動キャラ)
		行動不能デバフフラグ = 1
	SIF バフ・デバフ効果適用判定_行指定(LOCAL:1, "デバフ", "麻痺", 戦闘行動キャラ)
		行動不能デバフフラグ = 1
	SIF バフ・デバフ効果適用判定_行指定(LOCAL:1, "デバフ", "睡眠", 戦闘行動キャラ)
		行動不能デバフフラグ = 1
	SIF バフ・デバフ効果適用判定_行指定(LOCAL:1, "デバフ", "封印", 戦闘行動キャラ)
		行動不能デバフフラグ = 1
	IF 行動不能デバフフラグ
		;行動不能確率判定
		効果量 = DT_CELL_GET("戦闘効果データベース", LOCAL:1, "効果量_割合")
		IF RAND:100 < 効果量 || 効果量 <= 0
			;行動不能
			行動不能フラグ = 1
			WSTR:(K++) = %戦闘キャラ名前取得(戦闘行動キャラ)%因%DT_CELL_GETS("戦闘効果データベース", LOCAL:1, "効果名")%的效果无法行动！
			CALL メッセージ欄表示用関数(,,,0)
			CALL 口上変数初期化
			CALL アビテンプレ変数リセット
		ENDIF
		;回数消費
		CALL デバフ回数経過処理(戦闘行動キャラ, 効果種類)
	ENDIF
	IF バフ・デバフ効果適用判定_行指定(LOCAL:1, "デバフ", "混乱", 戦闘行動キャラ)
		;行動不能確率判定
		効果量 = DT_CELL_GET("戦闘効果データベース", LOCAL:1, "効果量_割合")
		IF RAND:100 < 効果量 || 効果量 <= 0
			WSTR:(K++) = %戦闘キャラ名前取得(戦闘行動キャラ)%陷入了混乱状态！
			CALL メッセージ欄表示用関数(,,,0)
			CALL 口上変数初期化
			CALL アビテンプレ変数リセット
			SELECTCASE RAND:2
				CASE 0
					;味方を攻撃
					CALL アビ対象選択テンプレート_味方ランダムＸ体(1)
					アビ汎用変数:効果割合 = 100
					CALL アビテンプレート_ダメージ処理_無属性
				CASE 1
					;敵を攻撃
					CALL アビ対象選択テンプレート_敵ランダムＸ体(1)
					アビ汎用変数:効果割合 = 100
					CALL アビテンプレート_ダメージ処理_無属性
				ENDSELECT
			;回数消費
			CALL デバフ回数経過処理(戦闘行動キャラ, 効果種類)
			;表示処理
			CALL アビテンプレート用_表示メッセージ変換処理
			CALL メッセージ欄表示用関数(,,,0)
			CALL 口上変数初期化
			CALL アビテンプレ変数リセット

			行動不能フラグ = 1
		ENDIF
	ENDIF
NEXT

;固有処理

;フィールドを見る
IF 展開中フィールド名格納 != ""
	TRYCCALLFORM 固有行動開始時処理_フィールド_%展開中フィールド名格納%()
		;表示処理
		CALL アビテンプレート用_表示メッセージ変換処理
		SIF K > 0
			CALL メッセージ欄表示用関数(,,,0)
		CALL 口上変数初期化
		CALL アビテンプレ変数リセット
	CATCH
	ENDCATCH
ENDIF

IF 戦闘行動キャラ < 10
	;味方専用の効果

	;指輪を見る
	TRYCCALLFORM 固有行動開始時処理_指輪_%DT_CELL_GETS("所持指輪データベース", 装備ステータス補正保存:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号):装備指輪番号, "指輪名", 1)%()
		;表示処理
		CALL アビテンプレート用_表示メッセージ変換処理
		SIF K > 0
			CALL メッセージ欄表示用関数(,,,0)
		CALL 口上変数初期化
		CALL アビテンプレ変数リセット
	CATCH
	ENDCATCH

	;ジョブ証を見る
	TRYCCALLFORM 固有行動開始時処理_ジョブ証_%DT_CELL_GETS("所持ジョブ証データベース", 装備ステータス補正保存:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号):装備証番号, "ジョブ証名", 1)%()
		;表示処理
		CALL アビテンプレート用_表示メッセージ変換処理
		SIF K > 0
			CALL メッセージ欄表示用関数(,,,0)
		CALL 口上変数初期化
		CALL アビテンプレ変数リセット
	CATCH
	ENDCATCH

	;キャラを見る
	TRYCCALLFORM 固有行動開始時処理_キャラ_{NO:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)}()
		;表示処理
		CALL アビテンプレート用_表示メッセージ変換処理
		SIF K > 0
			CALL メッセージ欄表示用関数(,,,0)
		CALL 口上変数初期化
		CALL アビテンプレ変数リセット
	CATCH
	ENDCATCH
ELSE
	;敵専用の効果

	;エネミーを見る
	TRYCCALLFORM 固有行動開始時処理_エネミー_%敵BATTLE_STATE_STR:(戦闘行動キャラ - 10):エネミー関数キー%()
		;表示処理
		CALL アビテンプレート用_表示メッセージ変換処理
		SIF K > 0
			CALL メッセージ欄表示用関数(,,,0)
		CALL 口上変数初期化
		CALL アビテンプレ変数リセット
	CATCH
	ENDCATCH
ENDIF

;バフ・デバフを見る
FOR 効果番号, 0, DT_ROW_LENGTH("戦闘効果データベース")
	IF バフ・デバフ効果適用判定_行指定(効果番号, "ALL", "ALL", 戦闘行動キャラ)
		IF DT_CELL_GETS("戦闘効果データベース", 効果番号, "バフ・デバフフラグ") == "バフ"
			TRYCCALLFORM 固有行動開始時処理_バフ_%DT_CELL_GETS("戦闘効果データベース", 効果番号, "効果枠")%(効果番号)
				;表示処理
				CALL アビテンプレート用_表示メッセージ変換処理
				SIF K > 0
					CALL メッセージ欄表示用関数(,,,0)
				CALL 口上変数初期化
				CALL アビテンプレ変数リセット
			CATCH
			ENDCATCH
		ELSEIF DT_CELL_GETS("戦闘効果データベース", 効果番号, "バフ・デバフフラグ") == "デバフ"
			TRYCCALLFORM 固有行動開始時処理_デバフ_%DT_CELL_GETS("戦闘効果データベース", 効果番号, "効果枠")%(効果番号)
				;表示処理
				CALL アビテンプレート用_表示メッセージ変換処理
				SIF K > 0
					CALL メッセージ欄表示用関数(,,,0)
				CALL 口上変数初期化
				CALL アビテンプレ変数リセット
			CATCH
			ENDCATCH
		ENDIF
	ENDIF
NEXT
