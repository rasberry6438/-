@ブロック生成(エリア広さ)
;----------
;ブロックの生成
;----------
;#DIM 分割ブロックリスト,100,4
	;(ブロックID,ブロック要素)
	;ブロック要素・・・横、縦、横幅、縦幅
#DIM ブロックカーソル
#DIM ブロック分割方向
#DIM ブロック分割幅
#DIM 残ブロック幅
#DIM エリア広さ
;どの大きさのダンジョンにするか


分割ブロックリスト:0:0 = (8 - エリア広さ) / 2
分割ブロックリスト:0:1 = 分割ブロックリスト:0:0
;左上を真中に寄せる
分割ブロックリスト:0:2 = エリア広さ
分割ブロックリスト:0:3 = エリア広さ
;エリアサイズをセット


ブロックカーソル = 0
;操作中のブロックID

;----------
;ブロック切り出しループここから
;----------
WHILE ((分割ブロックリスト:ブロックカーソル:2) * (分割ブロックリスト:ブロックカーソル:3)) >= 6
;分割する面積が6以上なら続ける


ブロック分割方向 = RAND:2
;分割方向を決める

SIF 分割ブロックリスト:ブロックカーソル:(ブロック分割方向 + 2) == 1
	CONTINUE
;分割対象が幅1なら分割できない

分割ブロックリスト:(ブロックカーソル + 1):0 = 分割ブロックリスト:ブロックカーソル:0
分割ブロックリスト:(ブロックカーソル + 1):1 = 分割ブロックリスト:ブロックカーソル:1
分割ブロックリスト:(ブロックカーソル + 1):2 = 分割ブロックリスト:ブロックカーソル:2
分割ブロックリスト:(ブロックカーソル + 1):3 = 分割ブロックリスト:ブロックカーソル:3
;方向問わずコピーしておく

ブロック分割幅 = RAND:((分割ブロックリスト:ブロックカーソル:(ブロック分割方向 + 2) - 1)) + 1
;分割するブロックの幅・・・1～ブロック幅-1
残ブロック幅 = 分割ブロックリスト:ブロックカーソル:(ブロック分割方向 + 2) - ブロック分割幅
;分割された方

IF ブロック分割幅 >= 残ブロック幅
;分割して大きい方を次に分割する対象にする
	分割ブロックリスト:(ブロックカーソル + 1):(ブロック分割方向) = 分割ブロックリスト:ブロックカーソル:ブロック分割方向
		;次ブロック座標にカーソルブロック座標を入れる
	分割ブロックリスト:(ブロックカーソル + 1):(ブロック分割方向 + 2) = ブロック分割幅
		;次ブロック幅にブロック分割幅を入れる
	分割ブロックリスト:ブロックカーソル:ブロック分割方向 = 分割ブロックリスト:ブロックカーソル:ブロック分割方向 + ブロック分割幅
		;新座標は元ブロック+分割した幅
	分割ブロックリスト:ブロックカーソル:(ブロック分割方向 + 2) = 残ブロック幅
		;幅は分割されて残った幅

ELSE
	分割ブロックリスト:(ブロックカーソル + 1):(ブロック分割方向) = 分割ブロックリスト:ブロックカーソル:ブロック分割方向 + ブロック分割幅
		;新座標は元ブロック+分割した幅
	分割ブロックリスト:(ブロックカーソル + 1):(ブロック分割方向 + 2) = 残ブロック幅
		;幅は分割されて残った幅
	;分割ブロックリスト:ブロックカーソル:ブロック分割方向 = 
		;座標は更新しない
	分割ブロックリスト:ブロックカーソル:(ブロック分割方向 + 2) = ブロック分割幅
		;幅はブロック分割幅
ENDIF

ブロックカーソル += 1
;次のブロックへ

WEND
;ブロック分割幅 * 残ブロック幅 が十分小さくなったとき、ループを終える
;-----------------
;ブロック切り出しここまで
;-----------------

;----------
;ブロック内に部屋を生成
;----------
@ブロック内部屋生成(部屋多さ)
;ランダムダンジョン配列に存在フラグ、接続先マスを設定する
;#DIM 分割ブロックリスト,100,4
;#DIMS ランダムダンジョン配列,10,10,100
#DIM ブロック数
#DIM 始祖ブロックID 
#DIM 親ブロックID
#DIM 子ブロックID
#DIM 親ブロック部屋数
#DIMS 親ブロック部屋リスト,100
#DIM 子ブロック部屋数
#DIMS 子ブロック部屋リスト,100
;部屋座標1、部屋座標2、、、、
#DIM 部屋多さ
#DIM 目標部屋数
#DIM 親部屋横
#DIM 親部屋縦
#DIMS 親部屋座標
#DIM 子部屋横
#DIM 子部屋縦
#DIMS 子部屋座標
#DIMS 座標分割配列,2
#DIM 接続先検索カウンタ

ブロック数 = 0
;ブロック数を数える

FOR LOCAL, 0, 100
	SIF 分割ブロックリスト:LOCAL:3 == 0
		BREAK
		;サイズが0のブロックが出るまで数える
	ブロック数 += 1
NEXT

始祖ブロックID = RAND:ブロック数
;始祖ブロックの選出



親ブロックID = 始祖ブロックID
親部屋横 = 分割ブロックリスト:始祖ブロックID:0 + RAND:(分割ブロックリスト:始祖ブロックID:2)
親部屋縦 = 分割ブロックリスト:始祖ブロックID:1 + RAND:(分割ブロックリスト:始祖ブロックID:3)
親部屋座標 = {親部屋横}_{親部屋縦}
親ブロック部屋数 = 1
親ブロック部屋リスト:0 = %親部屋座標%

ランダムダンジョン配列:親部屋横:親部屋縦:イベント状態 = 1
;存在フラグ
ランダムダンジョン初期位置:0 = 親部屋横
ランダムダンジョン初期位置:1 = 親部屋縦
;初期座標を記録しておく
;----------
;子ブロックに部屋を生成する～ID昇り
;----------
子ブロックID = 始祖ブロックID + 1


WHILE 分割ブロックリスト:子ブロックID:3 > 0
	;子ブロックに幅がある＝存在する

	目標部屋数 = (RAND(部屋多さ / 2, 部屋多さ)) / 6 + 1
	;抽象的な部屋多さのパラメタを具体化する
	FOR LOCAL, 0, 目標部屋数
		子部屋横 = 分割ブロックリスト:子ブロックID:0 + RAND:(分割ブロックリスト:子ブロックID:2)
		子部屋縦 = 分割ブロックリスト:子ブロックID:1 + RAND:(分割ブロックリスト:子ブロックID:3)
		子部屋座標 = {子部屋横}_{子部屋縦}
		SIF ランダムダンジョン配列:子部屋横:子部屋縦:イベント状態 != "" 
			;部屋ダブりはスキップ
			CONTINUE
		ランダムダンジョン配列:子部屋横:子部屋縦:イベント状態 = 1
		;部屋存在フラグ
		子ブロック部屋リスト:LOCAL = %子部屋座標%
		子ブロック部屋数 += 1
		;部屋作成が確定したので部屋数カウンタを増やす

		;部屋の通路を作っていく
		親部屋座標 = %親ブロック部屋リスト:(RAND:(親ブロック部屋数))%
		;親ブロック部屋リストから親部屋数を乱数にして、ランダムな部屋座標を抽出
		SPLIT 親部屋座標, "_", 座標分割配列
		親部屋横 = TOINT(座標分割配列:0)
		親部屋縦 = TOINT(座標分割配列:1)
		;抽出した部屋座標を分割して親横縦に代入しておく

		FOR 接続先検索カウンタ, 3, 100
			IF ランダムダンジョン配列:親部屋横:親部屋縦:接続先検索カウンタ == ""
				ランダムダンジョン配列:親部屋横:親部屋縦:接続先検索カウンタ = %子部屋座標%
				BREAK
			ENDIF
		;ランジョン配列親横縦の接続先空欄に子部屋座標を入れる
		NEXT
	NEXT

ARRAYCOPY "子ブロック部屋リスト", "親ブロック部屋リスト"
;作成した子ブロック群を親にして次のループへ
VARSET 子ブロック部屋リスト
	親ブロックID += 1
	子ブロックID += 1

WEND

;----------
;子ブロックに部屋を生成する～ID降り
;----------
親ブロックID = 始祖ブロックID
親部屋横 = ランダムダンジョン初期位置:0
親部屋縦 = ランダムダンジョン初期位置:1
親部屋座標 = {親部屋横}_{親部屋縦}
親ブロック部屋数 = 1
VARSET 親ブロック部屋リスト
親ブロック部屋リスト:0 = %親部屋座標%

子ブロックID = 始祖ブロックID - 1

IF 子ブロックID >= 0
	;始祖ブロックIDが0なら終了
		
	WHILE 分割ブロックリスト:子ブロックID:3 > 0
		;子ブロックに幅がある＝存在する
		;子ブロックが正であることもチェック

		目標部屋数 = (RAND:部屋多さ) / 6 + 1
		;抽象的な部屋多さを具体化する
		FOR LOCAL, 0, 目標部屋数
			子部屋横 = 分割ブロックリスト:子ブロックID:0 + RAND:(分割ブロックリスト:子ブロックID:2)
			子部屋縦 = 分割ブロックリスト:子ブロックID:1 + RAND:(分割ブロックリスト:子ブロックID:3)
			子部屋座標 = {子部屋横}_{子部屋縦}
			SIF ランダムダンジョン配列:子部屋横:子部屋縦:イベント状態 != "" 
				;部屋ダブりはスキップ
				CONTINUE
			ランダムダンジョン配列:子部屋横:子部屋縦:イベント状態 = 1
			;部屋存在フラグ
			子ブロック部屋リスト:LOCAL = %子部屋座標%
			子ブロック部屋数 += 1
			;部屋作成が確定したので部屋数カウンタを増やす

			;部屋の通路を作っていく
			親部屋座標 = %親ブロック部屋リスト:(RAND:(親ブロック部屋数))%
			;親ブロック部屋リストからランダムに部屋を抽出
			SPLIT 親部屋座標, "_", 座標分割配列
			親部屋横 = TOINT(座標分割配列:0)
			親部屋縦 = TOINT(座標分割配列:1)
			;抽出した部屋座標を分割して親横縦に代入しておく

			FOR 接続先検索カウンタ, 3, 100
				IF ランダムダンジョン配列:親部屋横:親部屋縦:接続先検索カウンタ == ""
					ランダムダンジョン配列:親部屋横:親部屋縦:接続先検索カウンタ = %子部屋座標%
					BREAK
				ENDIF
			;ランジョン配列親横縦の接続先空欄に子部屋座標を入れる
			NEXT
		NEXT

	SIF 子ブロックID == 0
		BREAK

	ARRAYCOPY "子ブロック部屋リスト", "親ブロック部屋リスト"
	;作成した子ブロック群を親にして次のループへ
	VARSET 子ブロック部屋リスト
		親ブロックID -= 1
		子ブロックID -= 1
	WEND
ENDIF


@ランダムダンジョン媒介(深度,分岐,ARGS)

#DIMS マス番号
#DIMS マス番号行先
#DIM 深度
#DIM 分岐
マス番号 = {深度}_{分岐}


SELECTCASE ARGS
	CASE "マス画像"
			CALLFORM マスタイプ_%ダンジョン名%(深度,分岐)
	CASE "接続先"
		FOR LOCAL, 3, 100
			SIF ランダムダンジョン配列:深度:分岐:LOCAL == ""
				BREAK
			マス番号行先 = %ランダムダンジョン配列:深度:分岐:LOCAL%
			CALL ダンジョン分岐線描画(マス番号, マス番号行先)
		NEXT
	CASE "マスイベント"
			CALLFORM イベント_%ダンジョン名%_%ランダムダンジョン配列:深度:分岐:イベント名%
		CALL 画面再描画
ENDSELECT

