@穴掘り方式(サイズ = 8, 採掘回数基準値 = 0, 部屋多さ = 20, 最大部屋作成数 = 20, 採掘ロジック幅深さ = -1, 採掘ロジック関数 = -1, 採掘方角決定ロジック = 0, 通路長さ固定フラグ = -1, 生成リトライ回数 = 3)
#DIM 採掘マップ, 採掘マップ要素数, 採掘マップ要素数
#DIM 採掘回数基準値 ;次の部屋までの距離
#DIM サイズ ;幅
#DIM 採掘現在位置, 座標次元数 ;0=X（横）, 1=Y（縦）
#DIM 部屋多さ
#DIM 採掘方角決定ロジック ;0=完全ランダム, 1=後退なし（北西南とは動かない）
#DIM 左上端座標
#DIM 右下端座標
#DIM 部屋座標リストX, 座標リスト要素数
#DIM 部屋座標リストY, 座標リスト要素数
#DIM 最大部屋作成数 ;設定によっては部屋がぎっしり埋まるので上限値を用意しておく
#DIM 接続先検索カウンタ
#DIM 親部屋座標リストX, 座標リスト要素数
#DIM 親部屋座標リストY, 座標リスト要素数
#DIM 通路長さ固定フラグ
#DIM 採掘ロジック幅深さ
#DIM 生成リトライ回数
#DIM 採掘ロジック関数 ;0=ループ , 1=再帰関数

;無限ループ防止, リトライ回数まで
SIF 生成リトライ回数 < 1
	RETURN

;ダンジョン形成に関する引数が指定されていないときランダムにする
SIF 採掘ロジック関数 == -1
	採掘ロジック関数 = RAND:2
SIF 採掘ロジック幅深さ == -1
	採掘ロジック幅深さ = RAND:2
;後退なしはダンジョン成長が難しくなるのでデフォルトでは選ばない
SIF 採掘方角決定ロジック == -1
	採掘方角決定ロジック = RAND:2
SIF 通路長さ固定フラグ == -1
	通路長さ固定フラグ = RAND:2

;幅優先はループ関数のみ
SIF 採掘ロジック幅深さ == 0
	採掘ロジック関数 = 0
	
;初期化処理
VARSET ランダムダンジョン配列

;採掘マップを埋めてサイズを決める
;0=掘れない壁, 1=掘れる壁
VARSET 採掘マップ

;採掘マップの掘れる範囲の座標
左上端座標 = (8 - サイズ) / 2 + 1
右下端座標 = 左上端座標 + サイズ

;掘れる壁で埋める
FOR LOCAL:0, 左上端座標, 右下端座標
	FOR LOCAL:1, 左上端座標, 右下端座標
		採掘マップ:(LOCAL:0):(LOCAL:1) = 1
	NEXT
NEXT

;初期配置を決める
ランダムダンジョン初期位置:0 = RAND:サイズ + (8 - サイズ) / 2
ランダムダンジョン初期位置:1 = RAND:サイズ + (8 - サイズ) / 2

;採掘マップでの位置、座標がずれる
採掘現在位置:0 = ランダムダンジョン初期位置:0 + 1
採掘現在位置:1 = ランダムダンジョン初期位置:1 + 1
採掘マップ:(採掘現在位置:0):(採掘現在位置:1) = 0

VARSET 部屋座標リストX, -1
VARSET 部屋座標リストY, -1
VARSET 親部屋座標リストX, -1
VARSET 親部屋座標リストY, -1

;メイン採掘ブロック
IF 採掘ロジック関数 == 0
	CALL 採掘ループ関数(採掘マップ, ランダムダンジョン初期位置:0, ランダムダンジョン初期位置:1, 採掘現在位置, 部屋座標リストX, 部屋座標リストY, 親部屋座標リストX, 親部屋座標リストY,  採掘回数基準値, 部屋多さ, 最大部屋作成数, 採掘ロジック幅深さ, 採掘方角決定ロジック, 通路長さ固定フラグ)
ELSE
	CALL 採掘再帰関数(採掘マップ, 採掘現在位置, 部屋座標リストX, 部屋座標リストY, 親部屋座標リストX, 親部屋座標リストY, 最大部屋作成数, 部屋多さ, 採掘回数基準値, 0, ランダムダンジョン初期位置:0, ランダムダンジョン初期位置:1, 通路長さ固定フラグ)
ENDIF


;ダンジョン生成をリトライする, ここでは最大部屋数の1/4未満しか生成できなかったとき
IF 部屋座標リストX:(最大部屋作成数 / 4) < 0
	生成リトライ回数 --
	RESTART
ENDIF

;ダンジョンの生成が終わったら接続先を結ぶ
FOR LOCAL, 0, 座標リスト要素数

	SIF 部屋座標リストX:LOCAL < 0
		BREAK

	;部屋の存在フラグを立てる
	ランダムダンジョン配列:(部屋座標リストX:LOCAL):(部屋座標リストY:LOCAL):イベント状態 = 1

	IF 親部屋座標リストX:LOCAL >= 0
		;ランジョン配列親横縦の接続先空欄に子部屋座標を入れる
		FOR 接続先検索カウンタ, 3, 100
			IF ランダムダンジョン配列:(親部屋座標リストX:LOCAL):(親部屋座標リストY:LOCAL):接続先検索カウンタ == ""
				ランダムダンジョン配列:(親部屋座標リストX:LOCAL):(親部屋座標リストY:LOCAL):接続先検索カウンタ = {部屋座標リストX:LOCAL}_{部屋座標リストY:LOCAL}
				BREAK
			ENDIF
		NEXT
	ENDIF

NEXT


@採掘再帰関数(採掘マップ, 採掘現在位置, 部屋座標リストX, 部屋座標リストY, 親部屋座標リストX, 親部屋座標リストY, 最大部屋作成数, 部屋多さ, 採掘回数基準値, 残り採掘回数, 親部屋座標:0, 親部屋座標:1, 通路長さ固定フラグ)
#DIM REF 採掘マップ, 0, 0
#DIM REF 採掘現在位置, 0 ;座標次元数 ;0=X（横）, 1=Y（縦）
#DIM REF 部屋座標リストX, 0
#DIM REF 部屋座標リストY, 0
#DIM REF 親部屋座標リストX, 0
#DIM REF 親部屋座標リストY, 0
#DIM DYNAMIC 採掘方角配列, 採掘方角数
#DIM DYNAMIC 分岐回数カウンタ
#DIM DYNAMIC 採掘方角カウンタ
#DIM DYNAMIC 残り分岐回数
#DIM DYNAMIC 親部屋座標, 座標次元数
#DIM 最大部屋作成数
#DIM DYNAMIC 作成済み部屋数
#DIM DYNAMIC 残り採掘回数
#DIM DYNAMIC 子部屋座標, 座標次元数
#DIM 通路長さ固定フラグ
#DIM 採掘回数基準値
#DIM 部屋多さ

;採掘中なら親座標は引き継ぐ、部屋を作ったときは自分の座標に更新する
子部屋座標:0 = 親部屋座標:0
子部屋座標:1 = 親部屋座標:1

;作成済み部屋数を部屋座標リストから計算
作成済み部屋数 = FINDELEMENT(部屋座標リストX, -1)

;終了処理
SIF 最大部屋作成数 - 作成済み部屋数 == 0
	RETURN

;部屋を作成しないときは分岐しないから0を与える
残り分岐回数 = 0

IF 残り採掘回数 == 0
	;採掘回数が十分なとき

	IF 作成済み部屋数 > 0

		;部屋作成時は自分の座標に更新する
		子部屋座標:0 = 採掘現在位置:0 - 1
		子部屋座標:1 = 採掘現在位置:1 - 1
		FOR LOCAL, 1, 座標リスト要素数
			IF 部屋座標リストX:LOCAL < 0
				部屋座標リストX:LOCAL = 子部屋座標:0
				部屋座標リストY:LOCAL = 子部屋座標:1
				親部屋座標リストX:LOCAL = 親部屋座標:0
				親部屋座標リストY:LOCAL = 親部屋座標:1
				BREAK
			ENDIF
		NEXT
	ELSEIF 作成済み部屋数 == 0
		部屋座標リストX:0 = 親部屋座標:0
		部屋座標リストY:0 = 親部屋座標:1
	ENDIF
	作成済み部屋数 ++
	残り分岐回数 = (RAND:部屋多さ) / 6
	残り採掘回数 = 採掘回数基準値
	SIF 残り採掘回数 < 1
		残り採掘回数 = 3
	SIF 通路長さ固定フラグ == 0
		残り採掘回数 += (RAND:8 / 6)
ENDIF

;再帰本体はFORの仕様が不都合なのでWHILE
分岐回数カウンタ = 0
WHILE 分岐回数カウンタ < 3
	IF 分岐回数カウンタ > 残り分岐回数
		BREAK
	ENDIF

	;掘り進む方向を決める 方角は東西南北
	FOR LOCAL, 0, 採掘方角数
		採掘方角配列:LOCAL = LOCAL
	NEXT
	FOR LOCAL, 採掘方角数-1, 1, -1
		SWAP 採掘方角配列:LOCAL, 採掘方角配列:(RAND:LOCAL)
	NEXT

	;決定した順序でチェック＆実行
	;再帰本体はFORの仕様が不都合なのでWHILE
	採掘方角カウンタ = 0
	WHILE 採掘方角カウンタ < 採掘方角数
		IF 採掘可否チェック(採掘マップ, 採掘現在位置, 採掘方角配列:採掘方角カウンタ) == 1
			CALL 採掘実行処理(採掘マップ, 採掘現在位置, 採掘方角配列:採掘方角カウンタ)
			CALL 採掘再帰関数(採掘マップ, 採掘現在位置, 部屋座標リストX, 部屋座標リストY, 親部屋座標リストX, 親部屋座標リストY, 最大部屋作成数, 部屋多さ, 採掘回数基準値, 残り採掘回数 - 1, 子部屋座標:0, 子部屋座標:1, 通路長さ固定フラグ)
			BREAK
		ENDIF
		採掘方角カウンタ++
	WEND
	分岐回数カウンタ++
WEND

;帰るときは座標を戻す
採掘現在位置:0 = 親部屋座標:0 + 1
採掘現在位置:1 = 親部屋座標:1 + 1


@採掘ループ関数(採掘マップ, 親部屋座標:0, 親部屋座標:1, 採掘現在位置, 部屋座標リストX, 部屋座標リストY, 親部屋座標リストX, 親部屋座標リストY, 採掘回数基準値, 部屋多さ, 最大部屋作成数, 採掘ロジック幅深さ, 採掘方角決定ロジック, 通路長さ固定フラグ)
#DIM REF 採掘マップ, 0, 0
#DIM REF 部屋座標リストX, 0
#DIM REF 部屋座標リストY, 0
#DIM REF 親部屋座標リストX, 0
#DIM REF 親部屋座標リストY, 0
#DIM 採掘マップ_一時保存, 採掘マップ要素数, 採掘マップ要素数
#DIM 採掘方角配列, 採掘方角数
#DIM 採掘回数基準値 ;次の部屋までの距離
#DIM REF 採掘現在位置, 0 ;座標次元数 ;0=X（横）, 1=Y（縦）
#DIM 部屋多さ
#DIM 採掘方角決定ロジック ;0=完全ランダム, 1=後退なし（北西南とは動かない）
#DIM 親部屋座標, 座標次元数
#DIM 現在親部屋カーソル ;座標リストのどの部屋を親にしているか記憶する
#DIM 最大部屋作成数 ;設定によっては部屋がぎっしり埋まるので上限値を用意しておく
#DIM 現在部屋作成数
#DIM 残り分岐数
#DIM 残り採掘回数
#DIM 部屋作成フラグ
#DIM 子部屋座標, 座標次元数
#DIM 通路長さ固定フラグ
#DIM 採掘ロジック幅深さ

現在親部屋カーソル = 0
部屋座標リストX:現在親部屋カーソル = 親部屋座標:0
部屋座標リストY:現在親部屋カーソル = 親部屋座標:1
現在部屋作成数 = 1

;部屋、通路分岐回数、通路採掘回数の三重ループ
WHILE 部屋座標リストX:現在親部屋カーソル >= 0 && 現在部屋作成数 < 最大部屋作成数

	残り分岐数 = (RAND:部屋多さ) / 6 + 1

	WHILE 残り分岐数 > 0

		;採掘マップを一時保存
		CALL 採掘マップコピー(採掘マップ, 採掘マップ_一時保存)

		残り採掘回数 = 採掘回数基準値
		SIF 採掘回数基準値 < 1
			残り採掘回数 = 3
		SIF 通路長さ固定フラグ == 0
			残り採掘回数 += (RAND:8 / 6)

		WHILE 残り採掘回数 > 0

			;採掘方角を決める、採掘先のチェック、採掘処理の順に行う
			;詰み、再試行などを考慮して配列に方角をストックして消費する方式にする

			部屋作成フラグ = 0

			SELECTCASE 採掘方角決定ロジック
				CASE 0 ;完全ランダム
					VARSET 採掘方角配列
					;掘り進む方向を決める 方角は東西南北
					FOR LOCAL, 0, 採掘方角数
						採掘方角配列:LOCAL = LOCAL
					NEXT
					FOR LOCAL, 採掘方角数-1, 1, -1
						SWAP 採掘方角配列:LOCAL, 採掘方角配列:(RAND:LOCAL)
					NEXT

					;決定した順序でチェック＆実行
					FOR LOCAL, 0, 採掘方角数
						IF 採掘可否チェック(採掘マップ, 採掘現在位置, 採掘方角配列:LOCAL) == 1
							CALL 採掘実行処理(採掘マップ, 採掘現在位置, 採掘方角配列:LOCAL)
							部屋作成フラグ = 1
							残り採掘回数 --
							BREAK
						ENDIF
					NEXT

				CASE 1 ;後退なし
					;現在位置が親座標の時のみ配列をリセットする
					IF 採掘現在位置:0 == (親部屋座標:0 + 1) && 採掘現在位置:1 == (親部屋座標:1 + 1)
						VARSET 採掘方角配列
						;掘り進む方向を決める 方角は東西南北
						FOR LOCAL, 0, 座標次元数
							;0,1　2,3のどちらかを入れる（東西のいずれか、南北のいずれか）
							採掘方角配列:LOCAL = RAND:2 +(LOCAL * 2)
						NEXT
					ENDIF
					
					;ランダムで入れ替える
					SIF RAND:2 == 0
						SWAP 採掘方角配列:0, 採掘方角配列:1

					;決定した順序でチェック＆実行
					FOR LOCAL, 0, 座標次元数
						IF 採掘可否チェック(採掘マップ, 採掘現在位置, 採掘方角配列:LOCAL) == 1
							CALL 採掘実行処理(採掘マップ, 採掘現在位置, 採掘方角配列:LOCAL)
							部屋作成フラグ = 1
							残り採掘回数 --
							BREAK
						ENDIF
					NEXT

			ENDSELECT

			;掘れないで終わったときループから出す
			SIF 部屋作成フラグ == 0
				BREAK

		WEND

		IF 部屋作成フラグ == 1
			;採掘マップ座標を通常座標に読み替えて代入
			子部屋座標:0 = 採掘現在位置:0 - 1
			子部屋座標:1 = 採掘現在位置:1 - 1

			SELECTCASE 採掘ロジック幅深さ
				CASE 0 ;幅優先
					FOR LOCAL, 1, 座標リスト要素数
						IF 部屋座標リストX:LOCAL < 0
							部屋座標リストX:LOCAL = 子部屋座標:0
							部屋座標リストY:LOCAL = 子部屋座標:1
							親部屋座標リストX:LOCAL = 親部屋座標:0
							親部屋座標リストY:LOCAL = 親部屋座標:1
							BREAK
						ENDIF
					NEXT
				CASE 1 ;深さ優先
					ARRAYSHIFT 部屋座標リストX, 1, -1, 現在親部屋カーソル + 1, 座標リスト要素数 
					ARRAYSHIFT 部屋座標リストY, 1, -1, 現在親部屋カーソル + 1, 座標リスト要素数 
					ARRAYSHIFT 親部屋座標リストX, 1, -1, 現在親部屋カーソル + 1, 座標リスト要素数 
					ARRAYSHIFT 親部屋座標リストY, 1, -1, 現在親部屋カーソル + 1, 座標リスト要素数 
					FOR LOCAL, 1, 座標リスト要素数
						IF 部屋座標リストX:LOCAL < 0
							部屋座標リストX:LOCAL = 子部屋座標:0
							部屋座標リストY:LOCAL = 子部屋座標:1
							親部屋座標リストX:LOCAL = 親部屋座標:0
							親部屋座標リストY:LOCAL = 親部屋座標:1
							BREAK
						ENDIF
					NEXT
			ENDSELECT

			現在部屋作成数 ++

			採掘現在位置:0 = 親部屋座標:0 + 1
			採掘現在位置:1 = 親部屋座標:1 + 1
		ELSE
			;採掘マップを一時保存から元に戻す
			CALL 採掘マップコピー(採掘マップ_一時保存, 採掘マップ)
		ENDIF

		残り分岐数 --

	WEND

	現在親部屋カーソル ++

	;親部屋の更新、古い部屋順に回す
	親部屋座標:0 = 部屋座標リストX:現在親部屋カーソル
	親部屋座標:1 = 部屋座標リストY:現在親部屋カーソル

	;採掘マップの座標も更新
	採掘現在位置:0 = 親部屋座標:0 + 1
	採掘現在位置:1 = 親部屋座標:1 + 1

WEND


@採掘マップコピー(採掘マップ_コピー元, 採掘マップ_コピー先)
#DIM REF 採掘マップ_コピー元, 0, 0
#DIM REF 採掘マップ_コピー先, 0, 0

FOR LOCAL:0, 0, 採掘マップ要素数
	FOR LOCAL:1, 0, 採掘マップ要素数
		採掘マップ_コピー先:(LOCAL:0):(LOCAL:1) = 採掘マップ_コピー元:(LOCAL:0):(LOCAL:1)
	NEXT
NEXT


@採掘実行処理(採掘マップ, 採掘現在位置, 採掘方角)
#DIM REF 採掘マップ, 0, 0
#DIM REF 採掘現在位置, 0
#DIM 採掘方角

SELECTCASE 採掘方角
	CASE 0 ;東
		採掘現在位置:0 ++
	CASE 1 ;西
		採掘現在位置:0 --
	CASE 2 ;南
		採掘現在位置:1 ++
	CASE 3 ;北
		採掘現在位置:1 --
ENDSELECT

採掘マップ:(採掘現在位置:0):(採掘現在位置:1) = 0


@採掘可否チェック(採掘マップ, 採掘現在位置, 採掘方角)
#FUNCTION
#DIM REF 採掘マップ, 0, 0
#DIM REF 採掘現在位置, 0
#DIM 採掘方角

;方角は東西南北
SELECTCASE 採掘方角
	CASE 0 ;東
		SIF 採掘マップ:(採掘現在位置:0 + 1):(採掘現在位置:1) == 1
			RETURNF 1
	CASE 1 ;西
		SIF 採掘マップ:(採掘現在位置:0 - 1):(採掘現在位置:1) == 1
			RETURNF 1
	CASE 2 ;南
		SIF 採掘マップ:(採掘現在位置:0):(採掘現在位置:1 + 1) == 1
			RETURNF 1
	CASE 3 ;北
		SIF 採掘マップ:(採掘現在位置:0):(採掘現在位置:1 - 1) == 1
			RETURNF 1
ENDSELECT

RETURNF 0
