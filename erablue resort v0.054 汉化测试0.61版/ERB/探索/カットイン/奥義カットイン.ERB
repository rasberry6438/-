@奥義カットイン
;アニメが作成できれば1、できなかったときは0を返す
#DIM レイヤー番号
#DIM キャラTEMP
#DIMS 作成アニメ種類
#DIMS 奥義メッセージ前
#DIMS 奥義メッセージ後
#DIM 分割数
#DIM 表示文字数
#DIMS 汎用グラ用文字列
#DIMS デフォルト用文字列

VARSET 奥義メッセージ前
VARSET 奥義メッセージ後
VARSET 作成アニメ種類
VARSET RESULTS

レイヤー番号 = 50
;+20 読み込み +40 背景素材に使用

;表示設定
IF 戦闘行動キャラ < 10
	;まず個別の表示設定
	SELECTCASE CSTR:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号):カットイン個別選択オプション
		CASE "非表示"
			RETURN 0
		CASE "表示"
			;処理を行わず次へ
		CASE "一日一回のみ"
			;カットイン済みフラグがないなら次へ
			SIF TCVAR:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号):カットイン済フラグ > 0
				RETURN 0
		CASEELSE
			;全体設定に従う
			SELECTCASE カットイン演出一括表示フラグ
				CASE 1
					;非表示
					RETURN 0
				CASE 2
					;カットイン済みフラグがないなら次へ
					SIF TCVAR:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号):カットイン済フラグ > 0
						RETURN 0
				CASEELSE
					;処理を行わず次へ
			ENDSELECT
	ENDSELECT
ELSE
	;全体設定に従う
	SELECTCASE カットイン演出一括表示フラグ
		CASE 1
			;非表示
			RETURN 0
		CASE 2
			;カットイン済みフラグがないなら次へ
			SIF MATCH(カットイン一日一回フラグ, 敵BATTLE_STATE_STR:戦闘行動キャラ:エネミー名) > 0
				RETURN 0
		CASEELSE
			;処理を行わず次へ
	ENDSELECT
ENDIF

;戦闘行動キャラを対象に
キャラTEMP = BATTLE_STATE:戦闘行動キャラ:キャラ登録番号
IF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/顔_デフォルト")
	汎用グラ用文字列 = 
	デフォルト用文字列 = デフォルト
	SIF CSTR:キャラTEMP:画像フォルダ == ""
		CSTR:キャラTEMP:画像フォルダ '= GET_RESOURCES_BASE_FOLDER(キャラTEMP)
ELSEIF OPTION変数:汎用立ち絵制御
	汎用グラ用文字列 = _%CSTR:キャラTEMP:汎用立ち絵登録文字列%
	デフォルト用文字列 = _%CSTR:キャラTEMP:汎用立ち絵登録文字列%
	CSTR:キャラTEMP:画像フォルダ = 汎用グラフィック
ENDIF

;アニメ選択オプションを確認する
;まず個別
作成アニメ種類 = 
SELECTCASE CSTR:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号):カットイン画像選択オプション
	CASE "横カットイン"
		IF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/横カットイン%汎用グラ用文字列%")
			作成アニメ種類 = 横カットイン
		ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/縦カットイン%汎用グラ用文字列%")
			作成アニメ種類 = 縦カットイン
		ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/短冊_%デフォルト用文字列%")
			作成アニメ種類 = 縦カットイン
		ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/顔_%デフォルト用文字列%")
			作成アニメ種類 = デフォルト
		ELSE
			RETURN 0
		ENDIF
	CASE "縦カットイン"
		IF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/縦カットイン%汎用グラ用文字列%")
			作成アニメ種類 = 縦カットイン
		ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/短冊_%デフォルト用文字列%")
			作成アニメ種類 = 縦カットイン
		ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/横カットイン%汎用グラ用文字列%")
			作成アニメ種類 = 横カットイン
		ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/顔_%デフォルト用文字列%")
			作成アニメ種類 = デフォルト
		ELSE
			RETURN 0
		ENDIF
	CASE "デフォルト"
		IF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/顔_%デフォルト用文字列%")
			作成アニメ種類 = デフォルト
		ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/縦カットイン%汎用グラ用文字列%")
			作成アニメ種類 = 縦カットイン
		ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/短冊_%デフォルト用文字列%")
			作成アニメ種類 = 縦カットイン
		ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/横カットイン%汎用グラ用文字列%")
			作成アニメ種類 = 横カットイン
		ELSE
			RETURN 0
		ENDIF
	CASE "縦横ランダム"
		IF RAND:2
			IF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/横カットイン%汎用グラ用文字列%")
				作成アニメ種類 = 横カットイン
			ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/縦カットイン%汎用グラ用文字列%")
				作成アニメ種類 = 縦カットイン
			ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/短冊_%デフォルト用文字列%")
				作成アニメ種類 = 縦カットイン
			ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/顔_%デフォルト用文字列%")
				作成アニメ種類 = デフォルト
			ELSE
				RETURN 0
			ENDIF
		ELSE
			IF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/縦カットイン%汎用グラ用文字列%")
				作成アニメ種類 = 縦カットイン
			ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/短冊_%デフォルト用文字列%")
				作成アニメ種類 = 縦カットイン
			ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/横カットイン%汎用グラ用文字列%")
				作成アニメ種類 = 横カットイン
			ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/顔_%デフォルト用文字列%")
				作成アニメ種類 = デフォルト
			ELSE
				RETURN 0
			ENDIF
		ENDIF
	CASEELSE
		;全体設定を見る
		SELECTCASE カットイン画像一括表示フラグ
			CASE 0
				;縦
				IF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/縦カットイン%汎用グラ用文字列%")
					作成アニメ種類 = 縦カットイン
				ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/短冊_%デフォルト用文字列%")
					作成アニメ種類 = 縦カットイン
				ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/横カットイン%汎用グラ用文字列%")
					作成アニメ種類 = 横カットイン
				ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/顔_%デフォルト用文字列%")
					作成アニメ種類 = デフォルト
				ELSE
					RETURN 0
				ENDIF
			CASE 1
				;横
				IF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/横カットイン%汎用グラ用文字列%")
					作成アニメ種類 = 横カットイン
				ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/縦カットイン%汎用グラ用文字列%")
					作成アニメ種類 = 縦カットイン
				ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/短冊_%デフォルト用文字列%")
					作成アニメ種類 = 縦カットイン
				ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/顔_%デフォルト用文字列%")
					作成アニメ種類 = デフォルト
				ELSE
					RETURN 0
				ENDIF
			CASE 2
				;デフォルト
				IF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/顔_%デフォルト用文字列%")
					作成アニメ種類 = デフォルト
				ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/縦カットイン%汎用グラ用文字列%")
					作成アニメ種類 = 縦カットイン
				ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/短冊_%デフォルト用文字列%")
					作成アニメ種類 = 縦カットイン
				ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/横カットイン%汎用グラ用文字列%")
					作成アニメ種類 = 横カットイン
				ELSE
					RETURN 0
				ENDIF
			CASE 3
				IF RAND:2
					IF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/縦カットイン%汎用グラ用文字列%")
						作成アニメ種類 = 縦カットイン
					ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/短冊_%デフォルト用文字列%")
						作成アニメ種類 = 縦カットイン
					ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/横カットイン%汎用グラ用文字列%")
						作成アニメ種類 = 横カットイン
					ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/顔_%デフォルト用文字列%")
						作成アニメ種類 = デフォルト
					ELSE
						RETURN 0
					ENDIF
				ELSE
					IF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/横カットイン%汎用グラ用文字列%")
						作成アニメ種類 = 横カットイン
					ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/縦カットイン%汎用グラ用文字列%")
						作成アニメ種類 = 縦カットイン
					ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/短冊_%デフォルト用文字列%")
						作成アニメ種類 = 縦カットイン
					ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/顔_%デフォルト用文字列%")
						作成アニメ種類 = デフォルト
					ELSE
						RETURN 0
					ENDIF
				ENDIF
		ENDSELECT
ENDSELECT


;カットイン発生が確定したので演出に依らない共通データ読み込み

;セリフをもらってくる
IF 口上なしフラグ
	CALL 奥義名呼び出し(キャラTEMP)
	FOR LOCAL, 0, (26 - STRLENSU(@"%TSTR:コマンド名受渡%")) / 2
		奥義メッセージ前 += "　"
	NEXT
	奥義メッセージ前 += @"%TSTR:コマンド名受渡%"
ELSE
	CALL PRINT_STR_メッセージ用(KSTR:0, キャラTEMP)
	FOR LOCAL, 0, (26 - HTML_STRINGLEN(RESULTS) / 2) / 2
		奥義メッセージ前 += "　"
	NEXT
	奥義メッセージ前 += @"%RESULTS%"
ENDIF

;中央揃え
CALL 奥義名呼び出し(キャラTEMP)
FOR LOCAL, 0, (26 - STRLENSU(@"%TSTR:コマンド名受渡%")) / 2
	奥義メッセージ後 += "　"
NEXT
奥義メッセージ後 += @"%TSTR:コマンド名受渡%"

;字幕背景
GDISPOSE レイヤー番号 + 41
SELECTCASE BATTLE_STATE:戦闘行動キャラ:属性
	CASE 0
		CALL GCREATE_拡張子(レイヤー番号 + 41, @"カットイン素材/subtitle火")
	CASE 1
		CALL GCREATE_拡張子(レイヤー番号 + 41, @"カットイン素材/subtitle水")
	CASE 2
		CALL GCREATE_拡張子(レイヤー番号 + 41, @"カットイン素材/subtitle風")
	CASE 3
		CALL GCREATE_拡張子(レイヤー番号 + 41, @"カットイン素材/subtitle土")
	CASE 4
		CALL GCREATE_拡張子(レイヤー番号 + 41, @"カットイン素材/subtitle光")
	CASE 5
		CALL GCREATE_拡張子(レイヤー番号 + 41, @"カットイン素材/subtitle闇")
ENDSELECT



SELECTCASE 作成アニメ種類
;-----------------横カットイン
	CASE "横カットイン"
		FOR LOCAL ,0 ,13
			GDISPOSE レイヤー番号 + LOCAL
			GCREATE レイヤー番号 + LOCAL, 900, 900
		NEXT

		GDISPOSE レイヤー番号 + 20
		CALL GCREATE_拡張子(レイヤー番号 + 20, @"%CSTR:キャラTEMP:画像フォルダ%/横カットイン%汎用グラ用文字列%")
		CALL グラフィックトリミング(レイヤー番号 + 20, 900, 450)

		;二枚目があるかを見る
		GDISPOSE レイヤー番号 + 21
		IF EXIST画像FILE (@"resources/%CSTR:キャラTEMP:画像フォルダ%/横カットイン1%汎用グラ用文字列%")
			CALL GCREATE_拡張子(レイヤー番号 + 21, @"%CSTR:キャラTEMP:画像フォルダ%/横カットイン1%汎用グラ用文字列%")
		ELSE
			CALL GCREATE_拡張子(レイヤー番号 + 21, @"%CSTR:キャラTEMP:画像フォルダ%/横カットイン%汎用グラ用文字列%")
		ENDIF
		CALL グラフィックトリミング(レイヤー番号 + 21, 900, 450)

		;-------------描画と透明化処理
;前編
		CALL カットイン用カラーマトリクス取得(80)
		GDRAWG レイヤー番号 + 0, レイヤー番号 + 20, 180, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 20), GHEIGHT(レイヤー番号 + 20), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 1, レイヤー番号 + 0, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(40)
		GDRAWG レイヤー番号 + 1, レイヤー番号 + 20, 150, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 20), GHEIGHT(レイヤー番号 + 20), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 2, レイヤー番号 + 1, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 2, レイヤー番号 + 20, 120, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 20), GHEIGHT(レイヤー番号 + 20), カットイン用カラーマトリクス:0:0

		CALL カットイン用カラーマトリクス取得(40)
		GDRAWG レイヤー番号 + 3, レイヤー番号 + 20, 90,  300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 20), GHEIGHT(レイヤー番号 + 20), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 3, レイヤー番号 + 2, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(80)
		GDRAWG レイヤー番号 + 4, レイヤー番号 + 20, 60,  300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 20), GHEIGHT(レイヤー番号 + 20), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 4, レイヤー番号 + 3, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0
;後編
		CALL カットイン用カラーマトリクス取得(40)
		GDRAWG レイヤー番号 + 5, レイヤー番号 + 21, 105, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 5, レイヤー番号 + 21, 120, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0

		CALL カットイン用カラーマトリクス取得(80)
		GDRAWG レイヤー番号 + 6, レイヤー番号 + 21, 120, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(40)
		GDRAWG レイヤー番号 + 6, レイヤー番号 + 21, 105, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 6, レイヤー番号 + 21, 90, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0

		CALL カットイン用カラーマトリクス取得(80)
		GDRAWG レイヤー番号 + 7, レイヤー番号 + 21, 120, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(40)
		GDRAWG レイヤー番号 + 7, レイヤー番号 + 21, 90, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 7, レイヤー番号 + 21, 60, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0

		CALL カットイン用カラーマトリクス取得(80)
		GDRAWG レイヤー番号 + 8, レイヤー番号 + 21, 120, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(40)
		GDRAWG レイヤー番号 + 8, レイヤー番号 + 21, 60, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 8, レイヤー番号 + 21, 0, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0


;字帯書き込み
		FOR LOCAL, 0, 12
			CALL カットイン用カラーマトリクス取得(0)
			GDRAWG レイヤー番号 + LOCAL, レイヤー番号 + 41, 0, 0, 900, 900, 0, 0,  GWIDTH (レイヤー番号 + 41), GHEIGHT(レイヤー番号 + 41), カットイン用カラーマトリクス:0:0
		NEXT

		FOR LOCAL, 0, 5
			GSETPEN レイヤー番号 + LOCAL, 0X80FFFFFF, 1
			GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24
			VARSET RESULTS
			表示文字数 = 0
			HTML_TAGSPLIT 奥義メッセージ前
			FOR 分割数, 0, RESULT
				IF RESULTS:分割数 == "<b>"
					GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24, 1
					CONTINUE
				ELSEIF RESULTS:分割数 == "<i>"
					GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24, 2
					CONTINUE
				ELSEIF RESULTS:分割数 == "<s>"
					GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24, 4
					CONTINUE
				ELSEIF RESULTS:分割数 == "<u>"
					GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24, 8
					CONTINUE
				ELSEIF GROUPMATCH(RESULTS:分割数, "</b>", "</i>", "</s>", "</u>")
					GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24
					CONTINUE
				ELSEIF RESULTS:分割数 == "<img src='えっちハート' height='112' width='112'>"
					GGETTEXTSIZE LOCALS, GGETFONT(レイヤー番号 + LOCAL), GGETFONTSIZE(レイヤー番号 + LOCAL)
					GDRAWSPRITE レイヤー番号 + LOCAL, "えっちハート", RESULT + 140, 620, 24, 24
					表示文字数 += 2
					CONTINUE
				ENDIF
				SIF RESULTS:分割数 == ""
					BREAK
				LOCALS = 
				FOR LOCAL:1, 0, 表示文字数
					LOCALS += " "
				NEXT
				LOCALS += @"%RESULTS:分割数%"
				GDRAWTEXT レイヤー番号 + LOCAL, @"%LOCALS%", 140, 620
				表示文字数 += STRLENS(RESULTS:分割数)
			NEXT
		NEXT

		FOR LOCAL, 5, 9
			GSETPEN レイヤー番号 + LOCAL, 0X80FFFFFF, 1
			GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24
			GDRAWTEXT レイヤー番号 + LOCAL, @"%奥義メッセージ後%", 140, 620
		NEXT

		CALL カットイン用カラーマトリクス取得(60)
		GDRAWG レイヤー番号 + 9, レイヤー番号 + 8, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(60)
		GDRAWG レイヤー番号 + 10, レイヤー番号 + 9, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(60)
		GDRAWG レイヤー番号 + 11, レイヤー番号 + 10, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0

		SPRITEDISPOSE "カットインアニメ_0"

		;----------アニメーション画像の合成
		SPRITEANIMECREATE "カットインアニメ_0", 900, 900
		SPRITEANIMEADDFRAME "カットインアニメ_0", レイヤー番号 + 0, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_0", レイヤー番号 + 1, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_0", レイヤー番号 + 2, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_0", レイヤー番号 + 3, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_0", レイヤー番号 + 4, 0, 0, 900, 900,   0,   0,  10000
		
		SPRITEDISPOSE "カットインアニメ_1"

		;----------アニメーション画像の合成
		SPRITEANIMECREATE "カットインアニメ_1", 900, 900
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 5, 0, 0, 900, 900,   0,   0, 400
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 6, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 7, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 8, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 9, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 10, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 11, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 12, 0, 0, 900, 900,   0,   0, 10000


		待機フレーム数 = 0, 40, 0, 0, 0, 0, 0, 0
		
;------------縦カットイン
	CASE "縦カットイン"
		FOR LOCAL ,0 ,13
			GDISPOSE レイヤー番号 + LOCAL
			GCREATE レイヤー番号 + LOCAL, 900, 900
		NEXT

		GDISPOSE レイヤー番号 + 20
		IF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/縦カットイン%汎用グラ用文字列%")
			CALL GCREATE_拡張子(レイヤー番号 + 20, @"%CSTR:キャラTEMP:画像フォルダ%/縦カットイン%汎用グラ用文字列%")
		ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/短冊_%デフォルト用文字列%")
			CALL GCREATE_拡張子(レイヤー番号 + 20, @"%CSTR:キャラTEMP:画像フォルダ%/短冊_%デフォルト用文字列%")
		ENDIF
		CALL グラフィックトリミング(レイヤー番号 + 20, 450, 900)

		;二枚目があれば読み込む
		GDISPOSE レイヤー番号 + 21
		IF EXIST画像FILE (@"resources/%CSTR:キャラTEMP:画像フォルダ%/縦カットイン1%汎用グラ用文字列%")
			CALL GCREATE_拡張子(レイヤー番号 + 21, @"%CSTR:キャラTEMP:画像フォルダ%/縦カットイン1%汎用グラ用文字列%")
		ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/縦カットイン%汎用グラ用文字列%")
			CALL GCREATE_拡張子(レイヤー番号 + 21, @"%CSTR:キャラTEMP:画像フォルダ%/縦カットイン%汎用グラ用文字列%")
		ELSEIF EXIST画像FILE(@"resources/%CSTR:キャラTEMP:画像フォルダ%/短冊_%デフォルト用文字列%")
			CALL GCREATE_拡張子(レイヤー番号 + 21, @"%CSTR:キャラTEMP:画像フォルダ%/短冊_%デフォルト用文字列%")
		ENDIF
		CALL グラフィックトリミング(レイヤー番号 + 21, 450, 900)

		;-------------描画と透明化処理
;前編
		CALL カットイン用カラーマトリクス取得(80)
		GDRAWG レイヤー番号 + 0, レイヤー番号 + 20, 210, 210, 270, 540, 0, 0,  GWIDTH (レイヤー番号 + 20), GHEIGHT(レイヤー番号 + 20), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 1, レイヤー番号 + 0, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(40)
		GDRAWG レイヤー番号 + 1, レイヤー番号 + 20, 180, 210, 270, 540, 0, 0,  GWIDTH (レイヤー番号 + 20), GHEIGHT(レイヤー番号 + 20), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 2, レイヤー番号 + 1, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 2, レイヤー番号 + 20, 150, 210, 270, 540, 0, 0,  GWIDTH (レイヤー番号 + 20), GHEIGHT(レイヤー番号 + 20), カットイン用カラーマトリクス:0:0

		CALL カットイン用カラーマトリクス取得(40)
		GDRAWG レイヤー番号 + 3, レイヤー番号 + 20, 120,  210, 270, 540, 0, 0,  GWIDTH (レイヤー番号 + 20), GHEIGHT(レイヤー番号 + 20), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 3, レイヤー番号 + 2, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(80)
		GDRAWG レイヤー番号 + 4, レイヤー番号 + 20,  90,  210, 270, 540, 0, 0,  GWIDTH (レイヤー番号 + 20), GHEIGHT(レイヤー番号 + 20), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 4, レイヤー番号 + 3, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0
;後編
		CALL カットイン用カラーマトリクス取得(40)
		GDRAWG レイヤー番号 + 5, レイヤー番号 + 21, 135, 210, 270, 540, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 5, レイヤー番号 + 21, 150, 210, 270, 540, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0

		CALL カットイン用カラーマトリクス取得(80)
		GDRAWG レイヤー番号 + 6, レイヤー番号 + 21, 150, 210, 270, 540, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(40)
		GDRAWG レイヤー番号 + 6, レイヤー番号 + 21, 135, 210, 270, 540, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 6, レイヤー番号 + 21, 120, 210, 270, 540, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0

		CALL カットイン用カラーマトリクス取得(80)
		GDRAWG レイヤー番号 + 7, レイヤー番号 + 21, 150, 210, 270, 540, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(40)
		GDRAWG レイヤー番号 + 7, レイヤー番号 + 21, 120, 210, 270, 540, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 7, レイヤー番号 + 21,  90, 210, 270, 540, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0

		CALL カットイン用カラーマトリクス取得(80)
		GDRAWG レイヤー番号 + 8, レイヤー番号 + 21, 150, 210, 270, 540, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(40)
		GDRAWG レイヤー番号 + 8, レイヤー番号 + 21,  90, 210, 270, 540, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 8, レイヤー番号 + 21,  30, 210, 270, 540, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0


;字帯書き込み
		FOR LOCAL, 0, 12
			CALL カットイン用カラーマトリクス取得(0)
			GDRAWG レイヤー番号 + LOCAL, レイヤー番号 + 41, 0, 0, 900, 900, 0, 0,  GWIDTH (レイヤー番号 + 41), GHEIGHT(レイヤー番号 + 41), カットイン用カラーマトリクス:0:0
		NEXT

		FOR LOCAL, 0, 5
			GSETPEN レイヤー番号 + LOCAL, 0X80FFFFFF, 1
			GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24
			VARSET RESULTS
			表示文字数 = 0
			HTML_TAGSPLIT 奥義メッセージ前
			FOR 分割数, 0, RESULT
				IF RESULTS:分割数 == "<b>"
					GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24, 1
					CONTINUE
				ELSEIF RESULTS:分割数 == "<i>"
					GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24, 2
					CONTINUE
				ELSEIF RESULTS:分割数 == "<s>"
					GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24, 4
					CONTINUE
				ELSEIF RESULTS:分割数 == "<u>"
					GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24, 8
					CONTINUE
				ELSEIF GROUPMATCH(RESULTS:分割数, "</b>", "</i>", "</s>", "</u>")
					GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24
					CONTINUE
				ELSEIF RESULTS:分割数 == "<img src='えっちハート' height='112' width='112'>"
					GGETTEXTSIZE LOCALS, GGETFONT(レイヤー番号 + LOCAL), GGETFONTSIZE(レイヤー番号 + LOCAL)
					GDRAWSPRITE レイヤー番号 + LOCAL, "えっちハート", RESULT + 140, 620, 24, 24
					表示文字数 += 2
					CONTINUE
				ENDIF
				SIF RESULTS:分割数 == ""
					BREAK
				LOCALS = 
				FOR LOCAL:1, 0, 表示文字数
					LOCALS += " "
				NEXT
				LOCALS += @"%RESULTS:分割数%"
				GDRAWTEXT レイヤー番号 + LOCAL, @"%LOCALS%", 140, 620
				表示文字数 += STRLENS(RESULTS:分割数)
			NEXT
		NEXT

		FOR LOCAL, 5, 9
			GSETPEN レイヤー番号 + LOCAL, 0X80FFFFFF, 1
			GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24
			GDRAWTEXT レイヤー番号 + LOCAL, @"%奥義メッセージ後%", 140, 620
		NEXT

		CALL カットイン用カラーマトリクス取得(60)
		GDRAWG レイヤー番号 + 9, レイヤー番号 + 8, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(60)
		GDRAWG レイヤー番号 + 10, レイヤー番号 + 9, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(60)
		GDRAWG レイヤー番号 + 11, レイヤー番号 + 10, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0

		SPRITEDISPOSE "カットインアニメ_0"

		;----------アニメーション画像の合成
		SPRITEANIMECREATE "カットインアニメ_0", 900, 900
		SPRITEANIMEADDFRAME "カットインアニメ_0", レイヤー番号 + 0, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_0", レイヤー番号 + 1, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_0", レイヤー番号 + 2, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_0", レイヤー番号 + 3, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_0", レイヤー番号 + 4, 0, 0, 900, 900,   0,   0,  10000
		
		SPRITEDISPOSE "カットインアニメ_1"

		;----------アニメーション画像の合成
		SPRITEANIMECREATE "カットインアニメ_1", 900, 900
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 5, 0, 0, 900, 900,   0,   0, 400
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 6, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 7, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 8, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 9, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 10, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 11, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 12, 0, 0, 900, 900,   0,   0, 10000

		待機フレーム数 = 0, 40, 0, 0, 0, 0, 0, 0
		
		;----------------デフォルトカットイン
	CASE "デフォルト"
		FOR LOCAL ,0 ,13
			GDISPOSE レイヤー番号 + LOCAL
			GCREATE レイヤー番号 + LOCAL, 900, 900
		NEXT
		GDISPOSE レイヤー番号 + 20
			CALL GCREATE_拡張子(レイヤー番号 + 20, @"%CSTR:キャラTEMP:画像フォルダ%/顔_%デフォルト用文字列%")
		CALL グラフィックトリミング(レイヤー番号 + 20, 900, 450)
		GDISPOSE レイヤー番号 + 21
		IF EXIST画像FILE (@"resources/%CSTR:キャラTEMP:画像フォルダ%/顔_デフォルト_差分_表情")
			CALL GCREATE_拡張子(レイヤー番号 + 21, @"%CSTR:キャラTEMP:画像フォルダ%/顔_デフォルト_差分_表情")
		ELSE
			CALL GCREATE_拡張子(レイヤー番号 + 21, @"%CSTR:キャラTEMP:画像フォルダ%/顔_%デフォルト用文字列%")
		ENDIF
		CALL グラフィックトリミング(レイヤー番号 + 21, 900, 450)

		;-------------描画と透明化処理
;前編
		CALL カットイン用カラーマトリクス取得(80)
		GDRAWG レイヤー番号 + 0, レイヤー番号 + 20, 180, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 20), GHEIGHT(レイヤー番号 + 20), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 1, レイヤー番号 + 0, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(40)
		GDRAWG レイヤー番号 + 1, レイヤー番号 + 20, 150, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 20), GHEIGHT(レイヤー番号 + 20), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 2, レイヤー番号 + 1, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 2, レイヤー番号 + 20, 120, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 20), GHEIGHT(レイヤー番号 + 20), カットイン用カラーマトリクス:0:0

		CALL カットイン用カラーマトリクス取得(40)
		GDRAWG レイヤー番号 + 3, レイヤー番号 + 20, 90,  300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 20), GHEIGHT(レイヤー番号 + 20), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 3, レイヤー番号 + 2, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(80)
		GDRAWG レイヤー番号 + 4, レイヤー番号 + 20, 60,  300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 20), GHEIGHT(レイヤー番号 + 20), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 4, レイヤー番号 + 3, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0
;後編
		CALL カットイン用カラーマトリクス取得(40)
		GDRAWG レイヤー番号 + 5, レイヤー番号 + 21, 105, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 5, レイヤー番号 + 21, 120, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0

		CALL カットイン用カラーマトリクス取得(80)
		GDRAWG レイヤー番号 + 6, レイヤー番号 + 21, 120, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(40)
		GDRAWG レイヤー番号 + 6, レイヤー番号 + 21, 105, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 6, レイヤー番号 + 21, 90, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0

		CALL カットイン用カラーマトリクス取得(80)
		GDRAWG レイヤー番号 + 7, レイヤー番号 + 21, 120, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(40)
		GDRAWG レイヤー番号 + 7, レイヤー番号 + 21, 90, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 7, レイヤー番号 + 21, 60, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0

		CALL カットイン用カラーマトリクス取得(80)
		GDRAWG レイヤー番号 + 8, レイヤー番号 + 21, 120, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(40)
		GDRAWG レイヤー番号 + 8, レイヤー番号 + 21, 60, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(0)
		GDRAWG レイヤー番号 + 8, レイヤー番号 + 21, 0, 300, 630, 315, 0, 0,  GWIDTH (レイヤー番号 + 21), GHEIGHT(レイヤー番号 + 21), カットイン用カラーマトリクス:0:0

;字帯書き込み
		FOR LOCAL, 0, 12
			CALL カットイン用カラーマトリクス取得(0)
			GDRAWG レイヤー番号 + LOCAL, レイヤー番号 + 41, 0, 0, 900, 900, 0, 0,  GWIDTH (レイヤー番号 + 41), GHEIGHT(レイヤー番号 + 41), カットイン用カラーマトリクス:0:0
		NEXT

		FOR LOCAL, 0, 5
			GSETPEN レイヤー番号 + LOCAL, 0X80FFFFFF, 1
			GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24
			VARSET RESULTS
			表示文字数 = 0
			HTML_TAGSPLIT 奥義メッセージ前
			FOR 分割数, 0, RESULT
				IF RESULTS:分割数 == "<b>"
					GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24, 1
					CONTINUE
				ELSEIF RESULTS:分割数 == "<i>"
					GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24, 2
					CONTINUE
				ELSEIF RESULTS:分割数 == "<s>"
					GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24, 4
					CONTINUE
				ELSEIF RESULTS:分割数 == "<u>"
					GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24, 8
					CONTINUE
				ELSEIF GROUPMATCH(RESULTS:分割数, "</b>", "</i>", "</s>", "</u>")
					GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24
					CONTINUE
				ELSEIF RESULTS:分割数 == "<img src='えっちハート' height='112' width='112'>"
					GGETTEXTSIZE LOCALS, GGETFONT(レイヤー番号 + LOCAL), GGETFONTSIZE(レイヤー番号 + LOCAL)
					GDRAWSPRITE レイヤー番号 + LOCAL, "えっちハート", RESULT + 140, 620, 24, 24
					表示文字数 += 2
					CONTINUE
				ENDIF
				SIF RESULTS:分割数 == ""
					BREAK
				LOCALS = 
				FOR LOCAL:1, 0, 表示文字数
					LOCALS += " "
				NEXT
				LOCALS += @"%RESULTS:分割数%"
				GDRAWTEXT レイヤー番号 + LOCAL, @"%LOCALS%", 140, 620
				表示文字数 += STRLENS(RESULTS:分割数)
			NEXT
		NEXT

		FOR LOCAL, 5, 9
			GSETPEN レイヤー番号 + LOCAL, 0X80FFFFFF, 1
			GSETFONT レイヤー番号 + LOCAL, GETFONT(), 24
			GDRAWTEXT レイヤー番号 + LOCAL, @"%奥義メッセージ後%", 140, 620
		NEXT

		CALL カットイン用カラーマトリクス取得(60)
		GDRAWG レイヤー番号 + 9, レイヤー番号 + 8, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(60)
		GDRAWG レイヤー番号 + 10, レイヤー番号 + 9, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0
		CALL カットイン用カラーマトリクス取得(60)
		GDRAWG レイヤー番号 + 11, レイヤー番号 + 10, 0, 0, 900, 900, 0, 0, 900, 900 , カットイン用カラーマトリクス:0:0

		SPRITEDISPOSE "カットインアニメ_0"

		;----------アニメーション画像の合成
		SPRITEANIMECREATE "カットインアニメ_0", 900, 900
		SPRITEANIMEADDFRAME "カットインアニメ_0", レイヤー番号 + 0, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_0", レイヤー番号 + 1, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_0", レイヤー番号 + 2, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_0", レイヤー番号 + 3, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_0", レイヤー番号 + 4, 0, 0, 900, 900,   0,   0,  10000
		
		SPRITEDISPOSE "カットインアニメ_1"

		;----------アニメーション画像の合成
		SPRITEANIMECREATE "カットインアニメ_1", 900, 900
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 5, 0, 0, 900, 900,   0,   0, 400
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 6, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 7, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 8, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 9, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 10, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 11, 0, 0, 900, 900,   0,   0, 100
		SPRITEANIMEADDFRAME "カットインアニメ_1", レイヤー番号 + 12, 0, 0, 900, 900,   0,   0, 10000


;アニメ_1以降の再生時間を記憶する試み
		;アニメ側がAWAIT回数を指定できた方が拡張性が高い
		;ディレイの合計 / アニメ用カウンタ が理論値だと思うのだがずれるので値が確定できない
		;セリフが長いなど極端に長いアニメを作りたい人向け？
		待機フレーム数 = 0, 40, 0, 0, 0, 0, 0, 0

ENDSELECT

;一日一回表示するのとき
IF カットイン演出一括表示フラグ == 2
	IF 戦闘行動キャラ < 10
		TCVAR:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号):カットイン済フラグ = 1
	ELSE
		FOR LOCAL, 0, 100
			IF カットイン一日一回フラグ:LOCAL == ""
				カットイン一日一回フラグ = %敵BATTLE_STATE_STR:戦闘行動キャラ:エネミー名%
				BREAK
			ENDIF
		NEXT
	ENDIF
ENDIF

RETURN 1

