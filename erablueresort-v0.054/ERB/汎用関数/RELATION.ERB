
;-------------------------------------------------
;キャラ同士の関係性の変動を保持・参照する関数郡
;-------------------------------------------------
;INIT_RELATION(キャラ登録番号)　同行候補キャラ設定より、関係性の初期値を設定する
;-------------------------------------------------
@INIT_RELATION(ARG)
#DIM L_CNT
#DIM L_C
#DIM REL_NO

SIF !INRANGE(ARG, 0, CHARANUM-1)
	RETURN

VARSET RELATION_NO:ARG:0
VARSET RELATION_VAL:ARG:0

;VARSET LOCAL
;FOR L_CNT, 0, 100
;	SIF L_CNT >= CHARANUM
;		BREAK
;	LOCAL:L_CNT = 同行候補キャラ番号:ARG:L_CNT
;NEXT

L_C = 0
FOR L_CNT, 1, CHARANUM
	REL_NO = FINDELEMENT(同行候補キャラ番号:ARG:0, L_CNT)
	SIF REL_NO < 0
		CONTINUE
	RELATION_NO:ARG:L_C = 同行候補キャラ番号:ARG:REL_NO
	RELATION_VAL:ARG:L_C += 同行候補キャラ確率:ARG:REL_NO * 100
	L_C ++
	SIF L_C >= 100
		BREAK
NEXT

;-------------------------------------------------
;SET_RELATION(ARG, ARG:1, ARG:2, OVERWRITE = 0)　キャラ登録番号ARGのARG:1に対する関係性にARG:2をセットする
;OVERWRITEが真なら既に関係があっても上書きする
;正常に追加できたら0、空きがなかった場合は1、引数チェックで弾かれた場合は-1を返す
;基本、アップデート用の処理なので削除はしない
;-------------------------------------------------
@SET_RELATION(ARG, ARG:1, ARG:2, OVERWRITE = 0)
#DIM OVERWRITE
#DIM 同行配列番号
#DIM REL_NO
#DIM L_C

SIF !INRANGE(ARG, 0, CHARANUM-1)
	RETURN -1
SIF !INRANGE(ARG:1, 0, CHARANUM-1)
	RETURN -1

;同キャラの場合戻る
SIF ARG == ARG:1
	RETURN -1

IF OVERWRITE
	;上書きモード時の処理
	CALL DEL_RELATION(ARG, ARG:1)
	IF FINDELEMENT(同行候補キャラ番号:ARG:0, 0) < 0
		CALL DEL_RELATION(ARG, -1, 1)
	ENDIF
	IF FINDELEMENT(RELATION_NO:ARG:0, 0) < 0
		CALL DEL_RELATION(ARG, -1)
	ENDIF
ELSEIF FINDELEMENT(同行候補キャラ番号:ARG:0, ARG:1) < 0 && FINDELEMENT(同行候補キャラ番号:ARG:0, 0) >= 0 && FINDELEMENT(RELATION_NO:ARG:0, ARG:1) < 0 && FINDELEMENT(RELATION_NO:ARG:0, 0) < 0
	;削除によるインデックスずれ事故が起きないよう、事前に空きを作る
	CALL DEL_RELATION(ARG, -1)
ENDIF

;無い場合のみ追加する
IF FINDELEMENT(同行候補キャラ番号:ARG:0, ARG:1) < 0
	;空いてる場所を検索して突っ込む
	同行配列番号 = FINDELEMENT(同行候補キャラ番号:ARG:0, 0)
	SIF 同行配列番号 < 0
		RETURN 1

	REL_NO = FINDELEMENT(RELATION_NO:ARG:0, ARG:1)
	IF REL_NO < 0
		;無い場合、空いてる場所を検索して突っ込む
		L_C = FINDELEMENT(RELATION_NO:ARG:0, 0)
		SIF L_C < 0
			RETURN 1

		同行候補キャラ番号:ARG:同行配列番号 = ARG:1
		同行候補キャラ確率:ARG:同行配列番号 = ARG:2
		RELATION_NO:ARG:L_C = ARG:1
		RELATION_VAL:ARG:L_C = ARG:2 * 100
	ELSE
		同行候補キャラ番号:ARG:同行配列番号 = ARG:1
		同行候補キャラ確率:ARG:同行配列番号 = ARG:2
		RELATION_NO:ARG:REL_NO = ARG:1
		RELATION_VAL:ARG:REL_NO = ARG:2 * 100
	ENDIF
ENDIF
RETURN 0

;-------------------------------------------------
;ADD_RELATION(ARG, ARG:1, ARG:2)　キャラ登録番号ARGのARG:1に対する関係性にARG:2を加算する
;加算結果が100を上回るたび、同行候補キャラ確率を上昇させる
;-------------------------------------------------
@ADD_RELATION(ARG, ARG:1, ARG:2)
#DIM L_CNT
#DIM REL_NO
#DIM 変動前同行候補キャラ確率
#DIM 変動後同行候補キャラ確率

SIF !INRANGE(ARG, 0, CHARANUM-1)
	RETURN
SIF !INRANGE(ARG:1, 0, CHARANUM-1)
	RETURN

;同キャラの場合戻る
SIF ARG == ARG:1
	RETURN

;同行確率がマイナスの場合、どうやっても上昇させない
LOCAL = FINDELEMENT(同行候補キャラ番号:ARG:0, ARG:1)
IF LOCAL > -1 && 同行候補キャラ確率:ARG:LOCAL < 0
	RETURN
ENDIF

;変動前確率を記憶しておく
変動後同行候補キャラ確率 = 0
IF LOCAL > -1
	変動前同行候補キャラ確率 = 同行候補キャラ確率:ARG:LOCAL
ELSE
	変動前同行候補キャラ確率 = 0
ENDIF

REL_NO = FINDELEMENT(RELATION_NO:ARG:0, ARG:1)

IF REL_NO < 0 && ARG:2 < 1
	;まだ関係性が存在しない場合かつ加算ではない場合、変動させず0を返す
	RETURN
ELSEIF REL_NO < 0
	;まだ関係性が存在しない場合、新規に作成する
	L_CNT = FINDELEMENT(RELATION_NO:ARG:0, 0)
	IF L_CNT >= 0
;	FOR L_CNT, 0, 100
;		SIF RELATION_NO:ARG:L_CNT
;			CONTINUE
		RELATION_NO:ARG:L_CNT = ARG:1
		RELATION_VAL:ARG:L_CNT = ARG:2
;		BREAK
;	NEXT
;	IF L_CNT == 99 && RELATION_NO:L_CNT != ARG:1
	ELSE
		;空きがない場合、削除して追加する
		CALL DEL_RELATION(ARG, -1)
		RELATION_NO:ARG:99 = ARG:1
		RELATION_VAL:ARG:99 = ARG:2
	ENDIF
	;関係性の値が500または既存の値の最低値を超えた場合、同行候補になる
	IF ARG:2 >= MAX(500, MINARRAY(RELATION_VAL:ARG:0))
		CALL SET_同行候補(ARG, ARG:1, ARG:2)
	ENDIF
ELSE
	;すでに関係性が存在する場合、増加させる
	;増加後、100の位が繰り上がる場合は同行確率を上昇させる
	LOCAL:100 =  RELATION_VAL:ARG:REL_NO % 100 + ARG:2
	RELATION_VAL:ARG:REL_NO += ARG:2
	;負の値は保持しない
	IF RELATION_VAL:ARG:REL_NO < 0
		CALL DEL_RELATION(ARG, ARG:1)
		RETURN
	ENDIF
	IF LOCAL:100 >= 100
		LOCAL = FINDELEMENT(同行候補キャラ番号:ARG:0, ARG:1)
		IF LOCAL >= 0
			同行候補キャラ確率:ARG:LOCAL += LOCAL:100 / 100
			変動後同行候補キャラ確率 = 同行候補キャラ確率:ARG:LOCAL
		ELSEIF RELATION_VAL:ARG:REL_NO >= 500
			;新規に同行関係になるのは5％から
			CALL SET_同行候補(ARG, ARG:1, RELATION_VAL:ARG:REL_NO)
		ENDIF
	ENDIF
ENDIF

;変動前後を比較して、履歴に登録する
;一度に10以上上昇したとき
SIF 変動後同行候補キャラ確率 - 変動前同行候補キャラ確率 >= 10
	CALL 履歴データベース登録(CFLAG:ARG:人物番号, @"与%CALLNAME:(ARG:1)%变得亲密起来", "日常")
;Ｎ未満からＮ以上に変化している時
SIF 変動前同行候補キャラ確率 < 20 && 変動後同行候補キャラ確率 >= 20
	CALL 履歴データベース登録(CFLAG:ARG:人物番号, @"与%CALLNAME:(ARG:1)%关系变好了", "日常")
SIF 変動前同行候補キャラ確率 < 50 && 変動後同行候補キャラ確率 >= 50
	CALL 履歴データベース登録(CFLAG:ARG:人物番号, @"最近经常与%CALLNAME:(ARG:1)%在一起", "日常")
SIF 変動前同行候補キャラ確率 < 100 && 変動後同行候補キャラ確率 >= 100
	CALL 履歴データベース登録(CFLAG:ARG:人物番号, @"无论何时都与%CALLNAME:(ARG:1)%形影不离", "日常")


RETURN

;-------------------------------------------------
;GET_RELATION(ARG, ARG:1)　キャラ登録番号ARGのARG:1に対する関係性を獲得する
;-------------------------------------------------
@GET_RELATION(ARG, ARG:1)
#FUNCTION
;#DIM L_CNT
#DIM REL_NO
SIF !INRANGE(ARG, 0, CHARANUM-1)
	RETURNF 0
SIF !INRANGE(ARG:1, 0, CHARANUM-1)
	RETURNF 0

;VARSET LOCAL
;FOR L_CNT, 0, 100
;	LOCAL:L_CNT = RELATION_NO:ARG:L_CNT
;NEXT

;REL_NO = FINDELEMENT(LOCAL, ARG:1)
REL_NO = FINDELEMENT(RELATION_NO:ARG:0, ARG:1)
RESULT:1 = REL_NO
SIF REL_NO < 0
	RETURNF 0

RETURNF RELATION_VAL:ARG:REL_NO

;-------------------------------------------------
;DEL_RELATION(ARG, ARG:1, 同行候補 = 0)　キャラ登録番号ARGのARG:1に対する関係性を破棄する
;ARG:1が負の値の場合、{絶対値}個分が空になるようにRELATION_VALが低い順に破棄する
;同行候補が真の場合、同行候補キャラ配列にも値が存在するものだけが削除対象になる(ARG:1が負の場合)
;-------------------------------------------------
@DEL_RELATION(ARG, ARG:1, 同行候補 = 0)
#DIM 同行候補
#DIM L_CNT
#DIM REL_NO, 3
#DIM 最小値

SIF !INRANGE(ARG, 0, CHARANUM-1)
	RETURN

IF ARG:1 >= 0
	;キャラ番号ARG:1を探して削除する
	REL_NO = FINDELEMENT(RELATION_NO:ARG:0, ARG:1)
	IF REL_NO >= 0
		ARRAYREMOVE RELATION_NO:ARG:0, REL_NO, 1
		ARRAYREMOVE RELATION_VAL:ARG:0, REL_NO, 1
		;同行候補も削除する
		REL_NO:1 = FINDELEMENT(同行候補キャラ番号:ARG:0, ARG:1)
		IF REL_NO:1 >= 0
			ARRAYREMOVE 同行候補キャラ番号:ARG:0, REL_NO:1, 1
			ARRAYREMOVE 同行候補キャラ確率:ARG:0, REL_NO:1, 1
		ENDIF
	ENDIF
ELSE
	FOR LOCAL, 0, ABS(ARG:1)
		;一番低い値を探して破棄する
		最小値 = __INT_MAX__
		REL_NO = -1
		FOR LOCAL, 0, (100 - ABS(ARG:1))
			SIF 同行候補 && FINDELEMENT(同行候補キャラ番号:ARG:0, RELATION_NO:ARG:LOCAL) == -1
				CONTINUE
			IF 最小値 > RELATION_VAL:ARG:LOCAL
				最小値 = RELATION_VAL:ARG:LOCAL
				REL_NO = LOCAL
			ENDIF
		NEXT
		;登録されているキャラ番号を記録しておく
		REL_NO:2 = RELATION_NO:ARG:REL_NO
		ARRAYREMOVE RELATION_NO:ARG:0, REL_NO, 1
		ARRAYREMOVE RELATION_VAL:ARG:0, REL_NO, 1
		;同行候補も削除する
		REL_NO:1 = FINDELEMENT(同行候補キャラ番号:ARG:0, REL_NO:2)
		IF REL_NO:1 >= 0
			ARRAYREMOVE 同行候補キャラ番号:ARG:0, REL_NO:1, 1
			ARRAYREMOVE 同行候補キャラ確率:ARG:0, REL_NO:1, 1
		ENDIF
	NEXT
ENDIF

;-------------------------------------------------
;SET_同行候補(ARG, ARG:1, ARG:2)　
;キャラ登録番号ARGにARG:1を同行候補として設定する。同行確率は(ARG:2)/100
;-------------------------------------------------
@SET_同行候補(ARG, ARG:1, ARG:2)
#DIM L_CNT
#DIM REL_NO

SIF !INRANGE(ARG, 0, CHARANUM-1)
	RETURN -1
SIF !INRANGE(ARG:1, 0, CHARANUM-1)
	RETURN -1

REL_NO = FINDELEMENT(同行候補キャラ番号:ARG:0, 0)
IF REL_NO < 0
	;空きがない場合、空きを作る
	CALL DEL_RELATION(ARG, -1, 1)
	;自分自身が削除された場合、何もせず終わる
	SIF FINDELEMENT(RELATION_NO:ARG:0, ARG:1) == -1
		RETURN
	REL_NO = 99
ENDIF

同行候補キャラ番号:ARG:REL_NO = ARG:1
同行候補キャラ確率:ARG:REL_NO = ARG:2 / 100

;-------------------------------------------------
;関係性一括上昇(ARG, ARG:1, ARG:2)　
;キャラ登録番号ARGのその場にいるTARGET全員に対するRELATIONを(ARG:1)上昇させる
;ARG:2は成功度合いによる補正。-1で半分、0で等倍、1で1.5倍、2で2倍…となる
;-------------------------------------------------
@関係性一括上昇(ARG, ARG:1, ARG:2=0)
#DIM L_CNT

FOR L_CNT, 1, CHARANUM
	SIF TARGET:L_CNT <= 0
		BREAK
	SIF CFLAG:(TARGET:L_CNT):睡眠 || CFLAG:(TARGET:L_CNT):隠密 || ARG == (TARGET:L_CNT)
		CONTINUE
	CALL ADD_RELATION(ARG, (TARGET:L_CNT), ARG:1 * (ARG:2 + 2) / 2)
NEXT

;-------------------------------------------------
;関係性一括上昇_探索(ARG, ARG:1)　
;キャラ登録番号ARGの探索パーティ全員に対するRELATIONを(ARG:1)上昇させる
;ARG:2は成功度合いによる補正。-1で半分、0で等倍、1で1.5倍、2で2倍…となる
;-------------------------------------------------
@関係性一括上昇_探索(ARG, ARG:1, ARG:2=0)
#DIM L_CNT

FOR L_CNT, 0, 4
	SIF BATTLE_STATE:L_CNT:キャラ登録番号 < 1 || BATTLE_STATE:L_CNT:キャラ登録番号 == ARG
		CONTINUE
	CALL ADD_RELATION(ARG, BATTLE_STATE:L_CNT:キャラ登録番号, ARG:1 * (ARG:2 + 2) / 2)
NEXT

;-------------------------------------------------
;関係性同行決定　
;関係性に応じて一緒に行動するか否かをランダムで決定します
;-------------------------------------------------
@関係性同行決定
#DIM L_CNT, 2
#DIM REL_NO, 100
#DIM REL_VAL, 100
#DIM TREL_NO
#DIM SUM_REL

;関係性に応じて一緒に行動する
FOR LOCAL, 1, CHARANUM
	SIF CFLAG:LOCAL:滞在期間 < 0
		CONTINUE
	;お祭りや業務への参加は変化しない
	SIF STRFIND(移動ルーチン:LOCAL:ルーチンID, "FESTIVAL") > -1 || STRFIND(移動ルーチン:LOCAL:ルーチンID, "業務") > -1
		CONTINUE
	;既に一緒に行動するキャラがいる場合は変化しない
	SIF TCVAR:LOCAL:行動ロック
		CONTINUE
	SIF CFLAG:LOCAL:デート
		CONTINUE

	VARSET REL_NO
	VARSET REL_VAL

	L_CNT:1 = 0
	LOCALS = %CALLNAME:LOCAL%の関係度 
	FOR L_CNT, 0, 100
		TREL_NO = RELATION_NO:LOCAL:L_CNT
		SIF TREL_NO >= CHARANUM
			CONTINUE
		SIF TREL_NO < 1
			BREAK
		SIF CFLAG:TREL_NO:滞在期間 < 0
			CONTINUE
		SIF STRFIND(移動ルーチン:TREL_NO:ルーチンID, "業務") > -1
			CONTINUE
		REL_NO:(L_CNT:1) = RELATION_NO:LOCAL:L_CNT
		;業務に引っ付いて回る確率は低め
;		IF STRFIND(移動ルーチン:TREL_NO:ルーチンID, "業務") > -1
;			REL_VAL:(L_CNT:1) = RELATION_VAL:LOCAL:L_CNT / 10
;		ELSE
;			REL_VAL:(L_CNT:1) = RELATION_VAL:LOCAL:L_CNT
;		ENDIF
		LOCALS += @"/%CALLNAME:TREL_NO%({REL_VAL:(L_CNT:1)})"
		L_CNT:1 ++
	NEXT
	SUM_REL = SUMARRAY(REL_VAL)
	LOCAL:2 = RAND:(SUM_REL + MAX(SUM_REL / 3, 5000))
	FOR L_CNT, 0, FINDELEMENT(REL_NO, 0)
		TREL_NO = REL_NO:L_CNT
		IF LOCAL:2 < REL_VAL:L_CNT
			移動ルーチン:LOCAL:ルーチンID '= 移動ルーチン:TREL_NO:ルーチンID
			移動ルーチン:LOCAL:PMルーチンID '= 移動ルーチン:TREL_NO:PMルーチンID
			CALL COPY_SCHEDULE(TREL_NO, LOCAL)
			TCVAR:LOCAL:行動時間ゆらぎ = TCVAR:TREL_NO:行動時間ゆらぎ
			TCVAR:TREL_NO:行動ロック = 1
			;少しだけ仲良くなる
			CALL ADD_RELATION(LOCAL, TREL_NO, 5)
			CALL ADD_RELATION(TREL_NO, LOCAL, 5)
			BREAK
		ENDIF
		LOCAL:2 -= REL_VAL:L_CNT
	NEXT
NEXT

;-------------------------------------------------
;RELATION_うふふ時補正(対象キャラ:0, 対象キャラ:1, 補正前上昇値)
;複数プレイによる関係性上昇時の値に補正をかける
;-------------------------------------------------
@RELATION_うふふ時補正(対象キャラ:0, 対象キャラ:1, 補正前上昇値)
#FUNCTION
#DIM 対象キャラ, 2
#DIM 補正前上昇値
#DIM 補正後上昇値

SIF !INRANGE(対象キャラ:0, 0, CHARANUM-1)
	RETURNF 補正前上昇値
SIF !INRANGE(対象キャラ:1, 0, CHARANUM-1)
	RETURNF 補正前上昇値

;同キャラの場合戻る
SIF 対象キャラ:0 == 対象キャラ:1
	RETURNF 補正前上昇値

補正後上昇値 = 補正前上昇値

;[ハーレム一人前]以上をあなたが持つ場合、[恋慕]同士は仲良くなりやすい
IF あなた特殊能力:ハーレム >= 2 && TALENT:(対象キャラ:0):恋慕 && TALENT:(対象キャラ:1):恋慕
	IF あなた特殊能力:ハーレム >= 5
		補正後上昇値 += 10
	ELSE
		補正後上昇値 += 1
	ENDIF
	補正後上昇値 = 補正後上昇値 * (11 + POWER(あなた特殊能力:ハーレム - 2, 2)) / 10
ENDIF

RETURNF 補正後上昇値
