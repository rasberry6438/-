;********************************************************************************************
;2020/4/18 作成 ロウ@TW夢子口上の人
;
;Licence  :ライセンスフリー(CC0)。
;
;グラフィック表示簡易化ライブラリ
;なんかややこしいグラフィック表示関連を簡単に表示できるようにまとめたもの。
;HTMLもどきだし、可読性悪いし、冗長なので「もう画像指定したら縦幅とか勝手に揃えろよ」っていうことで作りました。
;このERBは画像分割、およびアニメーションを作成するためのものです。
;********************************************************************************************

;********************************************************************************************
;スプライト生成用関数
;一枚の画像からスプライトを生成し、同時にリソースとして保存する。
;つまりリソースの画像のCSV表記をせずとも、動的にスプライトを登録する。
;既に読んだことのあるリソースファイル名を記述した場合はグラフィックIDを発行せずに既存のGIDを使用する。
;登録したスプライト名は以後通常の画像と同じように使用することができる。
;********************************************************************************************
@スプライト生成(リソースファイル名, 出力スプライト名, 始点X = 0, 始点Y = 0, 横幅 = 0, 縦幅 = 0)
#DIM グラフィックID		;リソースを登録するグラフィックID
#DIMS リソースファイル名		;参照するリソースファイル名称
#DIMS 出力スプライト名	;出力するスプライト（内部用画像）の名称
#DIM 始点X				;スプライト作成時の始点X座標
#DIM 始点Y				;スプライト作成時の始点Y座標
#DIM 横幅				;スプライト作成時の終点X座標
#DIM 縦幅				;スプライト作成時の終点Y座標

;指定したスプライト名で既に生成されている場合は関数を終了する
SIF SPRITECREATED(@"%出力スプライト名%")
	RETURN 0
;既に読み込まれているリソースファイル名である場合、そのグラフィックIDを使用する
FOR LOCAL, 0, GPL保有GID数
	SIF GPLリソース名:LOCAL == ""
		BREAK
	IF GPLリソース名:LOCAL == リソースファイル名
		グラフィックID = GPLグラフィックID:LOCAL
		LOCAL-- ;BREAK時に何故か再び加算されてしまうのでデクリメント
		BREAK
	ENDIF
NEXT
;グラフィックIDがまだ作成されていないなら新規登録する
IF LOCAL == GPL保有GID数
	;前回呼び出されていれば続きから始める
	グラフィックID = NEXT_GID
	WHILE GCREATED(グラフィックID)
		;空いているグラフィックIDを走査する
		グラフィックID ++
	WEND
	;次回は続きから走査するように設定
	NEXT_GID = グラフィックID + 1
	;グラフィックの取り込み
	IF !GCREATE_拡張子F(グラフィックID, リソースファイル名)
		DEBUGPRINTFORML グラフィックの作成に失敗しました。
		DEBUGPRINTFORML リソースが見つからなかった可能性があります。
		RETURN 0
	ENDIF
	GPLグラフィックID:GPL保有GID数 = グラフィックID
	GPLリソース名:GPL保有GID数 '= リソースファイル名
	GPL保有GID数++
	;DEBUGPRINTFORML グラフィック番号「{グラフィックID}」に「%リソースファイル名%」を登録しました。
ENDIF

;スプライト作成 サイズ指定されていない場合はグラフィック全体をスプライトにする
IF 横幅 == 0 || 縦幅 == 0
	GWIDTH グラフィックID
	横幅 = RESULT
	GHEIGHT グラフィックID
	縦幅 = RESULT
ENDIF
SPRITECREATE @"%出力スプライト名%", グラフィックID, 始点X, 始点Y, 横幅, 縦幅
;DEBUGPRINTFORML スプライト「%出力スプライト名%」を生成しました。
RETURN 1

;********************************************************************************************
;画像廃棄用関数
;保存されたグラフィックをメモリから解放する。
;指定する方法は対象のリソースファイル名を格納した変数、もしくは配列を引数に渡すこと。
;また、複製を行った場合は複製した先のスプライト名を格納した変数、もしくは配列を引数に渡すこと。
;本ライブラリは大文字小文字のあいまい判定を行わないため、その点を注意してください。
;なお、この関数では本ライブラリで作成したグラフィック以外は廃棄することができない。
;本ライブラリ外で作成されたグラフィックの廃棄は自前でGDISPOSEを行うこと。
;********************************************************************************************
@画像廃棄(リソースファイル名)
#DIM グラフィックID		;リソースを登録するグラフィックID
#DIMS REF リソースファイル名		;参照するリソースファイル名称
;既に読み込まれているリソースファイル名を探し、そのグラフィックIDを使用する
LOCAL:1 = 0
WHILE リソースファイル名:(LOCAL:1) != ""
	;ライブラリによって登録されたGIDに対象の名称があるかチェック
	FOR LOCAL, 0, GPL保有GID数
		SIF GPLリソース名:LOCAL == ""
			BREAK
		IF GPLリソース名:LOCAL == リソースファイル名:(LOCAL:1)
			グラフィックID = GPLグラフィックID:LOCAL
			LOCAL-- ;BREAK時に何故か再び加算されてしまうのでデクリメント
			BREAK
		ENDIF
	NEXT
	;グラフィックIDが見つからなかったら次のループへ
	IF LOCAL == GPL保有GID数
		LOCAL:1++
		CONTINUE
	ENDIF
	;グラフィック廃棄
	ARRAYREMOVE GPLリソース名, LOCAL, 1
	ARRAYREMOVE GPLグラフィックID, LOCAL, 1
	GPL保有GID数--
	GDISPOSE グラフィックID
	;DEBUGPRINTFORML グラフィックID「{グラフィックID}」を廃棄しました。
	LOCAL--
WEND
RETURN 1

;********************************************************************************************
;全画像廃棄用関数
;本ライブラリで作成したグラフィックを全てメモリから解放する。
;なお、この関数では本ライブラリで作成したグラフィック以外は廃棄することができない。
;本ライブラリ外で作成されたグラフィックの廃棄は自前でGDISPOSEを行うこと。
;********************************************************************************************
@全画像廃棄
#DIM グラフィックID		;リソースを登録するグラフィックID
WHILE GPL保有GID数 > 0
	;グラフィック廃棄
	グラフィックID = GPLグラフィックID:0
	ARRAYREMOVE GPLリソース名, 0, 1
	ARRAYREMOVE GPLグラフィックID, 0, 1
	GPL保有GID数--
	GDISPOSE グラフィックID
	;DEBUGPRINTFORML グラフィックID「{グラフィックID}」を廃棄しました。
WEND
RETURN 1

;********************************************************************************************
;バッファ画像廃棄用関数
;本ライブラリで作成した、スプライトを元に派生作成されたグラフィックを全てメモリから解放する。
;これは拡大、縮小されたグラフィックを指す
;この関数はライブラリを用いてグラフィック描画をしている場合に、定期的に呼ばれるべきである。
;なお、この関数では本ライブラリで作成したグラフィック以外は廃棄することができない。
;本ライブラリ外で作成されたグラフィックの廃棄は自前でGDISPOSEを行うこと。
;********************************************************************************************
@バッファ画像廃棄
#DIM グラフィックID		;リソースを登録するグラフィックID
;ライブラリによって登録されたGIDがバッファであるかチェックして廃棄
FOR LOCAL, 0, GPL保有GID数
	IF SUBSTRING(GPLリソース名:LOCAL, 0, 7) == "[[BUF]]"
		;グラフィック廃棄
		グラフィックID = GPLグラフィックID:LOCAL
		ARRAYREMOVE GPLリソース名, LOCAL, 1
		ARRAYREMOVE GPLグラフィックID, LOCAL, 1
		GPL保有GID数--
		GDISPOSE グラフィックID
		;DEBUGPRINTFORML グラフィックID「{グラフィックID}」を廃棄しました。
		LOCAL--
	ENDIF
NEXT
RETURN 1

;********************************************************************************************
;連番画像生成用関数
;一枚の画像から複数のスプライトを等間隔で分割し、リソースとして保存する。
;つまり、リソースの画像のCSV表記をせずとも、自動で指定した数に分割してスプライトに登録する。
;登録されたスプライトは、『[スプライト名]_[連番]』としてスプライト登録される。(連番は1始まり)
;登録したスプライト名は以後通常の画像と同じように使用することができる。
;********************************************************************************************
@連番画像生成(リソースファイル名, 出力スプライト名, 縦分割数, 横分割数)
#DIM グラフィックID		;リソースを登録するグラフィックID
#DIMS リソースファイル名		;参照するリソースファイル名称
#DIMS 出力スプライト名	;出力するスプライト（内部用画像）の名称
#DIM 縦分割数			;リソース画像を縦に分割する数 1～
#DIM 横分割数			;リソース画像を横に分割する数 1～
#DIM 分割縦幅			;リソースの縦幅から割り出した分割後のスプライトの縦幅
#DIM 分割横幅			;リソースの横幅から割り出した分割後のスプライトの横幅

;指定したスプライト名で既に連番生成されている場合は関数を終了する
SIF SPRITECREATED(@"%出力スプライト名%_1")
	RETURN 0

;分割数に1以外が設定された場合の対処
SIF 縦分割数 < 1
	縦分割数 = 1
SIF 横分割数 < 1
	横分割数 = 1

;前回呼び出されていれば続きから始める
グラフィックID = NEXT_GID
WHILE GCREATED(グラフィックID)
	;空いているグラフィックIDを走査する
	グラフィックID ++
WEND
;次回は続きから走査するように設定
NEXT_GID = グラフィックID + 1
;グラフィックの取り込み
IF !GCREATE_拡張子F(グラフィックID, リソースファイル名)
	DEBUGPRINTFORML グラフィックの作成に失敗しました。
	DEBUGPRINTFORML リソースファイルが見つからなかった可能性があります。
	RETURN 0
ENDIF
GPLグラフィックID:GPL保有GID数 = グラフィックID
GPLリソース名:GPL保有GID数 '= リソースファイル名
GPL保有GID数++
;DEBUGPRINTFORML グラフィック番号「{グラフィックID}」に「%リソースファイル名%」を登録しました。


;作成するスプライトの縦幅を取得
分割縦幅 = GHEIGHT(グラフィックID) / 縦分割数
;作成するスプライトの横幅を取得
分割横幅 = GWIDTH(グラフィックID) / 横分割数

;スプライトを生成
LOCAL:3 = 0
FOR LOCAL, 0, 縦分割数
	FOR LOCAL:1, 0, 横分割数
		LOCAL:3 ++
		IF !SPRITECREATED(@"%出力スプライト名%_{LOCAL:3}")
			SPRITECREATE @"%出力スプライト名%_{LOCAL:3}", グラフィックID, LOCAL:1 * 分割横幅, LOCAL * 分割縦幅, 分割横幅, 分割縦幅
			;DEBUGPRINTFORML スプライト「%出力スプライト名%_{LOCAL:3}」を生成しました。
		ENDIF
	NEXT
NEXT

RETURN 1

;********************************************************************************************
;アニメーションフレームレート設定用関数
;秒間に何回アニメーションの再描画を行うかを設定する関数。
;要はSETANIMETIMERをFRSに変換したもの。
;********************************************************************************************
@アニメフレームレート設定(フレームレート = 50)
#DIM フレームレート
	SETANIMETIMER 1000 / フレームレート
	アニメーションフレームレート = 1000 / フレームレート
return 1

;********************************************************************************************
;アニメーション画像生成用関数
;一枚の画像から複数のスプライトを等間隔で分割し、アニメーションとして保存する。
;つまり、リソースの画像のCSV表記をせずとも、自動で指定した数に分割してアニメーション登録する。
;登録したスプライト名は以後通常の画像と同じように使用することができる。
;（※アニメフレームレート設定、もしくはSETANIMETIMERを呼ばないとアニメーションは再生しません）
;********************************************************************************************
@アニメーション画像生成(リソースファイル名, 出力スプライト名, 縦分割数, 横分割数, 描画間隔, 折り返し = 0)
#DIM グラフィックID			;リソースを登録するグラフィックID
#DIMS リソースファイル名	;参照するリソースファイル名称
#DIMS 出力スプライト名		;出力するスプライト（内部用画像）の名称
#DIM 縦分割数				;リソース画像を縦に分割する数 1～
#DIM 横分割数				;リソース画像を横に分割する数 1～
#DIM 分割縦幅				;リソースの縦幅から割り出した分割後のスプライトの縦幅
#DIM 分割横幅				;リソースの横幅から割り出した分割後のスプライトの横幅
#DIM 描画間隔				;アニメーションフレーム描画の間隔（ミリ秒）
#DIM 折り返し				;リソース画像内でアニメーションが折り返すか否か

;指定したスプライト名で既に連番生成されている場合は関数を終了する
SIF SPRITECREATED(出力スプライト名)
	RETURN 0

;分割数に1以外が設定された場合の対処
SIF 縦分割数 < 1
	縦分割数 = 1
SIF 横分割数 < 1
	横分割数 = 1

;前回呼び出されていれば続きから始める
グラフィックID = NEXT_GID
WHILE GCREATED(グラフィックID)
	;空いているグラフィックIDを走査する
	グラフィックID ++
WEND
;次回は続きから走査するように設定
NEXT_GID = グラフィックID + 1
;グラフィックの取り込み
IF !GCREATE_拡張子F(グラフィックID, リソースファイル名)
	DEBUGPRINTFORML グラフィックの作成に失敗しました。
	DEBUGPRINTFORML リソースファイルが見つからなかった可能性があります。
	RETURN 0
ENDIF
GPLグラフィックID:GPL保有GID数 = グラフィックID
GPLリソース名:GPL保有GID数 '= リソースファイル名
GPL保有GID数++
;DEBUGPRINTFORML グラフィック番号「{グラフィックID}」に「%リソースファイル名%」を登録しました。


;作成するスプライトの縦幅を取得
分割縦幅 = GHEIGHT(グラフィックID) / 縦分割数
;作成するスプライトの横幅を取得
分割横幅 = GWIDTH(グラフィックID) / 横分割数

;スプライトを生成
IF SPRITEANIMECREATE(出力スプライト名, 分割横幅, 分割縦幅)
	;DEBUGPRINTFORML アニメーションスプライト「%出力スプライト名%」を生成しました。
ENDIF

LOCAL:3 = 0
FOR LOCAL, 0, 縦分割数
	FOR LOCAL:1, 0, 横分割数
		LOCAL:3 ++
		SPRITEANIMEADDFRAME 出力スプライト名, グラフィックID, LOCAL:1 * 分割横幅, LOCAL * 分割縦幅, 分割横幅, 分割縦幅, 0, 0, 描画間隔
		;DEBUGPRINTFORML アニメーションスプライトにフレーム{LOCAL:3}を追加しました。
	NEXT
NEXT

IF 折り返し
	FOR LOCAL, 縦分割数 - 1, -1, -1
		FOR LOCAL:1, 横分割数 - 1, 0, -1
			LOCAL:3 ++
			SPRITEANIMEADDFRAME 出力スプライト名, グラフィックID, LOCAL:1 * 分割横幅, LOCAL * 分割縦幅, 分割横幅, 分割縦幅, 0, 0, 描画間隔
			;DEBUGPRINTFORML アニメーションスプライトにフレーム{LOCAL:3}を追加しました。
		NEXT
	NEXT
ENDIF

RETURN 1
